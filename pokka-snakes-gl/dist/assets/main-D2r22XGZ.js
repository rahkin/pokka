var e=Object.defineProperty;!function(){const e=document.createElement("link").relList;if(!(e&&e.supports&&e.supports("modulepreload"))){for(const e of document.querySelectorAll('link[rel="modulepreload"]'))t(e);new MutationObserver((e=>{for(const n of e)if("childList"===n.type)for(const e of n.addedNodes)"LINK"===e.tagName&&"modulepreload"===e.rel&&t(e)})).observe(document,{childList:!0,subtree:!0})}function t(e){if(e.ep)return;e.ep=!0;const t=function(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),"use-credentials"===e.crossOrigin?t.credentials="include":"anonymous"===e.crossOrigin?t.credentials="omit":t.credentials="same-origin",t}(e);fetch(e.href,t)}}();
/**
 * @license
 * Copyright 2010-2023 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
const t="162",n=0,i=1,s=2,r=0,a=1,o=2,l=3,c=0,h=1,d=2,u=100,p=101,m=102,f=200,g=201,v=202,_=203,y=204,x=205,M=206,S=207,E=208,w=209,b=210,T=211,A=212,R=213,C=214,P=301,L=302,U=306,I=1e3,D=1001,N=1002,O=1003,F=1004,z=1005,k=1006,B=1007,G=1008,H=1009,V=1012,W=1013,X=1014,j=1015,q=1016,Y=1020,K=1023,J=1026,Z=1027,$=33776,Q=33777,ee=33778,te=33779,ne=36492,ie="",se="srgb",re="srgb-linear",ae="display-p3",oe="display-p3-linear",le="linear",ce="srgb",he="rec709",de="p3",ue=7680,pe=512,me=513,fe=514,ge=515,ve=516,_e=517,ye=518,xe=519,Me="300 es",Se=1035,Ee=2e3,we=2001;class be{addEventListener(e,t){void 0===this._listeners&&(this._listeners={});const n=this._listeners;void 0===n[e]&&(n[e]=[]),-1===n[e].indexOf(t)&&n[e].push(t)}hasEventListener(e,t){if(void 0===this._listeners)return!1;const n=this._listeners;return void 0!==n[e]&&-1!==n[e].indexOf(t)}removeEventListener(e,t){if(void 0===this._listeners)return;const n=this._listeners[e];if(void 0!==n){const e=n.indexOf(t);-1!==e&&n.splice(e,1)}}dispatchEvent(e){if(void 0===this._listeners)return;const t=this._listeners[e.type];if(void 0!==t){e.target=this;const n=t.slice(0);for(let t=0,i=n.length;t<i;t++)n[t].call(this,e);e.target=null}}}const Te=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"],Ae=Math.PI/180,Re=180/Math.PI;function Ce(){const e=4294967295*Math.random()|0,t=4294967295*Math.random()|0,n=4294967295*Math.random()|0,i=4294967295*Math.random()|0;return(Te[255&e]+Te[e>>8&255]+Te[e>>16&255]+Te[e>>24&255]+"-"+Te[255&t]+Te[t>>8&255]+"-"+Te[t>>16&15|64]+Te[t>>24&255]+"-"+Te[63&n|128]+Te[n>>8&255]+"-"+Te[n>>16&255]+Te[n>>24&255]+Te[255&i]+Te[i>>8&255]+Te[i>>16&255]+Te[i>>24&255]).toLowerCase()}function Pe(e,t,n){return Math.max(t,Math.min(n,e))}function Le(e,t,n){return(1-n)*e+n*t}function Ue(e){return!(e&e-1)&&0!==e}function Ie(e){return Math.pow(2,Math.floor(Math.log(e)/Math.LN2))}function De(e,t){switch(t.constructor){case Float32Array:return e;case Uint32Array:return e/4294967295;case Uint16Array:return e/65535;case Uint8Array:return e/255;case Int32Array:return Math.max(e/2147483647,-1);case Int16Array:return Math.max(e/32767,-1);case Int8Array:return Math.max(e/127,-1);default:throw new Error("Invalid component type.")}}function Ne(e,t){switch(t.constructor){case Float32Array:return e;case Uint32Array:return Math.round(4294967295*e);case Uint16Array:return Math.round(65535*e);case Uint8Array:return Math.round(255*e);case Int32Array:return Math.round(2147483647*e);case Int16Array:return Math.round(32767*e);case Int8Array:return Math.round(127*e);default:throw new Error("Invalid component type.")}}const Oe=Ae;class Fe{constructor(e=0,t=0){Fe.prototype.isVector2=!0,this.x=e,this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){return this.x=e,this.y=t,this}setScalar(e){return this.x=e,this.y=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){return this.x=e.x,this.y=e.y,this}add(e){return this.x+=e.x,this.y+=e.y,this}addScalar(e){return this.x+=e,this.y+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this}subScalar(e){return this.x-=e,this.y-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this}multiply(e){return this.x*=e.x,this.y*=e.y,this}multiplyScalar(e){return this.x*=e,this.y*=e,this}divide(e){return this.x/=e.x,this.y/=e.y,this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const t=this.x,n=this.y,i=e.elements;return this.x=i[0]*t+i[3]*n+i[6],this.y=i[1]*t+i[4]*n+i[7],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(0===t)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(Pe(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y;return t*t+n*n}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this}rotateAround(e,t){const n=Math.cos(t),i=Math.sin(t),s=this.x-e.x,r=this.y-e.y;return this.x=s*n-r*i+e.x,this.y=s*i+r*n+e.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class ze{constructor(e,t,n,i,s,r,a,o,l){ze.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],void 0!==e&&this.set(e,t,n,i,s,r,a,o,l)}set(e,t,n,i,s,r,a,o,l){const c=this.elements;return c[0]=e,c[1]=i,c[2]=a,c[3]=t,c[4]=s,c[5]=o,c[6]=n,c[7]=r,c[8]=l,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],this}extractBasis(e,t,n){return e.setFromMatrix3Column(this,0),t.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(e){const t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,i=t.elements,s=this.elements,r=n[0],a=n[3],o=n[6],l=n[1],c=n[4],h=n[7],d=n[2],u=n[5],p=n[8],m=i[0],f=i[3],g=i[6],v=i[1],_=i[4],y=i[7],x=i[2],M=i[5],S=i[8];return s[0]=r*m+a*v+o*x,s[3]=r*f+a*_+o*M,s[6]=r*g+a*y+o*S,s[1]=l*m+c*v+h*x,s[4]=l*f+c*_+h*M,s[7]=l*g+c*y+h*S,s[2]=d*m+u*v+p*x,s[5]=d*f+u*_+p*M,s[8]=d*g+u*y+p*S,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[1],i=e[2],s=e[3],r=e[4],a=e[5],o=e[6],l=e[7],c=e[8];return t*r*c-t*a*l-n*s*c+n*a*o+i*s*l-i*r*o}invert(){const e=this.elements,t=e[0],n=e[1],i=e[2],s=e[3],r=e[4],a=e[5],o=e[6],l=e[7],c=e[8],h=c*r-a*l,d=a*o-c*s,u=l*s-r*o,p=t*h+n*d+i*u;if(0===p)return this.set(0,0,0,0,0,0,0,0,0);const m=1/p;return e[0]=h*m,e[1]=(i*l-c*n)*m,e[2]=(a*n-i*r)*m,e[3]=d*m,e[4]=(c*t-i*o)*m,e[5]=(i*s-a*t)*m,e[6]=u*m,e[7]=(n*o-l*t)*m,e[8]=(r*t-n*s)*m,this}transpose(){let e;const t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){const t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this}setUvTransform(e,t,n,i,s,r,a){const o=Math.cos(s),l=Math.sin(s);return this.set(n*o,n*l,-n*(o*r+l*a)+r+e,-i*l,i*o,-i*(-l*r+o*a)+a+t,0,0,1),this}scale(e,t){return this.premultiply(ke.makeScale(e,t)),this}rotate(e){return this.premultiply(ke.makeRotation(-e)),this}translate(e,t){return this.premultiply(ke.makeTranslation(e,t)),this}makeTranslation(e,t){return e.isVector2?this.set(1,0,e.x,0,1,e.y,0,0,1):this.set(1,0,e,0,1,t,0,0,1),this}makeRotation(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,n,t,0,0,0,1),this}makeScale(e,t){return this.set(e,0,0,0,t,0,0,0,1),this}equals(e){const t=this.elements,n=e.elements;for(let i=0;i<9;i++)if(t[i]!==n[i])return!1;return!0}fromArray(e,t=0){for(let n=0;n<9;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e}clone(){return(new this.constructor).fromArray(this.elements)}}const ke=new ze;function Be(e){for(let t=e.length-1;t>=0;--t)if(e[t]>=65535)return!0;return!1}function Ge(e){return document.createElementNS("http://www.w3.org/1999/xhtml",e)}function He(){const e=Ge("canvas");return e.style.display="block",e}const Ve={};const We=(new ze).set(.8224621,.177538,0,.0331941,.9668058,0,.0170827,.0723974,.9105199),Xe=(new ze).set(1.2249401,-.2249404,0,-.0420569,1.0420571,0,-.0196376,-.0786361,1.0982735),je={[re]:{transfer:le,primaries:he,toReference:e=>e,fromReference:e=>e},[se]:{transfer:ce,primaries:he,toReference:e=>e.convertSRGBToLinear(),fromReference:e=>e.convertLinearToSRGB()},[oe]:{transfer:le,primaries:de,toReference:e=>e.applyMatrix3(Xe),fromReference:e=>e.applyMatrix3(We)},[ae]:{transfer:ce,primaries:de,toReference:e=>e.convertSRGBToLinear().applyMatrix3(Xe),fromReference:e=>e.applyMatrix3(We).convertLinearToSRGB()}},qe=new Set([re,oe]),Ye={enabled:!0,_workingColorSpace:re,get workingColorSpace(){return this._workingColorSpace},set workingColorSpace(e){if(!qe.has(e))throw new Error(`Unsupported working color space, "${e}".`);this._workingColorSpace=e},convert:function(e,t,n){if(!1===this.enabled||t===n||!t||!n)return e;const i=je[t].toReference;return(0,je[n].fromReference)(i(e))},fromWorkingColorSpace:function(e,t){return this.convert(e,this._workingColorSpace,t)},toWorkingColorSpace:function(e,t){return this.convert(e,t,this._workingColorSpace)},getPrimaries:function(e){return je[e].primaries},getTransfer:function(e){return e===ie?le:je[e].transfer}};function Ke(e){return e<.04045?.0773993808*e:Math.pow(.9478672986*e+.0521327014,2.4)}function Je(e){return e<.0031308?12.92*e:1.055*Math.pow(e,.41666)-.055}let Ze;class $e{static getDataURL(e){if(/^data:/i.test(e.src))return e.src;if("undefined"==typeof HTMLCanvasElement)return e.src;let t;if(e instanceof HTMLCanvasElement)t=e;else{void 0===Ze&&(Ze=Ge("canvas")),Ze.width=e.width,Ze.height=e.height;const n=Ze.getContext("2d");e instanceof ImageData?n.putImageData(e,0,0):n.drawImage(e,0,0,e.width,e.height),t=Ze}return t.width>2048||t.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",e),t.toDataURL("image/jpeg",.6)):t.toDataURL("image/png")}static sRGBToLinear(e){if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap){const t=Ge("canvas");t.width=e.width,t.height=e.height;const n=t.getContext("2d");n.drawImage(e,0,0,e.width,e.height);const i=n.getImageData(0,0,e.width,e.height),s=i.data;for(let e=0;e<s.length;e++)s[e]=255*Ke(s[e]/255);return n.putImageData(i,0,0),t}if(e.data){const t=e.data.slice(0);for(let e=0;e<t.length;e++)t instanceof Uint8Array||t instanceof Uint8ClampedArray?t[e]=Math.floor(255*Ke(t[e]/255)):t[e]=Ke(t[e]);return{data:t,width:e.width,height:e.height}}return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),e}}let Qe=0;class et{constructor(e=null){this.isSource=!0,Object.defineProperty(this,"id",{value:Qe++}),this.uuid=Ce(),this.data=e,this.dataReady=!0,this.version=0}set needsUpdate(e){!0===e&&this.version++}toJSON(e){const t=void 0===e||"string"==typeof e;if(!t&&void 0!==e.images[this.uuid])return e.images[this.uuid];const n={uuid:this.uuid,url:""},i=this.data;if(null!==i){let e;if(Array.isArray(i)){e=[];for(let t=0,n=i.length;t<n;t++)i[t].isDataTexture?e.push(tt(i[t].image)):e.push(tt(i[t]))}else e=tt(i);n.url=e}return t||(e.images[this.uuid]=n),n}}function tt(e){return"undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap?$e.getDataURL(e):e.data?{data:Array.from(e.data),width:e.width,height:e.height,type:e.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let nt=0;class it extends be{constructor(e=it.DEFAULT_IMAGE,t=it.DEFAULT_MAPPING,n=1001,i=1001,s=1006,r=1008,a=1023,o=1009,l=it.DEFAULT_ANISOTROPY,c=""){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:nt++}),this.uuid=Ce(),this.name="",this.source=new et(e),this.mipmaps=[],this.mapping=t,this.channel=0,this.wrapS=n,this.wrapT=i,this.magFilter=s,this.minFilter=r,this.anisotropy=l,this.format=a,this.internalFormat=null,this.type=o,this.offset=new Fe(0,0),this.repeat=new Fe(1,1),this.center=new Fe(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new ze,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=c,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.needsPMREMUpdate=!1}get image(){return this.source.data}set image(e=null){this.source.data=e}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return(new this.constructor).copy(this)}copy(e){return this.name=e.name,this.source=e.source,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.channel=e.channel,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.internalFormat=e.internalFormat,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.colorSpace=e.colorSpace,this.userData=JSON.parse(JSON.stringify(e.userData)),this.needsUpdate=!0,this}toJSON(e){const t=void 0===e||"string"==typeof e;if(!t&&void 0!==e.textures[this.uuid])return e.textures[this.uuid];const n={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(e).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(n.userData=this.userData),t||(e.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(300!==this.mapping)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case I:e.x=e.x-Math.floor(e.x);break;case D:e.x=e.x<0?0:1;break;case N:1===Math.abs(Math.floor(e.x)%2)?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x)}if(e.y<0||e.y>1)switch(this.wrapT){case I:e.y=e.y-Math.floor(e.y);break;case D:e.y=e.y<0?0:1;break;case N:1===Math.abs(Math.floor(e.y)%2)?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y)}return this.flipY&&(e.y=1-e.y),e}set needsUpdate(e){!0===e&&(this.version++,this.source.needsUpdate=!0)}}it.DEFAULT_IMAGE=null,it.DEFAULT_MAPPING=300,it.DEFAULT_ANISOTROPY=1;class st{constructor(e=0,t=0,n=0,i=1){st.prototype.isVector4=!0,this.x=e,this.y=t,this.z=n,this.w=i}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,n,i){return this.x=e,this.y=t,this.z=n,this.w=i,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this.w=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setW(e){return this.w=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=void 0!==e.w?e.w:1,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this.w*=e.w,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this}applyMatrix4(e){const t=this.x,n=this.y,i=this.z,s=this.w,r=e.elements;return this.x=r[0]*t+r[4]*n+r[8]*i+r[12]*s,this.y=r[1]*t+r[5]*n+r[9]*i+r[13]*s,this.z=r[2]*t+r[6]*n+r[10]*i+r[14]*s,this.w=r[3]*t+r[7]*n+r[11]*i+r[15]*s,this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this}setAxisAngleFromRotationMatrix(e){let t,n,i,s;const r=.01,a=.1,o=e.elements,l=o[0],c=o[4],h=o[8],d=o[1],u=o[5],p=o[9],m=o[2],f=o[6],g=o[10];if(Math.abs(c-d)<r&&Math.abs(h-m)<r&&Math.abs(p-f)<r){if(Math.abs(c+d)<a&&Math.abs(h+m)<a&&Math.abs(p+f)<a&&Math.abs(l+u+g-3)<a)return this.set(1,0,0,0),this;t=Math.PI;const e=(l+1)/2,o=(u+1)/2,v=(g+1)/2,_=(c+d)/4,y=(h+m)/4,x=(p+f)/4;return e>o&&e>v?e<r?(n=0,i=.707106781,s=.707106781):(n=Math.sqrt(e),i=_/n,s=y/n):o>v?o<r?(n=.707106781,i=0,s=.707106781):(i=Math.sqrt(o),n=_/i,s=x/i):v<r?(n=.707106781,i=.707106781,s=0):(s=Math.sqrt(v),n=y/s,i=x/s),this.set(n,i,s,t),this}let v=Math.sqrt((f-p)*(f-p)+(h-m)*(h-m)+(d-c)*(d-c));return Math.abs(v)<.001&&(v=1),this.x=(f-p)/v,this.y=(h-m)/v,this.z=(d-c)/v,this.w=Math.acos((l+u+g-1)/2),this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this.w=Math.max(e.w,Math.min(t.w,this.w)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this.w=Math.max(e,Math.min(t,this.w)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this.w=e.w+(t.w-e.w)*n,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class rt extends be{constructor(e=1,t=1,n={}){super(),this.isRenderTarget=!0,this.width=e,this.height=t,this.depth=1,this.scissor=new st(0,0,e,t),this.scissorTest=!1,this.viewport=new st(0,0,e,t);const i={width:e,height:t,depth:1};n=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:k,depthBuffer:!0,stencilBuffer:!1,depthTexture:null,samples:0,count:1},n);const s=new it(i,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.colorSpace);s.flipY=!1,s.generateMipmaps=n.generateMipmaps,s.internalFormat=n.internalFormat,this.textures=[];const r=n.count;for(let a=0;a<r;a++)this.textures[a]=s.clone(),this.textures[a].isRenderTargetTexture=!0;this.depthBuffer=n.depthBuffer,this.stencilBuffer=n.stencilBuffer,this.depthTexture=n.depthTexture,this.samples=n.samples}get texture(){return this.textures[0]}set texture(e){this.textures[0]=e}setSize(e,t,n=1){if(this.width!==e||this.height!==t||this.depth!==n){this.width=e,this.height=t,this.depth=n;for(let i=0,s=this.textures.length;i<s;i++)this.textures[i].image.width=e,this.textures[i].image.height=t,this.textures[i].image.depth=n;this.dispose()}this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)}clone(){return(new this.constructor).copy(this)}copy(e){this.width=e.width,this.height=e.height,this.depth=e.depth,this.scissor.copy(e.scissor),this.scissorTest=e.scissorTest,this.viewport.copy(e.viewport),this.textures.length=0;for(let n=0,i=e.textures.length;n<i;n++)this.textures[n]=e.textures[n].clone(),this.textures[n].isRenderTargetTexture=!0;const t=Object.assign({},e.texture.image);return this.texture.source=new et(t),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,null!==e.depthTexture&&(this.depthTexture=e.depthTexture.clone()),this.samples=e.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class at extends rt{constructor(e=1,t=1,n={}){super(e,t,n),this.isWebGLRenderTarget=!0}}class ot extends it{constructor(e=null,t=1,n=1,i=1){super(null),this.isDataArrayTexture=!0,this.image={data:e,width:t,height:n,depth:i},this.magFilter=O,this.minFilter=O,this.wrapR=D,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class lt extends it{constructor(e=null,t=1,n=1,i=1){super(null),this.isData3DTexture=!0,this.image={data:e,width:t,height:n,depth:i},this.magFilter=O,this.minFilter=O,this.wrapR=D,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class ct{constructor(e=0,t=0,n=0,i=1){this.isQuaternion=!0,this._x=e,this._y=t,this._z=n,this._w=i}static slerpFlat(e,t,n,i,s,r,a){let o=n[i+0],l=n[i+1],c=n[i+2],h=n[i+3];const d=s[r+0],u=s[r+1],p=s[r+2],m=s[r+3];if(0===a)return e[t+0]=o,e[t+1]=l,e[t+2]=c,void(e[t+3]=h);if(1===a)return e[t+0]=d,e[t+1]=u,e[t+2]=p,void(e[t+3]=m);if(h!==m||o!==d||l!==u||c!==p){let e=1-a;const t=o*d+l*u+c*p+h*m,n=t>=0?1:-1,i=1-t*t;if(i>Number.EPSILON){const s=Math.sqrt(i),r=Math.atan2(s,t*n);e=Math.sin(e*r)/s,a=Math.sin(a*r)/s}const s=a*n;if(o=o*e+d*s,l=l*e+u*s,c=c*e+p*s,h=h*e+m*s,e===1-a){const e=1/Math.sqrt(o*o+l*l+c*c+h*h);o*=e,l*=e,c*=e,h*=e}}e[t]=o,e[t+1]=l,e[t+2]=c,e[t+3]=h}static multiplyQuaternionsFlat(e,t,n,i,s,r){const a=n[i],o=n[i+1],l=n[i+2],c=n[i+3],h=s[r],d=s[r+1],u=s[r+2],p=s[r+3];return e[t]=a*p+c*h+o*u-l*d,e[t+1]=o*p+c*d+l*h-a*u,e[t+2]=l*p+c*u+a*d-o*h,e[t+3]=c*p-a*h-o*d-l*u,e}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e,this._onChangeCallback()}set(e,t,n,i){return this._x=e,this._y=t,this._z=n,this._w=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this}setFromEuler(e,t=!0){const n=e._x,i=e._y,s=e._z,r=e._order,a=Math.cos,o=Math.sin,l=a(n/2),c=a(i/2),h=a(s/2),d=o(n/2),u=o(i/2),p=o(s/2);switch(r){case"XYZ":this._x=d*c*h+l*u*p,this._y=l*u*h-d*c*p,this._z=l*c*p+d*u*h,this._w=l*c*h-d*u*p;break;case"YXZ":this._x=d*c*h+l*u*p,this._y=l*u*h-d*c*p,this._z=l*c*p-d*u*h,this._w=l*c*h+d*u*p;break;case"ZXY":this._x=d*c*h-l*u*p,this._y=l*u*h+d*c*p,this._z=l*c*p+d*u*h,this._w=l*c*h-d*u*p;break;case"ZYX":this._x=d*c*h-l*u*p,this._y=l*u*h+d*c*p,this._z=l*c*p-d*u*h,this._w=l*c*h+d*u*p;break;case"YZX":this._x=d*c*h+l*u*p,this._y=l*u*h+d*c*p,this._z=l*c*p-d*u*h,this._w=l*c*h-d*u*p;break;case"XZY":this._x=d*c*h-l*u*p,this._y=l*u*h-d*c*p,this._z=l*c*p+d*u*h,this._w=l*c*h+d*u*p;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+r)}return!0===t&&this._onChangeCallback(),this}setFromAxisAngle(e,t){const n=t/2,i=Math.sin(n);return this._x=e.x*i,this._y=e.y*i,this._z=e.z*i,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(e){const t=e.elements,n=t[0],i=t[4],s=t[8],r=t[1],a=t[5],o=t[9],l=t[2],c=t[6],h=t[10],d=n+a+h;if(d>0){const e=.5/Math.sqrt(d+1);this._w=.25/e,this._x=(c-o)*e,this._y=(s-l)*e,this._z=(r-i)*e}else if(n>a&&n>h){const e=2*Math.sqrt(1+n-a-h);this._w=(c-o)/e,this._x=.25*e,this._y=(i+r)/e,this._z=(s+l)/e}else if(a>h){const e=2*Math.sqrt(1+a-n-h);this._w=(s-l)/e,this._x=(i+r)/e,this._y=.25*e,this._z=(o+c)/e}else{const e=2*Math.sqrt(1+h-n-a);this._w=(r-i)/e,this._x=(s+l)/e,this._y=(o+c)/e,this._z=.25*e}return this._onChangeCallback(),this}setFromUnitVectors(e,t){let n=e.dot(t)+1;return n<Number.EPSILON?(n=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=n):(this._x=0,this._y=-e.z,this._z=e.y,this._w=n)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x,this._w=n),this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(Pe(this.dot(e),-1,1)))}rotateTowards(e,t){const n=this.angleTo(e);if(0===n)return this;const i=Math.min(1,t/n);return this.slerp(e,i),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();return 0===e?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this}multiply(e){return this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){const n=e._x,i=e._y,s=e._z,r=e._w,a=t._x,o=t._y,l=t._z,c=t._w;return this._x=n*c+r*a+i*l-s*o,this._y=i*c+r*o+s*a-n*l,this._z=s*c+r*l+n*o-i*a,this._w=r*c-n*a-i*o-s*l,this._onChangeCallback(),this}slerp(e,t){if(0===t)return this;if(1===t)return this.copy(e);const n=this._x,i=this._y,s=this._z,r=this._w;let a=r*e._w+n*e._x+i*e._y+s*e._z;if(a<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,a=-a):this.copy(e),a>=1)return this._w=r,this._x=n,this._y=i,this._z=s,this;const o=1-a*a;if(o<=Number.EPSILON){const e=1-t;return this._w=e*r+t*this._w,this._x=e*n+t*this._x,this._y=e*i+t*this._y,this._z=e*s+t*this._z,this.normalize(),this}const l=Math.sqrt(o),c=Math.atan2(l,a),h=Math.sin((1-t)*c)/l,d=Math.sin(t*c)/l;return this._w=r*h+this._w*d,this._x=n*h+this._x*d,this._y=i*h+this._y*d,this._z=s*h+this._z*d,this._onChangeCallback(),this}slerpQuaternions(e,t,n){return this.copy(e).slerp(t,n)}random(){const e=2*Math.PI*Math.random(),t=2*Math.PI*Math.random(),n=Math.random(),i=Math.sqrt(1-n),s=Math.sqrt(n);return this.set(i*Math.sin(e),i*Math.cos(e),s*Math.sin(t),s*Math.cos(t))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t=0){return this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e}fromBufferAttribute(e,t){return this._x=e.getX(t),this._y=e.getY(t),this._z=e.getZ(t),this._w=e.getW(t),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class ht{constructor(e=0,t=0,n=0){ht.prototype.isVector3=!0,this.x=e,this.y=t,this.z=n}set(e,t,n){return void 0===n&&(n=this.z),this.x=e,this.y=t,this.z=n,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this}multiplyVectors(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this}applyEuler(e){return this.applyQuaternion(ut.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(ut.setFromAxisAngle(e,t))}applyMatrix3(e){const t=this.x,n=this.y,i=this.z,s=e.elements;return this.x=s[0]*t+s[3]*n+s[6]*i,this.y=s[1]*t+s[4]*n+s[7]*i,this.z=s[2]*t+s[5]*n+s[8]*i,this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const t=this.x,n=this.y,i=this.z,s=e.elements,r=1/(s[3]*t+s[7]*n+s[11]*i+s[15]);return this.x=(s[0]*t+s[4]*n+s[8]*i+s[12])*r,this.y=(s[1]*t+s[5]*n+s[9]*i+s[13])*r,this.z=(s[2]*t+s[6]*n+s[10]*i+s[14])*r,this}applyQuaternion(e){const t=this.x,n=this.y,i=this.z,s=e.x,r=e.y,a=e.z,o=e.w,l=2*(r*i-a*n),c=2*(a*t-s*i),h=2*(s*n-r*t);return this.x=t+o*l+r*h-a*c,this.y=n+o*c+a*l-s*h,this.z=i+o*h+s*c-r*l,this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const t=this.x,n=this.y,i=this.z,s=e.elements;return this.x=s[0]*t+s[4]*n+s[8]*i,this.y=s[1]*t+s[5]*n+s[9]*i,this.z=s[2]*t+s[6]*n+s[10]*i,this.normalize()}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this}cross(e){return this.crossVectors(this,e)}crossVectors(e,t){const n=e.x,i=e.y,s=e.z,r=t.x,a=t.y,o=t.z;return this.x=i*o-s*a,this.y=s*r-n*o,this.z=n*a-i*r,this}projectOnVector(e){const t=e.lengthSq();if(0===t)return this.set(0,0,0);const n=e.dot(this)/t;return this.copy(e).multiplyScalar(n)}projectOnPlane(e){return dt.copy(this).projectOnVector(e),this.sub(dt)}reflect(e){return this.sub(dt.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(0===t)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(Pe(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y,i=this.z-e.z;return t*t+n*n+i*i}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,n){const i=Math.sin(t)*e;return this.x=i*Math.sin(n),this.y=Math.cos(t)*e,this.z=i*Math.cos(n),this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,n){return this.x=e*Math.sin(t),this.y=n,this.z=e*Math.cos(t),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}setFromMatrixScale(e){const t=this.setFromMatrixColumn(e,0).length(),n=this.setFromMatrixColumn(e,1).length(),i=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=n,this.z=i,this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,4*t)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,3*t)}setFromEuler(e){return this.x=e._x,this.y=e._y,this.z=e._z,this}setFromColor(e){return this.x=e.r,this.y=e.g,this.z=e.b,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const e=Math.random()*Math.PI*2,t=2*Math.random()-1,n=Math.sqrt(1-t*t);return this.x=n*Math.cos(e),this.y=t,this.z=n*Math.sin(e),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const dt=new ht,ut=new ct;class pt{constructor(e=new ht(1/0,1/0,1/0),t=new ht(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=e,this.max=t}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromArray(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t+=3)this.expandByPoint(ft.fromArray(e,t));return this}setFromBufferAttribute(e){this.makeEmpty();for(let t=0,n=e.count;t<n;t++)this.expandByPoint(ft.fromBufferAttribute(e,t));return this}setFromPoints(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const n=ft.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this}setFromObject(e,t=!1){return this.makeEmpty(),this.expandByObject(e,t)}clone(){return(new this.constructor).copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}expandByObject(e,t=!1){e.updateWorldMatrix(!1,!1);const n=e.geometry;if(void 0!==n){const i=n.getAttribute("position");if(!0===t&&void 0!==i&&!0!==e.isInstancedMesh)for(let t=0,n=i.count;t<n;t++)!0===e.isMesh?e.getVertexPosition(t,ft):ft.fromBufferAttribute(i,t),ft.applyMatrix4(e.matrixWorld),this.expandByPoint(ft);else void 0!==e.boundingBox?(null===e.boundingBox&&e.computeBoundingBox(),gt.copy(e.boundingBox)):(null===n.boundingBox&&n.computeBoundingBox(),gt.copy(n.boundingBox)),gt.applyMatrix4(e.matrixWorld),this.union(gt)}const i=e.children;for(let s=0,r=i.length;s<r;s++)this.expandByObject(i[s],t);return this}containsPoint(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y||e.z<this.min.z||e.z>this.max.z)}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z)}intersectsSphere(e){return this.clampPoint(e.center,ft),ft.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let t,n;return e.normal.x>0?(t=e.normal.x*this.min.x,n=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,n=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,n+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,n+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,n+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,n+=e.normal.z*this.min.z),t<=-e.constant&&n>=-e.constant}intersectsTriangle(e){if(this.isEmpty())return!1;this.getCenter(Et),wt.subVectors(this.max,Et),vt.subVectors(e.a,Et),_t.subVectors(e.b,Et),yt.subVectors(e.c,Et),xt.subVectors(_t,vt),Mt.subVectors(yt,_t),St.subVectors(vt,yt);let t=[0,-xt.z,xt.y,0,-Mt.z,Mt.y,0,-St.z,St.y,xt.z,0,-xt.x,Mt.z,0,-Mt.x,St.z,0,-St.x,-xt.y,xt.x,0,-Mt.y,Mt.x,0,-St.y,St.x,0];return!!At(t,vt,_t,yt,wt)&&(t=[1,0,0,0,1,0,0,0,1],!!At(t,vt,_t,yt,wt)&&(bt.crossVectors(xt,Mt),t=[bt.x,bt.y,bt.z],At(t,vt,_t,yt,wt)))}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return this.clampPoint(e,ft).distanceTo(e)}getBoundingSphere(e){return this.isEmpty()?e.makeEmpty():(this.getCenter(e.center),e.radius=.5*this.getSize(ft).length()),e}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}applyMatrix4(e){return this.isEmpty()||(mt[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),mt[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),mt[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),mt[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),mt[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),mt[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),mt[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),mt[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(mt)),this}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const mt=[new ht,new ht,new ht,new ht,new ht,new ht,new ht,new ht],ft=new ht,gt=new pt,vt=new ht,_t=new ht,yt=new ht,xt=new ht,Mt=new ht,St=new ht,Et=new ht,wt=new ht,bt=new ht,Tt=new ht;function At(e,t,n,i,s){for(let r=0,a=e.length-3;r<=a;r+=3){Tt.fromArray(e,r);const a=s.x*Math.abs(Tt.x)+s.y*Math.abs(Tt.y)+s.z*Math.abs(Tt.z),o=t.dot(Tt),l=n.dot(Tt),c=i.dot(Tt);if(Math.max(-Math.max(o,l,c),Math.min(o,l,c))>a)return!1}return!0}const Rt=new pt,Ct=new ht,Pt=new ht;class Lt{constructor(e=new ht,t=-1){this.isSphere=!0,this.center=e,this.radius=t}set(e,t){return this.center.copy(e),this.radius=t,this}setFromPoints(e,t){const n=this.center;void 0!==t?n.copy(t):Rt.setFromPoints(e).getCenter(n);let i=0;for(let s=0,r=e.length;s<r;s++)i=Math.max(i,n.distanceToSquared(e[s]));return this.radius=Math.sqrt(i),this}copy(e){return this.center.copy(e.center),this.radius=e.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){const n=this.center.distanceToSquared(e);return t.copy(e),n>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t}getBoundingBox(e){return this.isEmpty()?(e.makeEmpty(),e):(e.set(this.center,this.center),e.expandByScalar(this.radius),e)}applyMatrix4(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this}translate(e){return this.center.add(e),this}expandByPoint(e){if(this.isEmpty())return this.center.copy(e),this.radius=0,this;Ct.subVectors(e,this.center);const t=Ct.lengthSq();if(t>this.radius*this.radius){const e=Math.sqrt(t),n=.5*(e-this.radius);this.center.addScaledVector(Ct,n/e),this.radius+=n}return this}union(e){return e.isEmpty()?this:this.isEmpty()?(this.copy(e),this):(!0===this.center.equals(e.center)?this.radius=Math.max(this.radius,e.radius):(Pt.subVectors(e.center,this.center).setLength(e.radius),this.expandByPoint(Ct.copy(e.center).add(Pt)),this.expandByPoint(Ct.copy(e.center).sub(Pt))),this)}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return(new this.constructor).copy(this)}}const Ut=new ht,It=new ht,Dt=new ht,Nt=new ht,Ot=new ht,Ft=new ht,zt=new ht;class kt{constructor(e=new ht,t=new ht(0,0,-1)){this.origin=e,this.direction=t}set(e,t){return this.origin.copy(e),this.direction.copy(t),this}copy(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this}at(e,t){return t.copy(this.origin).addScaledVector(this.direction,e)}lookAt(e){return this.direction.copy(e).sub(this.origin).normalize(),this}recast(e){return this.origin.copy(this.at(e,Ut)),this}closestPointToPoint(e,t){t.subVectors(e,this.origin);const n=t.dot(this.direction);return n<0?t.copy(this.origin):t.copy(this.origin).addScaledVector(this.direction,n)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){const t=Ut.subVectors(e,this.origin).dot(this.direction);return t<0?this.origin.distanceToSquared(e):(Ut.copy(this.origin).addScaledVector(this.direction,t),Ut.distanceToSquared(e))}distanceSqToSegment(e,t,n,i){It.copy(e).add(t).multiplyScalar(.5),Dt.copy(t).sub(e).normalize(),Nt.copy(this.origin).sub(It);const s=.5*e.distanceTo(t),r=-this.direction.dot(Dt),a=Nt.dot(this.direction),o=-Nt.dot(Dt),l=Nt.lengthSq(),c=Math.abs(1-r*r);let h,d,u,p;if(c>0)if(h=r*o-a,d=r*a-o,p=s*c,h>=0)if(d>=-p)if(d<=p){const e=1/c;h*=e,d*=e,u=h*(h+r*d+2*a)+d*(r*h+d+2*o)+l}else d=s,h=Math.max(0,-(r*d+a)),u=-h*h+d*(d+2*o)+l;else d=-s,h=Math.max(0,-(r*d+a)),u=-h*h+d*(d+2*o)+l;else d<=-p?(h=Math.max(0,-(-r*s+a)),d=h>0?-s:Math.min(Math.max(-s,-o),s),u=-h*h+d*(d+2*o)+l):d<=p?(h=0,d=Math.min(Math.max(-s,-o),s),u=d*(d+2*o)+l):(h=Math.max(0,-(r*s+a)),d=h>0?s:Math.min(Math.max(-s,-o),s),u=-h*h+d*(d+2*o)+l);else d=r>0?-s:s,h=Math.max(0,-(r*d+a)),u=-h*h+d*(d+2*o)+l;return n&&n.copy(this.origin).addScaledVector(this.direction,h),i&&i.copy(It).addScaledVector(Dt,d),u}intersectSphere(e,t){Ut.subVectors(e.center,this.origin);const n=Ut.dot(this.direction),i=Ut.dot(Ut)-n*n,s=e.radius*e.radius;if(i>s)return null;const r=Math.sqrt(s-i),a=n-r,o=n+r;return o<0?null:a<0?this.at(o,t):this.at(a,t)}intersectsSphere(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const t=e.normal.dot(this.direction);if(0===t)return 0===e.distanceToPoint(this.origin)?0:null;const n=-(this.origin.dot(e.normal)+e.constant)/t;return n>=0?n:null}intersectPlane(e,t){const n=this.distanceToPlane(e);return null===n?null:this.at(n,t)}intersectsPlane(e){const t=e.distanceToPoint(this.origin);if(0===t)return!0;return e.normal.dot(this.direction)*t<0}intersectBox(e,t){let n,i,s,r,a,o;const l=1/this.direction.x,c=1/this.direction.y,h=1/this.direction.z,d=this.origin;return l>=0?(n=(e.min.x-d.x)*l,i=(e.max.x-d.x)*l):(n=(e.max.x-d.x)*l,i=(e.min.x-d.x)*l),c>=0?(s=(e.min.y-d.y)*c,r=(e.max.y-d.y)*c):(s=(e.max.y-d.y)*c,r=(e.min.y-d.y)*c),n>r||s>i?null:((s>n||isNaN(n))&&(n=s),(r<i||isNaN(i))&&(i=r),h>=0?(a=(e.min.z-d.z)*h,o=(e.max.z-d.z)*h):(a=(e.max.z-d.z)*h,o=(e.min.z-d.z)*h),n>o||a>i?null:((a>n||n!=n)&&(n=a),(o<i||i!=i)&&(i=o),i<0?null:this.at(n>=0?n:i,t)))}intersectsBox(e){return null!==this.intersectBox(e,Ut)}intersectTriangle(e,t,n,i,s){Ot.subVectors(t,e),Ft.subVectors(n,e),zt.crossVectors(Ot,Ft);let r,a=this.direction.dot(zt);if(a>0){if(i)return null;r=1}else{if(!(a<0))return null;r=-1,a=-a}Nt.subVectors(this.origin,e);const o=r*this.direction.dot(Ft.crossVectors(Nt,Ft));if(o<0)return null;const l=r*this.direction.dot(Ot.cross(Nt));if(l<0)return null;if(o+l>a)return null;const c=-r*Nt.dot(zt);return c<0?null:this.at(c/a,s)}applyMatrix4(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return(new this.constructor).copy(this)}}class Bt{constructor(e,t,n,i,s,r,a,o,l,c,h,d,u,p,m,f){Bt.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],void 0!==e&&this.set(e,t,n,i,s,r,a,o,l,c,h,d,u,p,m,f)}set(e,t,n,i,s,r,a,o,l,c,h,d,u,p,m,f){const g=this.elements;return g[0]=e,g[4]=t,g[8]=n,g[12]=i,g[1]=s,g[5]=r,g[9]=a,g[13]=o,g[2]=l,g[6]=c,g[10]=h,g[14]=d,g[3]=u,g[7]=p,g[11]=m,g[15]=f,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return(new Bt).fromArray(this.elements)}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],this}copyPosition(e){const t=this.elements,n=e.elements;return t[12]=n[12],t[13]=n[13],t[14]=n[14],this}setFromMatrix3(e){const t=e.elements;return this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1),this}extractBasis(e,t,n){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(e,t,n){return this.set(e.x,t.x,n.x,0,e.y,t.y,n.y,0,e.z,t.z,n.z,0,0,0,0,1),this}extractRotation(e){const t=this.elements,n=e.elements,i=1/Gt.setFromMatrixColumn(e,0).length(),s=1/Gt.setFromMatrixColumn(e,1).length(),r=1/Gt.setFromMatrixColumn(e,2).length();return t[0]=n[0]*i,t[1]=n[1]*i,t[2]=n[2]*i,t[3]=0,t[4]=n[4]*s,t[5]=n[5]*s,t[6]=n[6]*s,t[7]=0,t[8]=n[8]*r,t[9]=n[9]*r,t[10]=n[10]*r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromEuler(e){const t=this.elements,n=e.x,i=e.y,s=e.z,r=Math.cos(n),a=Math.sin(n),o=Math.cos(i),l=Math.sin(i),c=Math.cos(s),h=Math.sin(s);if("XYZ"===e.order){const e=r*c,n=r*h,i=a*c,s=a*h;t[0]=o*c,t[4]=-o*h,t[8]=l,t[1]=n+i*l,t[5]=e-s*l,t[9]=-a*o,t[2]=s-e*l,t[6]=i+n*l,t[10]=r*o}else if("YXZ"===e.order){const e=o*c,n=o*h,i=l*c,s=l*h;t[0]=e+s*a,t[4]=i*a-n,t[8]=r*l,t[1]=r*h,t[5]=r*c,t[9]=-a,t[2]=n*a-i,t[6]=s+e*a,t[10]=r*o}else if("ZXY"===e.order){const e=o*c,n=o*h,i=l*c,s=l*h;t[0]=e-s*a,t[4]=-r*h,t[8]=i+n*a,t[1]=n+i*a,t[5]=r*c,t[9]=s-e*a,t[2]=-r*l,t[6]=a,t[10]=r*o}else if("ZYX"===e.order){const e=r*c,n=r*h,i=a*c,s=a*h;t[0]=o*c,t[4]=i*l-n,t[8]=e*l+s,t[1]=o*h,t[5]=s*l+e,t[9]=n*l-i,t[2]=-l,t[6]=a*o,t[10]=r*o}else if("YZX"===e.order){const e=r*o,n=r*l,i=a*o,s=a*l;t[0]=o*c,t[4]=s-e*h,t[8]=i*h+n,t[1]=h,t[5]=r*c,t[9]=-a*c,t[2]=-l*c,t[6]=n*h+i,t[10]=e-s*h}else if("XZY"===e.order){const e=r*o,n=r*l,i=a*o,s=a*l;t[0]=o*c,t[4]=-h,t[8]=l*c,t[1]=e*h+s,t[5]=r*c,t[9]=n*h-i,t[2]=i*h-n,t[6]=a*c,t[10]=s*h+e}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromQuaternion(e){return this.compose(Vt,e,Wt)}lookAt(e,t,n){const i=this.elements;return qt.subVectors(e,t),0===qt.lengthSq()&&(qt.z=1),qt.normalize(),Xt.crossVectors(n,qt),0===Xt.lengthSq()&&(1===Math.abs(n.z)?qt.x+=1e-4:qt.z+=1e-4,qt.normalize(),Xt.crossVectors(n,qt)),Xt.normalize(),jt.crossVectors(qt,Xt),i[0]=Xt.x,i[4]=jt.x,i[8]=qt.x,i[1]=Xt.y,i[5]=jt.y,i[9]=qt.y,i[2]=Xt.z,i[6]=jt.z,i[10]=qt.z,this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,i=t.elements,s=this.elements,r=n[0],a=n[4],o=n[8],l=n[12],c=n[1],h=n[5],d=n[9],u=n[13],p=n[2],m=n[6],f=n[10],g=n[14],v=n[3],_=n[7],y=n[11],x=n[15],M=i[0],S=i[4],E=i[8],w=i[12],b=i[1],T=i[5],A=i[9],R=i[13],C=i[2],P=i[6],L=i[10],U=i[14],I=i[3],D=i[7],N=i[11],O=i[15];return s[0]=r*M+a*b+o*C+l*I,s[4]=r*S+a*T+o*P+l*D,s[8]=r*E+a*A+o*L+l*N,s[12]=r*w+a*R+o*U+l*O,s[1]=c*M+h*b+d*C+u*I,s[5]=c*S+h*T+d*P+u*D,s[9]=c*E+h*A+d*L+u*N,s[13]=c*w+h*R+d*U+u*O,s[2]=p*M+m*b+f*C+g*I,s[6]=p*S+m*T+f*P+g*D,s[10]=p*E+m*A+f*L+g*N,s[14]=p*w+m*R+f*U+g*O,s[3]=v*M+_*b+y*C+x*I,s[7]=v*S+_*T+y*P+x*D,s[11]=v*E+_*A+y*L+x*N,s[15]=v*w+_*R+y*U+x*O,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[4],i=e[8],s=e[12],r=e[1],a=e[5],o=e[9],l=e[13],c=e[2],h=e[6],d=e[10],u=e[14];return e[3]*(+s*o*h-i*l*h-s*a*d+n*l*d+i*a*u-n*o*u)+e[7]*(+t*o*u-t*l*d+s*r*d-i*r*u+i*l*c-s*o*c)+e[11]*(+t*l*h-t*a*u-s*r*h+n*r*u+s*a*c-n*l*c)+e[15]*(-i*a*c-t*o*h+t*a*d+i*r*h-n*r*d+n*o*c)}transpose(){const e=this.elements;let t;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this}setPosition(e,t,n){const i=this.elements;return e.isVector3?(i[12]=e.x,i[13]=e.y,i[14]=e.z):(i[12]=e,i[13]=t,i[14]=n),this}invert(){const e=this.elements,t=e[0],n=e[1],i=e[2],s=e[3],r=e[4],a=e[5],o=e[6],l=e[7],c=e[8],h=e[9],d=e[10],u=e[11],p=e[12],m=e[13],f=e[14],g=e[15],v=h*f*l-m*d*l+m*o*u-a*f*u-h*o*g+a*d*g,_=p*d*l-c*f*l-p*o*u+r*f*u+c*o*g-r*d*g,y=c*m*l-p*h*l+p*a*u-r*m*u-c*a*g+r*h*g,x=p*h*o-c*m*o-p*a*d+r*m*d+c*a*f-r*h*f,M=t*v+n*_+i*y+s*x;if(0===M)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const S=1/M;return e[0]=v*S,e[1]=(m*d*s-h*f*s-m*i*u+n*f*u+h*i*g-n*d*g)*S,e[2]=(a*f*s-m*o*s+m*i*l-n*f*l-a*i*g+n*o*g)*S,e[3]=(h*o*s-a*d*s-h*i*l+n*d*l+a*i*u-n*o*u)*S,e[4]=_*S,e[5]=(c*f*s-p*d*s+p*i*u-t*f*u-c*i*g+t*d*g)*S,e[6]=(p*o*s-r*f*s-p*i*l+t*f*l+r*i*g-t*o*g)*S,e[7]=(r*d*s-c*o*s+c*i*l-t*d*l-r*i*u+t*o*u)*S,e[8]=y*S,e[9]=(p*h*s-c*m*s-p*n*u+t*m*u+c*n*g-t*h*g)*S,e[10]=(r*m*s-p*a*s+p*n*l-t*m*l-r*n*g+t*a*g)*S,e[11]=(c*a*s-r*h*s-c*n*l+t*h*l+r*n*u-t*a*u)*S,e[12]=x*S,e[13]=(c*m*i-p*h*i+p*n*d-t*m*d-c*n*f+t*h*f)*S,e[14]=(p*a*i-r*m*i-p*n*o+t*m*o+r*n*f-t*a*f)*S,e[15]=(r*h*i-c*a*i+c*n*o-t*h*o-r*n*d+t*a*d)*S,this}scale(e){const t=this.elements,n=e.x,i=e.y,s=e.z;return t[0]*=n,t[4]*=i,t[8]*=s,t[1]*=n,t[5]*=i,t[9]*=s,t[2]*=n,t[6]*=i,t[10]*=s,t[3]*=n,t[7]*=i,t[11]*=s,this}getMaxScaleOnAxis(){const e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],i=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,n,i))}makeTranslation(e,t,n){return e.isVector3?this.set(1,0,0,e.x,0,1,0,e.y,0,0,1,e.z,0,0,0,1):this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1),this}makeRotationX(e){const t=Math.cos(e),n=Math.sin(e);return this.set(1,0,0,0,0,t,-n,0,0,n,t,0,0,0,0,1),this}makeRotationY(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,0,n,0,0,1,0,0,-n,0,t,0,0,0,0,1),this}makeRotationZ(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,0,n,t,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(e,t){const n=Math.cos(t),i=Math.sin(t),s=1-n,r=e.x,a=e.y,o=e.z,l=s*r,c=s*a;return this.set(l*r+n,l*a-i*o,l*o+i*a,0,l*a+i*o,c*a+n,c*o-i*r,0,l*o-i*a,c*o+i*r,s*o*o+n,0,0,0,0,1),this}makeScale(e,t,n){return this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1),this}makeShear(e,t,n,i,s,r){return this.set(1,n,s,0,e,1,r,0,t,i,1,0,0,0,0,1),this}compose(e,t,n){const i=this.elements,s=t._x,r=t._y,a=t._z,o=t._w,l=s+s,c=r+r,h=a+a,d=s*l,u=s*c,p=s*h,m=r*c,f=r*h,g=a*h,v=o*l,_=o*c,y=o*h,x=n.x,M=n.y,S=n.z;return i[0]=(1-(m+g))*x,i[1]=(u+y)*x,i[2]=(p-_)*x,i[3]=0,i[4]=(u-y)*M,i[5]=(1-(d+g))*M,i[6]=(f+v)*M,i[7]=0,i[8]=(p+_)*S,i[9]=(f-v)*S,i[10]=(1-(d+m))*S,i[11]=0,i[12]=e.x,i[13]=e.y,i[14]=e.z,i[15]=1,this}decompose(e,t,n){const i=this.elements;let s=Gt.set(i[0],i[1],i[2]).length();const r=Gt.set(i[4],i[5],i[6]).length(),a=Gt.set(i[8],i[9],i[10]).length();this.determinant()<0&&(s=-s),e.x=i[12],e.y=i[13],e.z=i[14],Ht.copy(this);const o=1/s,l=1/r,c=1/a;return Ht.elements[0]*=o,Ht.elements[1]*=o,Ht.elements[2]*=o,Ht.elements[4]*=l,Ht.elements[5]*=l,Ht.elements[6]*=l,Ht.elements[8]*=c,Ht.elements[9]*=c,Ht.elements[10]*=c,t.setFromRotationMatrix(Ht),n.x=s,n.y=r,n.z=a,this}makePerspective(e,t,n,i,s,r,a=2e3){const o=this.elements,l=2*s/(t-e),c=2*s/(n-i),h=(t+e)/(t-e),d=(n+i)/(n-i);let u,p;if(a===Ee)u=-(r+s)/(r-s),p=-2*r*s/(r-s);else{if(a!==we)throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+a);u=-r/(r-s),p=-r*s/(r-s)}return o[0]=l,o[4]=0,o[8]=h,o[12]=0,o[1]=0,o[5]=c,o[9]=d,o[13]=0,o[2]=0,o[6]=0,o[10]=u,o[14]=p,o[3]=0,o[7]=0,o[11]=-1,o[15]=0,this}makeOrthographic(e,t,n,i,s,r,a=2e3){const o=this.elements,l=1/(t-e),c=1/(n-i),h=1/(r-s),d=(t+e)*l,u=(n+i)*c;let p,m;if(a===Ee)p=(r+s)*h,m=-2*h;else{if(a!==we)throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+a);p=s*h,m=-1*h}return o[0]=2*l,o[4]=0,o[8]=0,o[12]=-d,o[1]=0,o[5]=2*c,o[9]=0,o[13]=-u,o[2]=0,o[6]=0,o[10]=m,o[14]=-p,o[3]=0,o[7]=0,o[11]=0,o[15]=1,this}equals(e){const t=this.elements,n=e.elements;for(let i=0;i<16;i++)if(t[i]!==n[i])return!1;return!0}fromArray(e,t=0){for(let n=0;n<16;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e[t+9]=n[9],e[t+10]=n[10],e[t+11]=n[11],e[t+12]=n[12],e[t+13]=n[13],e[t+14]=n[14],e[t+15]=n[15],e}}const Gt=new ht,Ht=new Bt,Vt=new ht(0,0,0),Wt=new ht(1,1,1),Xt=new ht,jt=new ht,qt=new ht,Yt=new Bt,Kt=new ct;class Jt{constructor(e=0,t=0,n=0,i=Jt.DEFAULT_ORDER){this.isEuler=!0,this._x=e,this._y=t,this._z=n,this._order=i}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e,this._onChangeCallback()}set(e,t,n,i=this._order){return this._x=e,this._y=t,this._z=n,this._order=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this}setFromRotationMatrix(e,t=this._order,n=!0){const i=e.elements,s=i[0],r=i[4],a=i[8],o=i[1],l=i[5],c=i[9],h=i[2],d=i[6],u=i[10];switch(t){case"XYZ":this._y=Math.asin(Pe(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-c,u),this._z=Math.atan2(-r,s)):(this._x=Math.atan2(d,l),this._z=0);break;case"YXZ":this._x=Math.asin(-Pe(c,-1,1)),Math.abs(c)<.9999999?(this._y=Math.atan2(a,u),this._z=Math.atan2(o,l)):(this._y=Math.atan2(-h,s),this._z=0);break;case"ZXY":this._x=Math.asin(Pe(d,-1,1)),Math.abs(d)<.9999999?(this._y=Math.atan2(-h,u),this._z=Math.atan2(-r,l)):(this._y=0,this._z=Math.atan2(o,s));break;case"ZYX":this._y=Math.asin(-Pe(h,-1,1)),Math.abs(h)<.9999999?(this._x=Math.atan2(d,u),this._z=Math.atan2(o,s)):(this._x=0,this._z=Math.atan2(-r,l));break;case"YZX":this._z=Math.asin(Pe(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-c,l),this._y=Math.atan2(-h,s)):(this._x=0,this._y=Math.atan2(a,u));break;case"XZY":this._z=Math.asin(-Pe(r,-1,1)),Math.abs(r)<.9999999?(this._x=Math.atan2(d,l),this._y=Math.atan2(a,s)):(this._x=Math.atan2(-c,u),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}return this._order=t,!0===n&&this._onChangeCallback(),this}setFromQuaternion(e,t,n){return Yt.makeRotationFromQuaternion(e),this.setFromRotationMatrix(Yt,t,n)}setFromVector3(e,t=this._order){return this.set(e.x,e.y,e.z,t)}reorder(e){return Kt.setFromEuler(this),this.setFromQuaternion(Kt,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){return this._x=e[0],this._y=e[1],this._z=e[2],void 0!==e[3]&&(this._order=e[3]),this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}Jt.DEFAULT_ORDER="XYZ";class Zt{constructor(){this.mask=1}set(e){this.mask=1<<e>>>0}enable(e){this.mask|=1<<e}enableAll(){this.mask=-1}toggle(e){this.mask^=1<<e}disable(e){this.mask&=~(1<<e)}disableAll(){this.mask=0}test(e){return!!(this.mask&e.mask)}isEnabled(e){return!!(this.mask&1<<e)}}let $t=0;const Qt=new ht,en=new ct,tn=new Bt,nn=new ht,sn=new ht,rn=new ht,an=new ct,on=new ht(1,0,0),ln=new ht(0,1,0),cn=new ht(0,0,1),hn={type:"added"},dn={type:"removed"},un={type:"childadded",child:null},pn={type:"childremoved",child:null};class mn extends be{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:$t++}),this.uuid=Ce(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=mn.DEFAULT_UP.clone();const e=new ht,t=new Jt,n=new ct,i=new ht(1,1,1);t._onChange((function(){n.setFromEuler(t,!1)})),n._onChange((function(){t.setFromQuaternion(n,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new Bt},normalMatrix:{value:new ze}}),this.matrix=new Bt,this.matrixWorld=new Bt,this.matrixAutoUpdate=mn.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=mn.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new Zt,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(e){return this.quaternion.premultiply(e),this}setRotationFromAxisAngle(e,t){this.quaternion.setFromAxisAngle(e,t)}setRotationFromEuler(e){this.quaternion.setFromEuler(e,!0)}setRotationFromMatrix(e){this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(e){this.quaternion.copy(e)}rotateOnAxis(e,t){return en.setFromAxisAngle(e,t),this.quaternion.multiply(en),this}rotateOnWorldAxis(e,t){return en.setFromAxisAngle(e,t),this.quaternion.premultiply(en),this}rotateX(e){return this.rotateOnAxis(on,e)}rotateY(e){return this.rotateOnAxis(ln,e)}rotateZ(e){return this.rotateOnAxis(cn,e)}translateOnAxis(e,t){return Qt.copy(e).applyQuaternion(this.quaternion),this.position.add(Qt.multiplyScalar(t)),this}translateX(e){return this.translateOnAxis(on,e)}translateY(e){return this.translateOnAxis(ln,e)}translateZ(e){return this.translateOnAxis(cn,e)}localToWorld(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(this.matrixWorld)}worldToLocal(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(tn.copy(this.matrixWorld).invert())}lookAt(e,t,n){e.isVector3?nn.copy(e):nn.set(e,t,n);const i=this.parent;this.updateWorldMatrix(!0,!1),sn.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?tn.lookAt(sn,nn,this.up):tn.lookAt(nn,sn,this.up),this.quaternion.setFromRotationMatrix(tn),i&&(tn.extractRotation(i.matrixWorld),en.setFromRotationMatrix(tn),this.quaternion.premultiply(en.invert()))}add(e){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e&&e.isObject3D?(null!==e.parent&&e.parent.remove(e),e.parent=this,this.children.push(e),e.dispatchEvent(hn),un.child=e,this.dispatchEvent(un),un.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)}remove(e){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.remove(arguments[e]);return this}const t=this.children.indexOf(e);return-1!==t&&(e.parent=null,this.children.splice(t,1),e.dispatchEvent(dn),pn.child=e,this.dispatchEvent(pn),pn.child=null),this}removeFromParent(){const e=this.parent;return null!==e&&e.remove(this),this}clear(){return this.remove(...this.children)}attach(e){return this.updateWorldMatrix(!0,!1),tn.copy(this.matrixWorld).invert(),null!==e.parent&&(e.parent.updateWorldMatrix(!0,!1),tn.multiply(e.parent.matrixWorld)),e.applyMatrix4(tn),this.add(e),e.updateWorldMatrix(!1,!0),this}getObjectById(e){return this.getObjectByProperty("id",e)}getObjectByName(e){return this.getObjectByProperty("name",e)}getObjectByProperty(e,t){if(this[e]===t)return this;for(let n=0,i=this.children.length;n<i;n++){const i=this.children[n].getObjectByProperty(e,t);if(void 0!==i)return i}}getObjectsByProperty(e,t,n=[]){this[e]===t&&n.push(this);const i=this.children;for(let s=0,r=i.length;s<r;s++)i[s].getObjectsByProperty(e,t,n);return n}getWorldPosition(e){return this.updateWorldMatrix(!0,!1),e.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(sn,e,rn),e}getWorldScale(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(sn,an,e),e}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()}raycast(){}traverse(e){e(this);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].traverse(e)}traverseVisible(e){if(!1===this.visible)return;e(this);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].traverseVisible(e)}traverseAncestors(e){const t=this.parent;null!==t&&(e(t),t.traverseAncestors(e))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0);const t=this.children;for(let n=0,i=t.length;n<i;n++){const i=t[n];!0!==i.matrixWorldAutoUpdate&&!0!==e||i.updateMatrixWorld(e)}}updateWorldMatrix(e,t){const n=this.parent;if(!0===e&&null!==n&&!0===n.matrixWorldAutoUpdate&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===t){const e=this.children;for(let t=0,n=e.length;t<n;t++){const n=e[t];!0===n.matrixWorldAutoUpdate&&n.updateWorldMatrix(!1,!0)}}}toJSON(e){const t=void 0===e||"string"==typeof e,n={};t&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const i={};function s(t,n){return void 0===t[n.uuid]&&(t[n.uuid]=n.toJSON(e)),n.uuid}if(i.uuid=this.uuid,i.type=this.type,""!==this.name&&(i.name=this.name),!0===this.castShadow&&(i.castShadow=!0),!0===this.receiveShadow&&(i.receiveShadow=!0),!1===this.visible&&(i.visible=!1),!1===this.frustumCulled&&(i.frustumCulled=!1),0!==this.renderOrder&&(i.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),i.up=this.up.toArray(),!1===this.matrixAutoUpdate&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON(),null!==this.instanceColor&&(i.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(i.type="BatchedMesh",i.perObjectFrustumCulled=this.perObjectFrustumCulled,i.sortObjects=this.sortObjects,i.drawRanges=this._drawRanges,i.reservedRanges=this._reservedRanges,i.visibility=this._visibility,i.active=this._active,i.bounds=this._bounds.map((e=>({boxInitialized:e.boxInitialized,boxMin:e.box.min.toArray(),boxMax:e.box.max.toArray(),sphereInitialized:e.sphereInitialized,sphereRadius:e.sphere.radius,sphereCenter:e.sphere.center.toArray()}))),i.maxGeometryCount=this._maxGeometryCount,i.maxVertexCount=this._maxVertexCount,i.maxIndexCount=this._maxIndexCount,i.geometryInitialized=this._geometryInitialized,i.geometryCount=this._geometryCount,i.matricesTexture=this._matricesTexture.toJSON(e),null!==this.boundingSphere&&(i.boundingSphere={center:i.boundingSphere.center.toArray(),radius:i.boundingSphere.radius}),null!==this.boundingBox&&(i.boundingBox={min:i.boundingBox.min.toArray(),max:i.boundingBox.max.toArray()})),this.isScene)this.background&&(this.background.isColor?i.background=this.background.toJSON():this.background.isTexture&&(i.background=this.background.toJSON(e).uuid)),this.environment&&this.environment.isTexture&&!0!==this.environment.isRenderTargetTexture&&(i.environment=this.environment.toJSON(e).uuid);else if(this.isMesh||this.isLine||this.isPoints){i.geometry=s(e.geometries,this.geometry);const t=this.geometry.parameters;if(void 0!==t&&void 0!==t.shapes){const n=t.shapes;if(Array.isArray(n))for(let t=0,i=n.length;t<i;t++){const i=n[t];s(e.shapes,i)}else s(e.shapes,n)}}if(this.isSkinnedMesh&&(i.bindMode=this.bindMode,i.bindMatrix=this.bindMatrix.toArray(),void 0!==this.skeleton&&(s(e.skeletons,this.skeleton),i.skeleton=this.skeleton.uuid)),void 0!==this.material)if(Array.isArray(this.material)){const t=[];for(let n=0,i=this.material.length;n<i;n++)t.push(s(e.materials,this.material[n]));i.material=t}else i.material=s(e.materials,this.material);if(this.children.length>0){i.children=[];for(let t=0;t<this.children.length;t++)i.children.push(this.children[t].toJSON(e).object)}if(this.animations.length>0){i.animations=[];for(let t=0;t<this.animations.length;t++){const n=this.animations[t];i.animations.push(s(e.animations,n))}}if(t){const t=r(e.geometries),i=r(e.materials),s=r(e.textures),a=r(e.images),o=r(e.shapes),l=r(e.skeletons),c=r(e.animations),h=r(e.nodes);t.length>0&&(n.geometries=t),i.length>0&&(n.materials=i),s.length>0&&(n.textures=s),a.length>0&&(n.images=a),o.length>0&&(n.shapes=o),l.length>0&&(n.skeletons=l),c.length>0&&(n.animations=c),h.length>0&&(n.nodes=h)}return n.object=i,n;function r(e){const t=[];for(const n in e){const i=e[n];delete i.metadata,t.push(i)}return t}}clone(e){return(new this.constructor).copy(this,e)}copy(e,t=!0){if(this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.rotation.order=e.rotation.order,this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldAutoUpdate=e.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.animations=e.animations.slice(),this.userData=JSON.parse(JSON.stringify(e.userData)),!0===t)for(let n=0;n<e.children.length;n++){const t=e.children[n];this.add(t.clone())}return this}}mn.DEFAULT_UP=new ht(0,1,0),mn.DEFAULT_MATRIX_AUTO_UPDATE=!0,mn.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const fn=new ht,gn=new ht,vn=new ht,_n=new ht,yn=new ht,xn=new ht,Mn=new ht,Sn=new ht,En=new ht,wn=new ht;class bn{constructor(e=new ht,t=new ht,n=new ht){this.a=e,this.b=t,this.c=n}static getNormal(e,t,n,i){i.subVectors(n,t),fn.subVectors(e,t),i.cross(fn);const s=i.lengthSq();return s>0?i.multiplyScalar(1/Math.sqrt(s)):i.set(0,0,0)}static getBarycoord(e,t,n,i,s){fn.subVectors(i,t),gn.subVectors(n,t),vn.subVectors(e,t);const r=fn.dot(fn),a=fn.dot(gn),o=fn.dot(vn),l=gn.dot(gn),c=gn.dot(vn),h=r*l-a*a;if(0===h)return s.set(0,0,0),null;const d=1/h,u=(l*o-a*c)*d,p=(r*c-a*o)*d;return s.set(1-u-p,p,u)}static containsPoint(e,t,n,i){return null!==this.getBarycoord(e,t,n,i,_n)&&(_n.x>=0&&_n.y>=0&&_n.x+_n.y<=1)}static getInterpolation(e,t,n,i,s,r,a,o){return null===this.getBarycoord(e,t,n,i,_n)?(o.x=0,o.y=0,"z"in o&&(o.z=0),"w"in o&&(o.w=0),null):(o.setScalar(0),o.addScaledVector(s,_n.x),o.addScaledVector(r,_n.y),o.addScaledVector(a,_n.z),o)}static isFrontFacing(e,t,n,i){return fn.subVectors(n,t),gn.subVectors(e,t),fn.cross(gn).dot(i)<0}set(e,t,n){return this.a.copy(e),this.b.copy(t),this.c.copy(n),this}setFromPointsAndIndices(e,t,n,i){return this.a.copy(e[t]),this.b.copy(e[n]),this.c.copy(e[i]),this}setFromAttributeAndIndices(e,t,n,i){return this.a.fromBufferAttribute(e,t),this.b.fromBufferAttribute(e,n),this.c.fromBufferAttribute(e,i),this}clone(){return(new this.constructor).copy(this)}copy(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this}getArea(){return fn.subVectors(this.c,this.b),gn.subVectors(this.a,this.b),.5*fn.cross(gn).length()}getMidpoint(e){return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return bn.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return bn.getBarycoord(e,this.a,this.b,this.c,t)}getInterpolation(e,t,n,i,s){return bn.getInterpolation(e,this.a,this.b,this.c,t,n,i,s)}containsPoint(e){return bn.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return bn.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,t){const n=this.a,i=this.b,s=this.c;let r,a;yn.subVectors(i,n),xn.subVectors(s,n),Sn.subVectors(e,n);const o=yn.dot(Sn),l=xn.dot(Sn);if(o<=0&&l<=0)return t.copy(n);En.subVectors(e,i);const c=yn.dot(En),h=xn.dot(En);if(c>=0&&h<=c)return t.copy(i);const d=o*h-c*l;if(d<=0&&o>=0&&c<=0)return r=o/(o-c),t.copy(n).addScaledVector(yn,r);wn.subVectors(e,s);const u=yn.dot(wn),p=xn.dot(wn);if(p>=0&&u<=p)return t.copy(s);const m=u*l-o*p;if(m<=0&&l>=0&&p<=0)return a=l/(l-p),t.copy(n).addScaledVector(xn,a);const f=c*p-u*h;if(f<=0&&h-c>=0&&u-p>=0)return Mn.subVectors(s,i),a=(h-c)/(h-c+(u-p)),t.copy(i).addScaledVector(Mn,a);const g=1/(f+m+d);return r=m*g,a=d*g,t.copy(n).addScaledVector(yn,r).addScaledVector(xn,a)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}}const Tn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},An={h:0,s:0,l:0},Rn={h:0,s:0,l:0};function Cn(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*(t-e)*n:n<.5?t:n<2/3?e+6*(t-e)*(2/3-n):e}class Pn{constructor(e,t,n){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(e,t,n)}set(e,t,n){if(void 0===t&&void 0===n){const t=e;t&&t.isColor?this.copy(t):"number"==typeof t?this.setHex(t):"string"==typeof t&&this.setStyle(t)}else this.setRGB(e,t,n);return this}setScalar(e){return this.r=e,this.g=e,this.b=e,this}setHex(e,t=se){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(255&e)/255,Ye.toWorkingColorSpace(this,t),this}setRGB(e,t,n,i=Ye.workingColorSpace){return this.r=e,this.g=t,this.b=n,Ye.toWorkingColorSpace(this,i),this}setHSL(e,t,n,i=Ye.workingColorSpace){var s;if(e=(e%(s=1)+s)%s,t=Pe(t,0,1),n=Pe(n,0,1),0===t)this.r=this.g=this.b=n;else{const i=n<=.5?n*(1+t):n+t-n*t,s=2*n-i;this.r=Cn(s,i,e+1/3),this.g=Cn(s,i,e),this.b=Cn(s,i,e-1/3)}return Ye.toWorkingColorSpace(this,i),this}setStyle(e,t=se){function n(t){void 0!==t&&parseFloat(t)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}let i;if(i=/^(\w+)\(([^\)]*)\)/.exec(e)){let s;const r=i[1],a=i[2];switch(r){case"rgb":case"rgba":if(s=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(s[4]),this.setRGB(Math.min(255,parseInt(s[1],10))/255,Math.min(255,parseInt(s[2],10))/255,Math.min(255,parseInt(s[3],10))/255,t);if(s=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(s[4]),this.setRGB(Math.min(100,parseInt(s[1],10))/100,Math.min(100,parseInt(s[2],10))/100,Math.min(100,parseInt(s[3],10))/100,t);break;case"hsl":case"hsla":if(s=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(s[4]),this.setHSL(parseFloat(s[1])/360,parseFloat(s[2])/100,parseFloat(s[3])/100,t);break;default:console.warn("THREE.Color: Unknown color model "+e)}}else if(i=/^\#([A-Fa-f\d]+)$/.exec(e)){const n=i[1],s=n.length;if(3===s)return this.setRGB(parseInt(n.charAt(0),16)/15,parseInt(n.charAt(1),16)/15,parseInt(n.charAt(2),16)/15,t);if(6===s)return this.setHex(parseInt(n,16),t);console.warn("THREE.Color: Invalid hex color "+e)}else if(e&&e.length>0)return this.setColorName(e,t);return this}setColorName(e,t=se){const n=Tn[e.toLowerCase()];return void 0!==n?this.setHex(n,t):console.warn("THREE.Color: Unknown color "+e),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this}copySRGBToLinear(e){return this.r=Ke(e.r),this.g=Ke(e.g),this.b=Ke(e.b),this}copyLinearToSRGB(e){return this.r=Je(e.r),this.g=Je(e.g),this.b=Je(e.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(e=se){return Ye.fromWorkingColorSpace(Ln.copy(this),e),65536*Math.round(Pe(255*Ln.r,0,255))+256*Math.round(Pe(255*Ln.g,0,255))+Math.round(Pe(255*Ln.b,0,255))}getHexString(e=se){return("000000"+this.getHex(e).toString(16)).slice(-6)}getHSL(e,t=Ye.workingColorSpace){Ye.fromWorkingColorSpace(Ln.copy(this),t);const n=Ln.r,i=Ln.g,s=Ln.b,r=Math.max(n,i,s),a=Math.min(n,i,s);let o,l;const c=(a+r)/2;if(a===r)o=0,l=0;else{const e=r-a;switch(l=c<=.5?e/(r+a):e/(2-r-a),r){case n:o=(i-s)/e+(i<s?6:0);break;case i:o=(s-n)/e+2;break;case s:o=(n-i)/e+4}o/=6}return e.h=o,e.s=l,e.l=c,e}getRGB(e,t=Ye.workingColorSpace){return Ye.fromWorkingColorSpace(Ln.copy(this),t),e.r=Ln.r,e.g=Ln.g,e.b=Ln.b,e}getStyle(e=se){Ye.fromWorkingColorSpace(Ln.copy(this),e);const t=Ln.r,n=Ln.g,i=Ln.b;return e!==se?`color(${e} ${t.toFixed(3)} ${n.toFixed(3)} ${i.toFixed(3)})`:`rgb(${Math.round(255*t)},${Math.round(255*n)},${Math.round(255*i)})`}offsetHSL(e,t,n){return this.getHSL(An),this.setHSL(An.h+e,An.s+t,An.l+n)}add(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this}addColors(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this}addScalar(e){return this.r+=e,this.g+=e,this.b+=e,this}sub(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this}multiply(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this}multiplyScalar(e){return this.r*=e,this.g*=e,this.b*=e,this}lerp(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this}lerpColors(e,t,n){return this.r=e.r+(t.r-e.r)*n,this.g=e.g+(t.g-e.g)*n,this.b=e.b+(t.b-e.b)*n,this}lerpHSL(e,t){this.getHSL(An),e.getHSL(Rn);const n=Le(An.h,Rn.h,t),i=Le(An.s,Rn.s,t),s=Le(An.l,Rn.l,t);return this.setHSL(n,i,s),this}setFromVector3(e){return this.r=e.x,this.g=e.y,this.b=e.z,this}applyMatrix3(e){const t=this.r,n=this.g,i=this.b,s=e.elements;return this.r=s[0]*t+s[3]*n+s[6]*i,this.g=s[1]*t+s[4]*n+s[7]*i,this.b=s[2]*t+s[5]*n+s[8]*i,this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t=0){return this.r=e[t],this.g=e[t+1],this.b=e[t+2],this}toArray(e=[],t=0){return e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e}fromBufferAttribute(e,t){return this.r=e.getX(t),this.g=e.getY(t),this.b=e.getZ(t),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const Ln=new Pn;Pn.NAMES=Tn;let Un=0;class In extends be{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:Un++}),this.uuid=Ce(),this.name="",this.type="Material",this.blending=1,this.side=0,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=204,this.blendDst=205,this.blendEquation=u,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new Pn(0,0,0),this.blendAlpha=0,this.depthFunc=3,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=519,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=ue,this.stencilZFail=ue,this.stencilZPass=ue,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(e){this._alphaTest>0!=e>0&&this.version++,this._alphaTest=e}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(e){if(void 0!==e)for(const t in e){const n=e[t];if(void 0===n){console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);continue}const i=this[t];void 0!==i?i&&i.isColor?i.set(n):i&&i.isVector3&&n&&n.isVector3?i.copy(n):this[t]=n:console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`)}}toJSON(e){const t=void 0===e||"string"==typeof e;t&&(e={textures:{},images:{}});const n={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};function i(e){const t=[];for(const n in e){const i=e[n];delete i.metadata,t.push(i)}return t}if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),void 0!==this.roughness&&(n.roughness=this.roughness),void 0!==this.metalness&&(n.metalness=this.metalness),void 0!==this.sheen&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),void 0!==this.sheenRoughness&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),void 0!==this.emissiveIntensity&&1!==this.emissiveIntensity&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),void 0!==this.specularIntensity&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),void 0!==this.shininess&&(n.shininess=this.shininess),void 0!==this.clearcoat&&(n.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(e).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),void 0!==this.iridescence&&(n.iridescence=this.iridescence),void 0!==this.iridescenceIOR&&(n.iridescenceIOR=this.iridescenceIOR),void 0!==this.iridescenceThicknessRange&&(n.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(n.iridescenceMap=this.iridescenceMap.toJSON(e).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(e).uuid),void 0!==this.anisotropy&&(n.anisotropy=this.anisotropy),void 0!==this.anisotropyRotation&&(n.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(n.anisotropyMap=this.anisotropyMap.toJSON(e).uuid),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(e).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(e).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(e).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(e).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(e).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(e).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(e).uuid,void 0!==this.combine&&(n.combine=this.combine)),void 0!==this.envMapRotation&&(n.envMapRotation=this.envMapRotation.toArray()),void 0!==this.envMapIntensity&&(n.envMapIntensity=this.envMapIntensity),void 0!==this.reflectivity&&(n.reflectivity=this.reflectivity),void 0!==this.refractionRatio&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(e).uuid),void 0!==this.transmission&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(e).uuid),void 0!==this.thickness&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(e).uuid),void 0!==this.attenuationDistance&&this.attenuationDistance!==1/0&&(n.attenuationDistance=this.attenuationDistance),void 0!==this.attenuationColor&&(n.attenuationColor=this.attenuationColor.getHex()),void 0!==this.size&&(n.size=this.size),null!==this.shadowSide&&(n.shadowSide=this.shadowSide),void 0!==this.sizeAttenuation&&(n.sizeAttenuation=this.sizeAttenuation),1!==this.blending&&(n.blending=this.blending),0!==this.side&&(n.side=this.side),!0===this.vertexColors&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),!0===this.transparent&&(n.transparent=!0),204!==this.blendSrc&&(n.blendSrc=this.blendSrc),205!==this.blendDst&&(n.blendDst=this.blendDst),this.blendEquation!==u&&(n.blendEquation=this.blendEquation),null!==this.blendSrcAlpha&&(n.blendSrcAlpha=this.blendSrcAlpha),null!==this.blendDstAlpha&&(n.blendDstAlpha=this.blendDstAlpha),null!==this.blendEquationAlpha&&(n.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(n.blendColor=this.blendColor.getHex()),0!==this.blendAlpha&&(n.blendAlpha=this.blendAlpha),3!==this.depthFunc&&(n.depthFunc=this.depthFunc),!1===this.depthTest&&(n.depthTest=this.depthTest),!1===this.depthWrite&&(n.depthWrite=this.depthWrite),!1===this.colorWrite&&(n.colorWrite=this.colorWrite),255!==this.stencilWriteMask&&(n.stencilWriteMask=this.stencilWriteMask),519!==this.stencilFunc&&(n.stencilFunc=this.stencilFunc),0!==this.stencilRef&&(n.stencilRef=this.stencilRef),255!==this.stencilFuncMask&&(n.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==ue&&(n.stencilFail=this.stencilFail),this.stencilZFail!==ue&&(n.stencilZFail=this.stencilZFail),this.stencilZPass!==ue&&(n.stencilZPass=this.stencilZPass),!0===this.stencilWrite&&(n.stencilWrite=this.stencilWrite),void 0!==this.rotation&&0!==this.rotation&&(n.rotation=this.rotation),!0===this.polygonOffset&&(n.polygonOffset=!0),0!==this.polygonOffsetFactor&&(n.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(n.polygonOffsetUnits=this.polygonOffsetUnits),void 0!==this.linewidth&&1!==this.linewidth&&(n.linewidth=this.linewidth),void 0!==this.dashSize&&(n.dashSize=this.dashSize),void 0!==this.gapSize&&(n.gapSize=this.gapSize),void 0!==this.scale&&(n.scale=this.scale),!0===this.dithering&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),!0===this.alphaHash&&(n.alphaHash=!0),!0===this.alphaToCoverage&&(n.alphaToCoverage=!0),!0===this.premultipliedAlpha&&(n.premultipliedAlpha=!0),!0===this.forceSinglePass&&(n.forceSinglePass=!0),!0===this.wireframe&&(n.wireframe=!0),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(n.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(n.wireframeLinejoin=this.wireframeLinejoin),!0===this.flatShading&&(n.flatShading=!0),!1===this.visible&&(n.visible=!1),!1===this.toneMapped&&(n.toneMapped=!1),!1===this.fog&&(n.fog=!1),Object.keys(this.userData).length>0&&(n.userData=this.userData),t){const t=i(e.textures),s=i(e.images);t.length>0&&(n.textures=t),s.length>0&&(n.images=s)}return n}clone(){return(new this.constructor).copy(this)}copy(e){this.name=e.name,this.blending=e.blending,this.side=e.side,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.blendColor.copy(e.blendColor),this.blendAlpha=e.blendAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWriteMask=e.stencilWriteMask,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilFuncMask=e.stencilFuncMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.stencilWrite=e.stencilWrite;const t=e.clippingPlanes;let n=null;if(null!==t){const e=t.length;n=new Array(e);for(let i=0;i!==e;++i)n[i]=t[i].clone()}return this.clippingPlanes=n,this.clipIntersection=e.clipIntersection,this.clipShadows=e.clipShadows,this.shadowSide=e.shadowSide,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.alphaHash=e.alphaHash,this.alphaToCoverage=e.alphaToCoverage,this.premultipliedAlpha=e.premultipliedAlpha,this.forceSinglePass=e.forceSinglePass,this.visible=e.visible,this.toneMapped=e.toneMapped,this.userData=JSON.parse(JSON.stringify(e.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){!0===e&&this.version++}}class Dn extends In{constructor(e){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new Pn(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Jt,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}}const Nn=new ht,On=new Fe;class Fn{constructor(e,t,n=!1){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=e,this.itemSize=t,this.count=void 0!==e?e.length/t:0,this.normalized=n,this.usage=35044,this._updateRange={offset:0,count:-1},this.updateRanges=[],this.gpuType=j,this.version=0}onUploadCallback(){}set needsUpdate(e){!0===e&&this.version++}get updateRange(){var e;return(e="THREE.BufferAttribute: updateRange() is deprecated and will be removed in r169. Use addUpdateRange() instead.")in Ve||(Ve[e]=!0,console.warn(e)),this._updateRange}setUsage(e){return this.usage=e,this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.usage=e.usage,this.gpuType=e.gpuType,this}copyAt(e,t,n){e*=this.itemSize,n*=t.itemSize;for(let i=0,s=this.itemSize;i<s;i++)this.array[e+i]=t.array[n+i];return this}copyArray(e){return this.array.set(e),this}applyMatrix3(e){if(2===this.itemSize)for(let t=0,n=this.count;t<n;t++)On.fromBufferAttribute(this,t),On.applyMatrix3(e),this.setXY(t,On.x,On.y);else if(3===this.itemSize)for(let t=0,n=this.count;t<n;t++)Nn.fromBufferAttribute(this,t),Nn.applyMatrix3(e),this.setXYZ(t,Nn.x,Nn.y,Nn.z);return this}applyMatrix4(e){for(let t=0,n=this.count;t<n;t++)Nn.fromBufferAttribute(this,t),Nn.applyMatrix4(e),this.setXYZ(t,Nn.x,Nn.y,Nn.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)Nn.fromBufferAttribute(this,t),Nn.applyNormalMatrix(e),this.setXYZ(t,Nn.x,Nn.y,Nn.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)Nn.fromBufferAttribute(this,t),Nn.transformDirection(e),this.setXYZ(t,Nn.x,Nn.y,Nn.z);return this}set(e,t=0){return this.array.set(e,t),this}getComponent(e,t){let n=this.array[e*this.itemSize+t];return this.normalized&&(n=De(n,this.array)),n}setComponent(e,t,n){return this.normalized&&(n=Ne(n,this.array)),this.array[e*this.itemSize+t]=n,this}getX(e){let t=this.array[e*this.itemSize];return this.normalized&&(t=De(t,this.array)),t}setX(e,t){return this.normalized&&(t=Ne(t,this.array)),this.array[e*this.itemSize]=t,this}getY(e){let t=this.array[e*this.itemSize+1];return this.normalized&&(t=De(t,this.array)),t}setY(e,t){return this.normalized&&(t=Ne(t,this.array)),this.array[e*this.itemSize+1]=t,this}getZ(e){let t=this.array[e*this.itemSize+2];return this.normalized&&(t=De(t,this.array)),t}setZ(e,t){return this.normalized&&(t=Ne(t,this.array)),this.array[e*this.itemSize+2]=t,this}getW(e){let t=this.array[e*this.itemSize+3];return this.normalized&&(t=De(t,this.array)),t}setW(e,t){return this.normalized&&(t=Ne(t,this.array)),this.array[e*this.itemSize+3]=t,this}setXY(e,t,n){return e*=this.itemSize,this.normalized&&(t=Ne(t,this.array),n=Ne(n,this.array)),this.array[e+0]=t,this.array[e+1]=n,this}setXYZ(e,t,n,i){return e*=this.itemSize,this.normalized&&(t=Ne(t,this.array),n=Ne(n,this.array),i=Ne(i,this.array)),this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=i,this}setXYZW(e,t,n,i,s){return e*=this.itemSize,this.normalized&&(t=Ne(t,this.array),n=Ne(n,this.array),i=Ne(i,this.array),s=Ne(s,this.array)),this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=i,this.array[e+3]=s,this}onUpload(e){return this.onUploadCallback=e,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const e={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return""!==this.name&&(e.name=this.name),35044!==this.usage&&(e.usage=this.usage),e}}class zn extends Fn{constructor(e,t,n){super(new Uint16Array(e),t,n)}}class kn extends Fn{constructor(e,t,n){super(new Uint32Array(e),t,n)}}class Bn extends Fn{constructor(e,t,n){super(new Float32Array(e),t,n)}}let Gn=0;const Hn=new Bt,Vn=new mn,Wn=new ht,Xn=new pt,jn=new pt,qn=new ht;class Yn extends be{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:Gn++}),this.uuid=Ce(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(e){return Array.isArray(e)?this.index=new(Be(e)?kn:zn)(e,1):this.index=e,this}getAttribute(e){return this.attributes[e]}setAttribute(e,t){return this.attributes[e]=t,this}deleteAttribute(e){return delete this.attributes[e],this}hasAttribute(e){return void 0!==this.attributes[e]}addGroup(e,t,n=0){this.groups.push({start:e,count:t,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}applyMatrix4(e){const t=this.attributes.position;void 0!==t&&(t.applyMatrix4(e),t.needsUpdate=!0);const n=this.attributes.normal;if(void 0!==n){const t=(new ze).getNormalMatrix(e);n.applyNormalMatrix(t),n.needsUpdate=!0}const i=this.attributes.tangent;return void 0!==i&&(i.transformDirection(e),i.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this}applyQuaternion(e){return Hn.makeRotationFromQuaternion(e),this.applyMatrix4(Hn),this}rotateX(e){return Hn.makeRotationX(e),this.applyMatrix4(Hn),this}rotateY(e){return Hn.makeRotationY(e),this.applyMatrix4(Hn),this}rotateZ(e){return Hn.makeRotationZ(e),this.applyMatrix4(Hn),this}translate(e,t,n){return Hn.makeTranslation(e,t,n),this.applyMatrix4(Hn),this}scale(e,t,n){return Hn.makeScale(e,t,n),this.applyMatrix4(Hn),this}lookAt(e){return Vn.lookAt(e),Vn.updateMatrix(),this.applyMatrix4(Vn.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Wn).negate(),this.translate(Wn.x,Wn.y,Wn.z),this}setFromPoints(e){const t=[];for(let n=0,i=e.length;n<i;n++){const i=e[n];t.push(i.x,i.y,i.z||0)}return this.setAttribute("position",new Bn(t,3)),this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new pt);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute)return console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),void this.boundingBox.set(new ht(-1/0,-1/0,-1/0),new ht(1/0,1/0,1/0));if(void 0!==e){if(this.boundingBox.setFromBufferAttribute(e),t)for(let n=0,i=t.length;n<i;n++){const e=t[n];Xn.setFromBufferAttribute(e),this.morphTargetsRelative?(qn.addVectors(this.boundingBox.min,Xn.min),this.boundingBox.expandByPoint(qn),qn.addVectors(this.boundingBox.max,Xn.max),this.boundingBox.expandByPoint(qn)):(this.boundingBox.expandByPoint(Xn.min),this.boundingBox.expandByPoint(Xn.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new Lt);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute)return console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),void this.boundingSphere.set(new ht,1/0);if(e){const n=this.boundingSphere.center;if(Xn.setFromBufferAttribute(e),t)for(let e=0,s=t.length;e<s;e++){const n=t[e];jn.setFromBufferAttribute(n),this.morphTargetsRelative?(qn.addVectors(Xn.min,jn.min),Xn.expandByPoint(qn),qn.addVectors(Xn.max,jn.max),Xn.expandByPoint(qn)):(Xn.expandByPoint(jn.min),Xn.expandByPoint(jn.max))}Xn.getCenter(n);let i=0;for(let t=0,s=e.count;t<s;t++)qn.fromBufferAttribute(e,t),i=Math.max(i,n.distanceToSquared(qn));if(t)for(let s=0,r=t.length;s<r;s++){const r=t[s],a=this.morphTargetsRelative;for(let t=0,s=r.count;t<s;t++)qn.fromBufferAttribute(r,t),a&&(Wn.fromBufferAttribute(e,t),qn.add(Wn)),i=Math.max(i,n.distanceToSquared(qn))}this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const e=this.index,t=this.attributes;if(null===e||void 0===t.position||void 0===t.normal||void 0===t.uv)return void console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");const n=t.position,i=t.normal,s=t.uv;!1===this.hasAttribute("tangent")&&this.setAttribute("tangent",new Fn(new Float32Array(4*n.count),4));const r=this.getAttribute("tangent"),a=[],o=[];for(let E=0;E<n.count;E++)a[E]=new ht,o[E]=new ht;const l=new ht,c=new ht,h=new ht,d=new Fe,u=new Fe,p=new Fe,m=new ht,f=new ht;function g(e,t,i){l.fromBufferAttribute(n,e),c.fromBufferAttribute(n,t),h.fromBufferAttribute(n,i),d.fromBufferAttribute(s,e),u.fromBufferAttribute(s,t),p.fromBufferAttribute(s,i),c.sub(l),h.sub(l),u.sub(d),p.sub(d);const r=1/(u.x*p.y-p.x*u.y);isFinite(r)&&(m.copy(c).multiplyScalar(p.y).addScaledVector(h,-u.y).multiplyScalar(r),f.copy(h).multiplyScalar(u.x).addScaledVector(c,-p.x).multiplyScalar(r),a[e].add(m),a[t].add(m),a[i].add(m),o[e].add(f),o[t].add(f),o[i].add(f))}let v=this.groups;0===v.length&&(v=[{start:0,count:e.count}]);for(let E=0,w=v.length;E<w;++E){const t=v[E],n=t.start;for(let i=n,s=n+t.count;i<s;i+=3)g(e.getX(i+0),e.getX(i+1),e.getX(i+2))}const _=new ht,y=new ht,x=new ht,M=new ht;function S(e){x.fromBufferAttribute(i,e),M.copy(x);const t=a[e];_.copy(t),_.sub(x.multiplyScalar(x.dot(t))).normalize(),y.crossVectors(M,t);const n=y.dot(o[e])<0?-1:1;r.setXYZW(e,_.x,_.y,_.z,n)}for(let E=0,w=v.length;E<w;++E){const t=v[E],n=t.start;for(let i=n,s=n+t.count;i<s;i+=3)S(e.getX(i+0)),S(e.getX(i+1)),S(e.getX(i+2))}}computeVertexNormals(){const e=this.index,t=this.getAttribute("position");if(void 0!==t){let n=this.getAttribute("normal");if(void 0===n)n=new Fn(new Float32Array(3*t.count),3),this.setAttribute("normal",n);else for(let e=0,t=n.count;e<t;e++)n.setXYZ(e,0,0,0);const i=new ht,s=new ht,r=new ht,a=new ht,o=new ht,l=new ht,c=new ht,h=new ht;if(e)for(let d=0,u=e.count;d<u;d+=3){const u=e.getX(d+0),p=e.getX(d+1),m=e.getX(d+2);i.fromBufferAttribute(t,u),s.fromBufferAttribute(t,p),r.fromBufferAttribute(t,m),c.subVectors(r,s),h.subVectors(i,s),c.cross(h),a.fromBufferAttribute(n,u),o.fromBufferAttribute(n,p),l.fromBufferAttribute(n,m),a.add(c),o.add(c),l.add(c),n.setXYZ(u,a.x,a.y,a.z),n.setXYZ(p,o.x,o.y,o.z),n.setXYZ(m,l.x,l.y,l.z)}else for(let e=0,d=t.count;e<d;e+=3)i.fromBufferAttribute(t,e+0),s.fromBufferAttribute(t,e+1),r.fromBufferAttribute(t,e+2),c.subVectors(r,s),h.subVectors(i,s),c.cross(h),n.setXYZ(e+0,c.x,c.y,c.z),n.setXYZ(e+1,c.x,c.y,c.z),n.setXYZ(e+2,c.x,c.y,c.z);this.normalizeNormals(),n.needsUpdate=!0}}normalizeNormals(){const e=this.attributes.normal;for(let t=0,n=e.count;t<n;t++)qn.fromBufferAttribute(e,t),qn.normalize(),e.setXYZ(t,qn.x,qn.y,qn.z)}toNonIndexed(){function e(e,t){const n=e.array,i=e.itemSize,s=e.normalized,r=new n.constructor(t.length*i);let a=0,o=0;for(let l=0,c=t.length;l<c;l++){a=e.isInterleavedBufferAttribute?t[l]*e.data.stride+e.offset:t[l]*i;for(let e=0;e<i;e++)r[o++]=n[a++]}return new Fn(r,i,s)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const t=new Yn,n=this.index.array,i=this.attributes;for(const a in i){const s=e(i[a],n);t.setAttribute(a,s)}const s=this.morphAttributes;for(const a in s){const i=[],r=s[a];for(let t=0,s=r.length;t<s;t++){const s=e(r[t],n);i.push(s)}t.morphAttributes[a]=i}t.morphTargetsRelative=this.morphTargetsRelative;const r=this.groups;for(let a=0,o=r.length;a<o;a++){const e=r[a];t.addGroup(e.start,e.count,e.materialIndex)}return t}toJSON(){const e={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,""!==this.name&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),void 0!==this.parameters){const t=this.parameters;for(const n in t)void 0!==t[n]&&(e[n]=t[n]);return e}e.data={attributes:{}};const t=this.index;null!==t&&(e.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)});const n=this.attributes;for(const o in n){const t=n[o];e.data.attributes[o]=t.toJSON(e.data)}const i={};let s=!1;for(const o in this.morphAttributes){const t=this.morphAttributes[o],n=[];for(let i=0,s=t.length;i<s;i++){const s=t[i];n.push(s.toJSON(e.data))}n.length>0&&(i[o]=n,s=!0)}s&&(e.data.morphAttributes=i,e.data.morphTargetsRelative=this.morphTargetsRelative);const r=this.groups;r.length>0&&(e.data.groups=JSON.parse(JSON.stringify(r)));const a=this.boundingSphere;return null!==a&&(e.data.boundingSphere={center:a.center.toArray(),radius:a.radius}),e}clone(){return(new this.constructor).copy(this)}copy(e){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const t={};this.name=e.name;const n=e.index;null!==n&&this.setIndex(n.clone(t));const i=e.attributes;for(const l in i){const e=i[l];this.setAttribute(l,e.clone(t))}const s=e.morphAttributes;for(const l in s){const e=[],n=s[l];for(let i=0,s=n.length;i<s;i++)e.push(n[i].clone(t));this.morphAttributes[l]=e}this.morphTargetsRelative=e.morphTargetsRelative;const r=e.groups;for(let l=0,c=r.length;l<c;l++){const e=r[l];this.addGroup(e.start,e.count,e.materialIndex)}const a=e.boundingBox;null!==a&&(this.boundingBox=a.clone());const o=e.boundingSphere;return null!==o&&(this.boundingSphere=o.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this.userData=e.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const Kn=new Bt,Jn=new kt,Zn=new Lt,$n=new ht,Qn=new ht,ei=new ht,ti=new ht,ni=new ht,ii=new ht,si=new Fe,ri=new Fe,ai=new Fe,oi=new ht,li=new ht,ci=new ht,hi=new ht,di=new ht;class ui extends mn{constructor(e=new Yn,t=new Dn){super(),this.isMesh=!0,this.type="Mesh",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),void 0!==e.morphTargetInfluences&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),void 0!==e.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}updateMorphTargets(){const e=this.geometry.morphAttributes,t=Object.keys(e);if(t.length>0){const n=e[t[0]];if(void 0!==n){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,t=n.length;e<t;e++){const t=n[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[t]=e}}}}getVertexPosition(e,t){const n=this.geometry,i=n.attributes.position,s=n.morphAttributes.position,r=n.morphTargetsRelative;t.fromBufferAttribute(i,e);const a=this.morphTargetInfluences;if(s&&a){ii.set(0,0,0);for(let n=0,i=s.length;n<i;n++){const i=a[n],o=s[n];0!==i&&(ni.fromBufferAttribute(o,e),r?ii.addScaledVector(ni,i):ii.addScaledVector(ni.sub(t),i))}t.add(ii)}return t}raycast(e,t){const n=this.geometry,i=this.material,s=this.matrixWorld;if(void 0!==i){if(null===n.boundingSphere&&n.computeBoundingSphere(),Zn.copy(n.boundingSphere),Zn.applyMatrix4(s),Jn.copy(e.ray).recast(e.near),!1===Zn.containsPoint(Jn.origin)){if(null===Jn.intersectSphere(Zn,$n))return;if(Jn.origin.distanceToSquared($n)>(e.far-e.near)**2)return}Kn.copy(s).invert(),Jn.copy(e.ray).applyMatrix4(Kn),null!==n.boundingBox&&!1===Jn.intersectsBox(n.boundingBox)||this._computeIntersections(e,t,Jn)}}_computeIntersections(e,t,n){let i;const s=this.geometry,r=this.material,a=s.index,o=s.attributes.position,l=s.attributes.uv,c=s.attributes.uv1,h=s.attributes.normal,d=s.groups,u=s.drawRange;if(null!==a)if(Array.isArray(r))for(let p=0,m=d.length;p<m;p++){const s=d[p],o=r[s.materialIndex];for(let r=Math.max(s.start,u.start),d=Math.min(a.count,Math.min(s.start+s.count,u.start+u.count));r<d;r+=3){i=pi(this,o,e,n,l,c,h,a.getX(r),a.getX(r+1),a.getX(r+2)),i&&(i.faceIndex=Math.floor(r/3),i.face.materialIndex=s.materialIndex,t.push(i))}}else{for(let s=Math.max(0,u.start),o=Math.min(a.count,u.start+u.count);s<o;s+=3){i=pi(this,r,e,n,l,c,h,a.getX(s),a.getX(s+1),a.getX(s+2)),i&&(i.faceIndex=Math.floor(s/3),t.push(i))}}else if(void 0!==o)if(Array.isArray(r))for(let p=0,m=d.length;p<m;p++){const s=d[p],a=r[s.materialIndex];for(let r=Math.max(s.start,u.start),d=Math.min(o.count,Math.min(s.start+s.count,u.start+u.count));r<d;r+=3){i=pi(this,a,e,n,l,c,h,r,r+1,r+2),i&&(i.faceIndex=Math.floor(r/3),i.face.materialIndex=s.materialIndex,t.push(i))}}else{for(let s=Math.max(0,u.start),a=Math.min(o.count,u.start+u.count);s<a;s+=3){i=pi(this,r,e,n,l,c,h,s,s+1,s+2),i&&(i.faceIndex=Math.floor(s/3),t.push(i))}}}}function pi(e,t,n,i,s,r,a,o,l,c){e.getVertexPosition(o,Qn),e.getVertexPosition(l,ei),e.getVertexPosition(c,ti);const h=function(e,t,n,i,s,r,a,o){let l;if(l=1===t.side?i.intersectTriangle(a,r,s,!0,o):i.intersectTriangle(s,r,a,0===t.side,o),null===l)return null;di.copy(o),di.applyMatrix4(e.matrixWorld);const c=n.ray.origin.distanceTo(di);return c<n.near||c>n.far?null:{distance:c,point:di.clone(),object:e}}(e,t,n,i,Qn,ei,ti,hi);if(h){s&&(si.fromBufferAttribute(s,o),ri.fromBufferAttribute(s,l),ai.fromBufferAttribute(s,c),h.uv=bn.getInterpolation(hi,Qn,ei,ti,si,ri,ai,new Fe)),r&&(si.fromBufferAttribute(r,o),ri.fromBufferAttribute(r,l),ai.fromBufferAttribute(r,c),h.uv1=bn.getInterpolation(hi,Qn,ei,ti,si,ri,ai,new Fe)),a&&(oi.fromBufferAttribute(a,o),li.fromBufferAttribute(a,l),ci.fromBufferAttribute(a,c),h.normal=bn.getInterpolation(hi,Qn,ei,ti,oi,li,ci,new ht),h.normal.dot(i.direction)>0&&h.normal.multiplyScalar(-1));const e={a:o,b:l,c:c,normal:new ht,materialIndex:0};bn.getNormal(Qn,ei,ti,e.normal),h.face=e}return h}class mi extends Yn{constructor(e=1,t=1,n=1,i=1,s=1,r=1){super(),this.type="BoxGeometry",this.parameters={width:e,height:t,depth:n,widthSegments:i,heightSegments:s,depthSegments:r};const a=this;i=Math.floor(i),s=Math.floor(s),r=Math.floor(r);const o=[],l=[],c=[],h=[];let d=0,u=0;function p(e,t,n,i,s,r,p,m,f,g,v){const _=r/f,y=p/g,x=r/2,M=p/2,S=m/2,E=f+1,w=g+1;let b=0,T=0;const A=new ht;for(let a=0;a<w;a++){const r=a*y-M;for(let o=0;o<E;o++){const d=o*_-x;A[e]=d*i,A[t]=r*s,A[n]=S,l.push(A.x,A.y,A.z),A[e]=0,A[t]=0,A[n]=m>0?1:-1,c.push(A.x,A.y,A.z),h.push(o/f),h.push(1-a/g),b+=1}}for(let a=0;a<g;a++)for(let e=0;e<f;e++){const t=d+e+E*a,n=d+e+E*(a+1),i=d+(e+1)+E*(a+1),s=d+(e+1)+E*a;o.push(t,n,s),o.push(n,i,s),T+=6}a.addGroup(u,T,v),u+=T,d+=b}p("z","y","x",-1,-1,n,t,e,r,s,0),p("z","y","x",1,-1,n,t,-e,r,s,1),p("x","z","y",1,1,e,n,t,i,r,2),p("x","z","y",1,-1,e,n,-t,i,r,3),p("x","y","z",1,-1,e,t,n,i,s,4),p("x","y","z",-1,-1,e,t,-n,i,s,5),this.setIndex(o),this.setAttribute("position",new Bn(l,3)),this.setAttribute("normal",new Bn(c,3)),this.setAttribute("uv",new Bn(h,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new mi(e.width,e.height,e.depth,e.widthSegments,e.heightSegments,e.depthSegments)}}function fi(e){const t={};for(const n in e){t[n]={};for(const i in e[n]){const s=e[n][i];s&&(s.isColor||s.isMatrix3||s.isMatrix4||s.isVector2||s.isVector3||s.isVector4||s.isTexture||s.isQuaternion)?s.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),t[n][i]=null):t[n][i]=s.clone():Array.isArray(s)?t[n][i]=s.slice():t[n][i]=s}}return t}function gi(e){const t={};for(let n=0;n<e.length;n++){const i=fi(e[n]);for(const e in i)t[e]=i[e]}return t}function vi(e){return null===e.getRenderTarget()?e.outputColorSpace:Ye.workingColorSpace}const _i={clone:fi,merge:gi};class yi extends In{constructor(e){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1,clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,void 0!==e&&this.setValues(e)}copy(e){return super.copy(e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=fi(e.uniforms),this.uniformsGroups=function(e){const t=[];for(let n=0;n<e.length;n++)t.push(e[n].clone());return t}(e.uniformsGroups),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.fog=e.fog,this.lights=e.lights,this.clipping=e.clipping,this.extensions=Object.assign({},e.extensions),this.glslVersion=e.glslVersion,this}toJSON(e){const t=super.toJSON(e);t.glslVersion=this.glslVersion,t.uniforms={};for(const i in this.uniforms){const n=this.uniforms[i].value;n&&n.isTexture?t.uniforms[i]={type:"t",value:n.toJSON(e).uuid}:n&&n.isColor?t.uniforms[i]={type:"c",value:n.getHex()}:n&&n.isVector2?t.uniforms[i]={type:"v2",value:n.toArray()}:n&&n.isVector3?t.uniforms[i]={type:"v3",value:n.toArray()}:n&&n.isVector4?t.uniforms[i]={type:"v4",value:n.toArray()}:n&&n.isMatrix3?t.uniforms[i]={type:"m3",value:n.toArray()}:n&&n.isMatrix4?t.uniforms[i]={type:"m4",value:n.toArray()}:t.uniforms[i]={value:n}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader,t.lights=this.lights,t.clipping=this.clipping;const n={};for(const i in this.extensions)!0===this.extensions[i]&&(n[i]=!0);return Object.keys(n).length>0&&(t.extensions=n),t}}class xi extends mn{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new Bt,this.projectionMatrix=new Bt,this.projectionMatrixInverse=new Bt,this.coordinateSystem=Ee}copy(e,t){return super.copy(e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this.coordinateSystem=e.coordinateSystem,this}getWorldDirection(e){return super.getWorldDirection(e).negate()}updateMatrixWorld(e){super.updateMatrixWorld(e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,t){super.updateWorldMatrix(e,t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return(new this.constructor).copy(this)}}const Mi=new ht,Si=new Fe,Ei=new Fe;class wi extends xi{constructor(e=50,t=1,n=.1,i=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=e,this.zoom=1,this.near=n,this.far=i,this.focus=10,this.aspect=t,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=null===e.view?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this}setFocalLength(e){const t=.5*this.getFilmHeight()/e;this.fov=2*Re*Math.atan(t),this.updateProjectionMatrix()}getFocalLength(){const e=Math.tan(.5*Ae*this.fov);return.5*this.getFilmHeight()/e}getEffectiveFOV(){return 2*Re*Math.atan(Math.tan(.5*Ae*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(e,t,n){Mi.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),t.set(Mi.x,Mi.y).multiplyScalar(-e/Mi.z),Mi.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),n.set(Mi.x,Mi.y).multiplyScalar(-e/Mi.z)}getViewSize(e,t){return this.getViewBounds(e,Si,Ei),t.subVectors(Ei,Si)}setViewOffset(e,t,n,i,s,r){this.aspect=e/t,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=i,this.view.width=s,this.view.height=r,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=this.near;let t=e*Math.tan(.5*Ae*this.fov)/this.zoom,n=2*t,i=this.aspect*n,s=-.5*i;const r=this.view;if(null!==this.view&&this.view.enabled){const e=r.fullWidth,a=r.fullHeight;s+=r.offsetX*i/e,t-=r.offsetY*n/a,i*=r.width/e,n*=r.height/a}const a=this.filmOffset;0!==a&&(s+=e*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(s,s+i,t,t-n,e,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,null!==this.view&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}}const bi=-90;class Ti extends mn{constructor(e,t,n){super(),this.type="CubeCamera",this.renderTarget=n,this.coordinateSystem=null,this.activeMipmapLevel=0;const i=new wi(bi,1,e,t);i.layers=this.layers,this.add(i);const s=new wi(bi,1,e,t);s.layers=this.layers,this.add(s);const r=new wi(bi,1,e,t);r.layers=this.layers,this.add(r);const a=new wi(bi,1,e,t);a.layers=this.layers,this.add(a);const o=new wi(bi,1,e,t);o.layers=this.layers,this.add(o);const l=new wi(bi,1,e,t);l.layers=this.layers,this.add(l)}updateCoordinateSystem(){const e=this.coordinateSystem,t=this.children.concat(),[n,i,s,r,a,o]=t;for(const l of t)this.remove(l);if(e===Ee)n.up.set(0,1,0),n.lookAt(1,0,0),i.up.set(0,1,0),i.lookAt(-1,0,0),s.up.set(0,0,-1),s.lookAt(0,1,0),r.up.set(0,0,1),r.lookAt(0,-1,0),a.up.set(0,1,0),a.lookAt(0,0,1),o.up.set(0,1,0),o.lookAt(0,0,-1);else{if(e!==we)throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+e);n.up.set(0,-1,0),n.lookAt(-1,0,0),i.up.set(0,-1,0),i.lookAt(1,0,0),s.up.set(0,0,1),s.lookAt(0,1,0),r.up.set(0,0,-1),r.lookAt(0,-1,0),a.up.set(0,-1,0),a.lookAt(0,0,1),o.up.set(0,-1,0),o.lookAt(0,0,-1)}for(const l of t)this.add(l),l.updateMatrixWorld()}update(e,t){null===this.parent&&this.updateMatrixWorld();const{renderTarget:n,activeMipmapLevel:i}=this;this.coordinateSystem!==e.coordinateSystem&&(this.coordinateSystem=e.coordinateSystem,this.updateCoordinateSystem());const[s,r,a,o,l,c]=this.children,h=e.getRenderTarget(),d=e.getActiveCubeFace(),u=e.getActiveMipmapLevel(),p=e.xr.enabled;e.xr.enabled=!1;const m=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,e.setRenderTarget(n,0,i),e.render(t,s),e.setRenderTarget(n,1,i),e.render(t,r),e.setRenderTarget(n,2,i),e.render(t,a),e.setRenderTarget(n,3,i),e.render(t,o),e.setRenderTarget(n,4,i),e.render(t,l),n.texture.generateMipmaps=m,e.setRenderTarget(n,5,i),e.render(t,c),e.setRenderTarget(h,d,u),e.xr.enabled=p,n.texture.needsPMREMUpdate=!0}}class Ai extends it{constructor(e,t,n,i,s,r,a,o,l,c){super(e=void 0!==e?e:[],t=void 0!==t?t:P,n,i,s,r,a,o,l,c),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(e){this.image=e}}class Ri extends at{constructor(e=1,t={}){super(e,e,t),this.isWebGLCubeRenderTarget=!0;const n={width:e,height:e,depth:1},i=[n,n,n,n,n,n];this.texture=new Ai(i,t.mapping,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=void 0!==t.generateMipmaps&&t.generateMipmaps,this.texture.minFilter=void 0!==t.minFilter?t.minFilter:k}fromEquirectangularTexture(e,t){this.texture.type=t.type,this.texture.colorSpace=t.colorSpace,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:"\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",fragmentShader:"\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t"},i=new mi(5,5,5),s=new yi({name:"CubemapFromEquirect",uniforms:fi(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:1,blending:0});s.uniforms.tEquirect.value=t;const r=new ui(i,s),a=t.minFilter;t.minFilter===G&&(t.minFilter=k);return new Ti(1,10,this).update(e,r),t.minFilter=a,r.geometry.dispose(),r.material.dispose(),this}clear(e,t,n,i){const s=e.getRenderTarget();for(let r=0;r<6;r++)e.setRenderTarget(this,r),e.clear(t,n,i);e.setRenderTarget(s)}}const Ci=new ht,Pi=new ht,Li=new ze;class Ui{constructor(e=new ht(1,0,0),t=0){this.isPlane=!0,this.normal=e,this.constant=t}set(e,t){return this.normal.copy(e),this.constant=t,this}setComponents(e,t,n,i){return this.normal.set(e,t,n),this.constant=i,this}setFromNormalAndCoplanarPoint(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this}setFromCoplanarPoints(e,t,n){const i=Ci.subVectors(n,t).cross(Pi.subVectors(e,t)).normalize();return this.setFromNormalAndCoplanarPoint(i,e),this}copy(e){return this.normal.copy(e.normal),this.constant=e.constant,this}normalize(){const e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){return t.copy(e).addScaledVector(this.normal,-this.distanceToPoint(e))}intersectLine(e,t){const n=e.delta(Ci),i=this.normal.dot(n);if(0===i)return 0===this.distanceToPoint(e.start)?t.copy(e.start):null;const s=-(e.start.dot(this.normal)+this.constant)/i;return s<0||s>1?null:t.copy(e.start).addScaledVector(n,s)}intersectsLine(e){const t=this.distanceToPoint(e.start),n=this.distanceToPoint(e.end);return t<0&&n>0||n<0&&t>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){const n=t||Li.getNormalMatrix(e),i=this.coplanarPoint(Ci).applyMatrix4(e),s=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(s),this}translate(e){return this.constant-=e.dot(this.normal),this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return(new this.constructor).copy(this)}}const Ii=new Lt,Di=new ht;class Ni{constructor(e=new Ui,t=new Ui,n=new Ui,i=new Ui,s=new Ui,r=new Ui){this.planes=[e,t,n,i,s,r]}set(e,t,n,i,s,r){const a=this.planes;return a[0].copy(e),a[1].copy(t),a[2].copy(n),a[3].copy(i),a[4].copy(s),a[5].copy(r),this}copy(e){const t=this.planes;for(let n=0;n<6;n++)t[n].copy(e.planes[n]);return this}setFromProjectionMatrix(e,t=2e3){const n=this.planes,i=e.elements,s=i[0],r=i[1],a=i[2],o=i[3],l=i[4],c=i[5],h=i[6],d=i[7],u=i[8],p=i[9],m=i[10],f=i[11],g=i[12],v=i[13],_=i[14],y=i[15];if(n[0].setComponents(o-s,d-l,f-u,y-g).normalize(),n[1].setComponents(o+s,d+l,f+u,y+g).normalize(),n[2].setComponents(o+r,d+c,f+p,y+v).normalize(),n[3].setComponents(o-r,d-c,f-p,y-v).normalize(),n[4].setComponents(o-a,d-h,f-m,y-_).normalize(),t===Ee)n[5].setComponents(o+a,d+h,f+m,y+_).normalize();else{if(t!==we)throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+t);n[5].setComponents(a,h,m,_).normalize()}return this}intersectsObject(e){if(void 0!==e.boundingSphere)null===e.boundingSphere&&e.computeBoundingSphere(),Ii.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);else{const t=e.geometry;null===t.boundingSphere&&t.computeBoundingSphere(),Ii.copy(t.boundingSphere).applyMatrix4(e.matrixWorld)}return this.intersectsSphere(Ii)}intersectsSprite(e){return Ii.center.set(0,0,0),Ii.radius=.7071067811865476,Ii.applyMatrix4(e.matrixWorld),this.intersectsSphere(Ii)}intersectsSphere(e){const t=this.planes,n=e.center,i=-e.radius;for(let s=0;s<6;s++){if(t[s].distanceToPoint(n)<i)return!1}return!0}intersectsBox(e){const t=this.planes;for(let n=0;n<6;n++){const i=t[n];if(Di.x=i.normal.x>0?e.max.x:e.min.x,Di.y=i.normal.y>0?e.max.y:e.min.y,Di.z=i.normal.z>0?e.max.z:e.min.z,i.distanceToPoint(Di)<0)return!1}return!0}containsPoint(e){const t=this.planes;for(let n=0;n<6;n++)if(t[n].distanceToPoint(e)<0)return!1;return!0}clone(){return(new this.constructor).copy(this)}}function Oi(){let e=null,t=!1,n=null,i=null;function s(t,r){n(t,r),i=e.requestAnimationFrame(s)}return{start:function(){!0!==t&&null!==n&&(i=e.requestAnimationFrame(s),t=!0)},stop:function(){e.cancelAnimationFrame(i),t=!1},setAnimationLoop:function(e){n=e},setContext:function(t){e=t}}}function Fi(e,t){const n=t.isWebGL2,i=new WeakMap;return{get:function(e){return e.isInterleavedBufferAttribute&&(e=e.data),i.get(e)},remove:function(t){t.isInterleavedBufferAttribute&&(t=t.data);const n=i.get(t);n&&(e.deleteBuffer(n.buffer),i.delete(t))},update:function(t,s){if(t.isGLBufferAttribute){const e=i.get(t);return void((!e||e.version<t.version)&&i.set(t,{buffer:t.buffer,type:t.type,bytesPerElement:t.elementSize,version:t.version}))}t.isInterleavedBufferAttribute&&(t=t.data);const r=i.get(t);if(void 0===r)i.set(t,function(t,i){const s=t.array,r=t.usage,a=s.byteLength,o=e.createBuffer();let l;if(e.bindBuffer(i,o),e.bufferData(i,s,r),t.onUploadCallback(),s instanceof Float32Array)l=e.FLOAT;else if(s instanceof Uint16Array)if(t.isFloat16BufferAttribute){if(!n)throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");l=e.HALF_FLOAT}else l=e.UNSIGNED_SHORT;else if(s instanceof Int16Array)l=e.SHORT;else if(s instanceof Uint32Array)l=e.UNSIGNED_INT;else if(s instanceof Int32Array)l=e.INT;else if(s instanceof Int8Array)l=e.BYTE;else if(s instanceof Uint8Array)l=e.UNSIGNED_BYTE;else{if(!(s instanceof Uint8ClampedArray))throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+s);l=e.UNSIGNED_BYTE}return{buffer:o,type:l,bytesPerElement:s.BYTES_PER_ELEMENT,version:t.version,size:a}}(t,s));else if(r.version<t.version){if(r.size!==t.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");!function(t,i,s){const r=i.array,a=i._updateRange,o=i.updateRanges;if(e.bindBuffer(s,t),-1===a.count&&0===o.length&&e.bufferSubData(s,0,r),0!==o.length){for(let t=0,i=o.length;t<i;t++){const i=o[t];n?e.bufferSubData(s,i.start*r.BYTES_PER_ELEMENT,r,i.start,i.count):e.bufferSubData(s,i.start*r.BYTES_PER_ELEMENT,r.subarray(i.start,i.start+i.count))}i.clearUpdateRanges()}-1!==a.count&&(n?e.bufferSubData(s,a.offset*r.BYTES_PER_ELEMENT,r,a.offset,a.count):e.bufferSubData(s,a.offset*r.BYTES_PER_ELEMENT,r.subarray(a.offset,a.offset+a.count)),a.count=-1),i.onUploadCallback()}(r.buffer,t,s),r.version=t.version}}}}class zi extends Yn{constructor(e=1,t=1,n=1,i=1){super(),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:n,heightSegments:i};const s=e/2,r=t/2,a=Math.floor(n),o=Math.floor(i),l=a+1,c=o+1,h=e/a,d=t/o,u=[],p=[],m=[],f=[];for(let g=0;g<c;g++){const e=g*d-r;for(let t=0;t<l;t++){const n=t*h-s;p.push(n,-e,0),m.push(0,0,1),f.push(t/a),f.push(1-g/o)}}for(let g=0;g<o;g++)for(let e=0;e<a;e++){const t=e+l*g,n=e+l*(g+1),i=e+1+l*(g+1),s=e+1+l*g;u.push(t,n,s),u.push(n,i,s)}this.setIndex(u),this.setAttribute("position",new Bn(p,3)),this.setAttribute("normal",new Bn(m,3)),this.setAttribute("uv",new Bn(f,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new zi(e.width,e.height,e.widthSegments,e.heightSegments)}}const ki={alphahash_fragment:"#ifdef USE_ALPHAHASH\n\tif ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif",alphahash_pars_fragment:"#ifdef USE_ALPHAHASH\n\tconst float ALPHA_HASH_SCALE = 0.05;\n\tfloat hash2D( vec2 value ) {\n\t\treturn fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n\t}\n\tfloat hash3D( vec3 value ) {\n\t\treturn hash2D( vec2( hash2D( value.xy ), value.z ) );\n\t}\n\tfloat getAlphaHashThreshold( vec3 position ) {\n\t\tfloat maxDeriv = max(\n\t\t\tlength( dFdx( position.xyz ) ),\n\t\t\tlength( dFdy( position.xyz ) )\n\t\t);\n\t\tfloat pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n\t\tvec2 pixScales = vec2(\n\t\t\texp2( floor( log2( pixScale ) ) ),\n\t\t\texp2( ceil( log2( pixScale ) ) )\n\t\t);\n\t\tvec2 alpha = vec2(\n\t\t\thash3D( floor( pixScales.x * position.xyz ) ),\n\t\t\thash3D( floor( pixScales.y * position.xyz ) )\n\t\t);\n\t\tfloat lerpFactor = fract( log2( pixScale ) );\n\t\tfloat x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n\t\tfloat a = min( lerpFactor, 1.0 - lerpFactor );\n\t\tvec3 cases = vec3(\n\t\t\tx * x / ( 2.0 * a * ( 1.0 - a ) ),\n\t\t\t( x - 0.5 * a ) / ( 1.0 - a ),\n\t\t\t1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n\t\t);\n\t\tfloat threshold = ( x < ( 1.0 - a ) )\n\t\t\t? ( ( x < a ) ? cases.x : cases.y )\n\t\t\t: cases.z;\n\t\treturn clamp( threshold , 1.0e-6, 1.0 );\n\t}\n#endif",alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef USE_ALPHATEST\n\t#ifdef ALPHA_TO_COVERAGE\n\tdiffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );\n\tif ( diffuseColor.a == 0.0 ) discard;\n\t#else\n\tif ( diffuseColor.a < alphaTest ) discard;\n\t#endif\n#endif",alphatest_pars_fragment:"#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_CLEARCOAT ) \n\t\tclearcoatSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_SHEEN ) \n\t\tsheenSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",batching_pars_vertex:"#ifdef USE_BATCHING\n\tattribute float batchId;\n\tuniform highp sampler2D batchingTexture;\n\tmat4 getBatchingMatrix( const in float i ) {\n\t\tint size = textureSize( batchingTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n#endif",batching_vertex:"#ifdef USE_BATCHING\n\tmat4 batchingMatrix = getBatchingMatrix( batchId );\n#endif",begin_vertex:"vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n\tvPosition = vec3( position );\n#endif",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"float G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n} // validated",iridescence_fragment:"#ifdef USE_IRIDESCENCE\n\tconst mat3 XYZ_TO_REC709 = mat3(\n\t\t 3.2404542, -0.9692660,  0.0556434,\n\t\t-1.5371385,  1.8760108, -0.2040259,\n\t\t-0.4985314,  0.0415560,  1.0572252\n\t);\n\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n\t\tvec3 sqrtF0 = sqrt( fresnel0 );\n\t\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n\t}\n\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n\t}\n\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n\t}\n\tvec3 evalSensitivity( float OPD, vec3 shift ) {\n\t\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\n\t\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\t\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\t\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\t\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n\t\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n\t\txyz /= 1.0685e-7;\n\t\tvec3 rgb = XYZ_TO_REC709 * xyz;\n\t\treturn rgb;\n\t}\n\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n\t\tvec3 I;\n\t\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\t\tif ( cosTheta2Sq < 0.0 ) {\n\t\t\treturn vec3( 1.0 );\n\t\t}\n\t\tfloat cosTheta2 = sqrt( cosTheta2Sq );\n\t\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\t\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\n\t\tfloat T121 = 1.0 - R12;\n\t\tfloat phi12 = 0.0;\n\t\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\n\t\tfloat phi21 = PI - phi12;\n\t\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\t\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n\t\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n\t\tvec3 phi23 = vec3( 0.0 );\n\t\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n\t\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n\t\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n\t\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n\t\tvec3 phi = vec3( phi21 ) + phi23;\n\t\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n\t\tvec3 r123 = sqrt( R123 );\n\t\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n\t\tvec3 C0 = R12 + Rs;\n\t\tI = C0;\n\t\tvec3 Cm = Rs - T121;\n\t\tfor ( int m = 1; m <= 2; ++ m ) {\n\t\t\tCm *= r123;\n\t\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n\t\t\tI += Cm * Sm;\n\t\t}\n\t\treturn max( I, vec3( 0.0 ) );\n\t}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vBumpMapUv );\n\t\tvec2 dSTdy = dFdy( vBumpMapUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\n\t\tvec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#ifdef ALPHA_TO_COVERAGE\n\t\tfloat distanceToPlane, distanceGradient;\n\t\tfloat clipOpacity = 1.0;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n\t\t\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\n\t\t\tclipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n\t\t\tif ( clipOpacity == 0.0 ) discard;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\t\tfloat unionClipOpacity = 1.0;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\t\tplane = clippingPlanes[ i ];\n\t\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n\t\t\t\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\n\t\t\t\tunionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t\tclipOpacity *= 1.0 - unionClipOpacity;\n\t\t#endif\n\t\tdiffuseColor.a *= clipOpacity;\n\t\tif ( diffuseColor.a == 0.0 ) discard;\n\t#else\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\t\tbool clipped = true;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\t\tplane = clippingPlanes[ i ];\n\t\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t\tif ( clipped ) discard;\n\t\t#endif\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",color_fragment:"#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif",color_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif",common:"#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\n#ifdef USE_ALPHAHASH\n\tvarying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat luminance( const in vec3 rgb ) {\n\tconst vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\n\treturn dot( weights, rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\thighp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define cubeUV_r0 1.0\n\t#define cubeUV_m0 - 2.0\n\t#define cubeUV_r1 0.8\n\t#define cubeUV_m1 - 1.0\n\t#define cubeUV_r4 0.4\n\t#define cubeUV_m4 2.0\n\t#define cubeUV_r5 0.305\n\t#define cubeUV_m5 3.0\n\t#define cubeUV_r6 0.21\n\t#define cubeUV_m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= cubeUV_r1 ) {\n\t\t\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n\t\t} else if ( roughness >= cubeUV_r4 ) {\n\t\t\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n\t\t} else if ( roughness >= cubeUV_r5 ) {\n\t\t\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n\t\t} else if ( roughness >= cubeUV_r6 ) {\n\t\t\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = objectTangent;\n#endif\n#ifdef USE_BATCHING\n\tmat3 bm = mat3( batchingMatrix );\n\ttransformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );\n\ttransformedNormal = bm * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = bm * transformedTangent;\n\t#endif\n#endif\n#ifdef USE_INSTANCING\n\tmat3 im = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\n\ttransformedNormal = im * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = im * transformedTangent;\n\t#endif\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\ttransformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",colorspace_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",colorspace_pars_fragment:"\nconst mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(\n\tvec3( 0.8224621, 0.177538, 0.0 ),\n\tvec3( 0.0331941, 0.9668058, 0.0 ),\n\tvec3( 0.0170827, 0.0723974, 0.9105199 )\n);\nconst mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(\n\tvec3( 1.2249401, - 0.2249404, 0.0 ),\n\tvec3( - 0.0420569, 1.0420571, 0.0 ),\n\tvec3( - 0.0196376, - 0.0786361, 1.0982735 )\n);\nvec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {\n\treturn vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );\n}\nvec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {\n\treturn vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );\n}\nvec4 LinearTransferOETF( in vec4 value ) {\n\treturn value;\n}\nvec4 sRGBTransferOETF( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn sRGBTransferOETF( value );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform mat3 envMapRotation;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#ifdef USE_ENVMAP\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\t#ifdef USE_ANISOTROPY\n\t\tvec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n\t\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\t\tvec3 bentNormal = cross( bitangent, viewDir );\n\t\t\t\tbentNormal = normalize( cross( bentNormal, bitangent ) );\n\t\t\t\tbentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n\t\t\t\treturn getIBLRadiance( viewDir, bentNormal, roughness );\n\t\t\t#else\n\t\t\t\treturn vec3( 0.0 );\n\t\t\t#endif\n\t\t}\n\t#endif\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\tvec2 fw = fwidth( coord ) * 0.5;\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n\t#endif\n}",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_fragment:"LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;",lights_lambert_pars_fragment:"varying vec3 vViewPosition;\nstruct LambertMaterial {\n\tvec3 diffuseColor;\n\tfloat specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Lambert\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Lambert",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\n#if defined( USE_LIGHT_PROBES )\n\tuniform vec3 lightProbe[ 9 ];\n#endif\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( LEGACY_LIGHTS )\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#else\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif",lights_toon_fragment:"ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",lights_toon_pars_fragment:"varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\tmaterial.ior = ior;\n\t#ifdef USE_SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULAR_COLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n\t\t#endif\n\t\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_IRIDESCENCE\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\t#ifdef USE_IRIDESCENCEMAP\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n\t#endif\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n\t#else\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\t#endif\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\t#ifdef USE_ANISOTROPYMAP\n\t\tmat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n\t\tvec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n\t\tvec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n\t#else\n\t\tvec2 anisotropyV = anisotropyVector;\n\t#endif\n\tmaterial.anisotropy = length( anisotropyV );\n\tif( material.anisotropy == 0.0 ) {\n\t\tanisotropyV = vec2( 1.0, 0.0 );\n\t} else {\n\t\tanisotropyV /= material.anisotropy;\n\t\tmaterial.anisotropy = saturate( material.anisotropy );\n\t}\n\tmaterial.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n\tmaterial.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;\n\tmaterial.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n\t#ifdef IOR\n\t\tfloat ior;\n\t#endif\n\t#ifdef USE_TRANSMISSION\n\t\tfloat transmission;\n\t\tfloat transmissionAlpha;\n\t\tfloat thickness;\n\t\tfloat attenuationDistance;\n\t\tvec3 attenuationColor;\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat anisotropy;\n\t\tfloat alphaT;\n\t\tvec3 anisotropyT;\n\t\tvec3 anisotropyB;\n\t#endif\n};\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\nvec3 sheenSpecularDirect = vec3( 0.0 );\nvec3 sheenSpecularIndirect = vec3(0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n\tfloat V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n\t\tfloat gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n\t\tfloat gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n\t\tfloat v = 0.5 / ( gv + gl );\n\t\treturn saturate(v);\n\t}\n\tfloat D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n\t\tfloat a2 = alphaT * alphaB;\n\t\thighp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n\t\thighp float v2 = dot( v, v );\n\t\tfloat w2 = a2 / v2;\n\t\treturn RECIPROCAL_PI * a2 * pow2 ( w2 );\n\t}\n#endif\n#ifdef USE_CLEARCOAT\n\tvec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n\t\tvec3 f0 = material.clearcoatF0;\n\t\tfloat f90 = material.clearcoatF90;\n\t\tfloat roughness = material.clearcoatRoughness;\n\t\tfloat alpha = pow2( roughness );\n\t\tvec3 halfDir = normalize( lightDir + viewDir );\n\t\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\t\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\t\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\t\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\t\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t\treturn F * ( V * D );\n\t}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n\tvec3 f0 = material.specularColor;\n\tfloat f90 = material.specularF90;\n\tfloat roughness = material.roughness;\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t#ifdef USE_IRIDESCENCE\n\t\tF = mix( F, material.iridescenceFresnel, material.iridescence );\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat dotTL = dot( material.anisotropyT, lightDir );\n\t\tfloat dotTV = dot( material.anisotropyT, viewDir );\n\t\tfloat dotTH = dot( material.anisotropyT, halfDir );\n\t\tfloat dotBL = dot( material.anisotropyB, lightDir );\n\t\tfloat dotBV = dot( material.anisotropyB, viewDir );\n\t\tfloat dotBH = dot( material.anisotropyB, halfDir );\n\t\tfloat V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n\t\tfloat D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n\t#else\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t#endif\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\t#ifdef USE_IRIDESCENCE\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\t#else\n\t\tvec3 Fr = specularColor;\n\t#endif\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometryNormal;\n\t\tvec3 viewDir = geometryViewDir;\n\t\tvec3 position = geometryPosition;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t#ifdef USE_IRIDESCENCE\n\t\tcomputeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\t#else\n\t\tcomputeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\t#endif\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nvec3 geometryPosition = - vViewPosition;\nvec3 geometryNormal = normal;\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\nvec3 geometryClearcoatNormal = vec3( 0.0 );\n#ifdef USE_CLEARCOAT\n\tgeometryClearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n\tfloat dotNVi = saturate( dot( normal, geometryViewDir ) );\n\tif ( material.iridescenceThickness == 0.0 ) {\n\t\tmaterial.iridescence = 0.0;\n\t} else {\n\t\tmaterial.iridescence = saturate( material.iridescence );\n\t}\n\tif ( material.iridescence > 0.0 ) {\n\t\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\t\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n\t}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometryPosition, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tvec4 spotColor;\n\tvec3 spotLightCoord;\n\tbool inSpotLightMap;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometryPosition, directLight );\n\t\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n\t\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n\t\t#else\n\t\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#endif\n\t\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n\t\t\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n\t\t\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n\t\t\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n\t\t\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n\t\t#endif\n\t\t#undef SPOT_LIGHT_MAP_INDEX\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if defined( USE_LIGHT_PROBES )\n\t\tirradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometryNormal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\t#ifdef USE_ANISOTROPY\n\t\tradiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\n\t#else\n\t\tradiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",map_fragment:"#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vMapUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\t\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t#if defined( USE_POINTS_UV )\n\t\tvec2 uv = vUv;\n\t#else\n\t\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",map_particle_pars_fragment:"#if defined( USE_POINTS_UV )\n\tvarying vec2 vUv;\n#else\n\t#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t\tuniform mat3 uvTransform;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphinstance_vertex:"#ifdef USE_INSTANCING_MORPH\n\tfloat morphTargetInfluences[MORPHTARGETS_COUNT];\n\tfloat morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tmorphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;\n\t}\n#endif",morphcolor_vertex:"#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\t#ifndef USE_INSTANCING_MORPH\n\t\tuniform float morphTargetBaseInfluence;\n\t#endif\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\t#ifndef USE_INSTANCING_MORPH\n\t\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\t#endif\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform ivec2 morphTargetsTextureSize;\n\t\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif",normal_fragment_begin:"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal *= faceDirection;\n\t#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn = getTangentFrame( - vViewPosition, normal,\n\t\t#if defined( USE_NORMALMAP )\n\t\t\tvNormalMapUv\n\t\t#elif defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tvClearcoatNormalMapUv\n\t\t#else\n\t\t\tvUv\n\t\t#endif\n\t\t);\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn[0] *= faceDirection;\n\t\ttbn[1] *= faceDirection;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn2[0] *= faceDirection;\n\t\ttbn2[1] *= faceDirection;\n\t#endif\n#endif\nvec3 nonPerturbedNormal = normal;",normal_fragment_maps:"#ifdef USE_NORMALMAP_OBJECTSPACE\n\tnormal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n\tvec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\tnormal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",normal_pars_fragment:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_pars_vertex:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_vertex:"#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n\tmat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( uv.st );\n\t\tvec2 st1 = dFdy( uv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n\t\treturn mat3( T * scale, B * scale, N );\n\t}\n#endif",clearcoat_normal_fragment_begin:"#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = nonPerturbedNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\tclearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif",clearcoat_pars_fragment:"#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif",iridescence_pars_fragment:"#ifdef USE_IRIDESCENCEMAP\n\tuniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform sampler2D iridescenceThicknessMap;\n#endif",opaque_fragment:"#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec2 packDepthToRG( in highp float v ) {\n\treturn packDepthToRGBA( v ).yx;\n}\nfloat unpackRGToDepth( const in highp vec2 v ) {\n\treturn unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * depth - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_BATCHING\n\tmvPosition = batchingMatrix * mvPosition;\n#endif\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#if NUM_SPOT_LIGHT_COORDS > 0\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n\tuniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n\t\tbool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",shadowmap_pars_vertex:"#if NUM_SPOT_LIGHT_COORDS > 0\n\tuniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",shadowmap_vertex:"#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\tvec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition;\n\t\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n\t\t#endif\n\t\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\tuniform highp sampler2D boneTexture;\n\tmat4 getBoneMatrix( const in float i ) {\n\t\tint size = textureSize( boneTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nconst mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(\n\tvec3( 1.6605, - 0.1246, - 0.0182 ),\n\tvec3( - 0.5876, 1.1329, - 0.1006 ),\n\tvec3( - 0.0728, - 0.0083, 1.1187 )\n);\nconst mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(\n\tvec3( 0.6274, 0.0691, 0.0164 ),\n\tvec3( 0.3293, 0.9195, 0.0880 ),\n\tvec3( 0.0433, 0.0113, 0.8956 )\n);\nvec3 agxDefaultContrastApprox( vec3 x ) {\n\tvec3 x2 = x * x;\n\tvec3 x4 = x2 * x2;\n\treturn + 15.5 * x4 * x2\n\t\t- 40.14 * x4 * x\n\t\t+ 31.96 * x4\n\t\t- 6.868 * x2 * x\n\t\t+ 0.4298 * x2\n\t\t+ 0.1191 * x\n\t\t- 0.00232;\n}\nvec3 AgXToneMapping( vec3 color ) {\n\tconst mat3 AgXInsetMatrix = mat3(\n\t\tvec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),\n\t\tvec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),\n\t\tvec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )\n\t);\n\tconst mat3 AgXOutsetMatrix = mat3(\n\t\tvec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),\n\t\tvec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),\n\t\tvec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )\n\t);\n\tconst float AgxMinEv = - 12.47393;\tconst float AgxMaxEv = 4.026069;\n\tcolor *= toneMappingExposure;\n\tcolor = LINEAR_SRGB_TO_LINEAR_REC2020 * color;\n\tcolor = AgXInsetMatrix * color;\n\tcolor = max( color, 1e-10 );\tcolor = log2( color );\n\tcolor = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );\n\tcolor = clamp( color, 0.0, 1.0 );\n\tcolor = agxDefaultContrastApprox( color );\n\tcolor = AgXOutsetMatrix * color;\n\tcolor = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );\n\tcolor = LINEAR_REC2020_TO_LINEAR_SRGB * color;\n\tcolor = clamp( color, 0.0, 1.0 );\n\treturn color;\n}\nvec3 NeutralToneMapping( vec3 color ) {\n\tfloat startCompression = 0.8 - 0.04;\n\tfloat desaturation = 0.15;\n\tcolor *= toneMappingExposure;\n\tfloat x = min(color.r, min(color.g, color.b));\n\tfloat offset = x < 0.08 ? x - 6.25 * x * x : 0.04;\n\tcolor -= offset;\n\tfloat peak = max(color.r, max(color.g, color.b));\n\tif (peak < startCompression) return color;\n\tfloat d = 1. - startCompression;\n\tfloat newPeak = 1. - d * d / (peak + d - startCompression);\n\tcolor *= newPeak / peak;\n\tfloat g = 1. - 1. / (desaturation * (peak - newPeak) + 1.);\n\treturn mix(color, vec3(1, 1, 1), g);\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",transmission_fragment:"#ifdef USE_TRANSMISSION\n\tmaterial.transmission = transmission;\n\tmaterial.transmissionAlpha = 1.0;\n\tmaterial.thickness = thickness;\n\tmaterial.attenuationDistance = attenuationDistance;\n\tmaterial.attenuationColor = attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tmaterial.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tmaterial.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmitted = getIBLVolumeRefraction(\n\t\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,\n\t\tmaterial.attenuationColor, material.attenuationDistance );\n\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n\ttotalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif",transmission_pars_fragment:"#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tfloat w0( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n\t}\n\tfloat w1( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n\t}\n\tfloat w2( float a ){\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n\t}\n\tfloat w3( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * a * a );\n\t}\n\tfloat g0( float a ) {\n\t\treturn w0( a ) + w1( a );\n\t}\n\tfloat g1( float a ) {\n\t\treturn w2( a ) + w3( a );\n\t}\n\tfloat h0( float a ) {\n\t\treturn - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n\t}\n\tfloat h1( float a ) {\n\t\treturn 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n\t}\n\tvec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n\t\tuv = uv * texelSize.zw + 0.5;\n\t\tvec2 iuv = floor( uv );\n\t\tvec2 fuv = fract( uv );\n\t\tfloat g0x = g0( fuv.x );\n\t\tfloat g1x = g1( fuv.x );\n\t\tfloat h0x = h0( fuv.x );\n\t\tfloat h1x = h1( fuv.x );\n\t\tfloat h0y = h0( fuv.y );\n\t\tfloat h1y = h1( fuv.y );\n\t\tvec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\treturn g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n\t\t\tg1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n\t}\n\tvec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n\t\tvec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n\t\tvec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n\t\tvec2 fLodSizeInv = 1.0 / fLodSize;\n\t\tvec2 cLodSizeInv = 1.0 / cLodSize;\n\t\tvec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n\t\tvec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n\t\treturn mix( fSample, cSample, fract( lod ) );\n\t}\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\treturn textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n\t}\n\tvec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( isinf( attenuationDistance ) ) {\n\t\t\treturn vec3( 1.0 );\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 attenuatedColor = transmittance * transmittedLight.rgb;\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\tfloat transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n\t}\n#endif",uv_pars_fragment:"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif",uv_pars_vertex:"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tuniform mat3 mapTransform;\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform mat3 alphaMapTransform;\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tuniform mat3 lightMapTransform;\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tuniform mat3 aoMapTransform;\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tuniform mat3 bumpMapTransform;\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tuniform mat3 normalMapTransform;\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tuniform mat3 displacementMapTransform;\n\tvarying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tuniform mat3 emissiveMapTransform;\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tuniform mat3 metalnessMapTransform;\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tuniform mat3 roughnessMapTransform;\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tuniform mat3 anisotropyMapTransform;\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tuniform mat3 clearcoatMapTransform;\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform mat3 clearcoatNormalMapTransform;\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform mat3 clearcoatRoughnessMapTransform;\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tuniform mat3 sheenColorMapTransform;\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tuniform mat3 sheenRoughnessMapTransform;\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tuniform mat3 iridescenceMapTransform;\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform mat3 iridescenceThicknessMapTransform;\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tuniform mat3 specularMapTransform;\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tuniform mat3 specularColorMapTransform;\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tuniform mat3 specularIntensityMapTransform;\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif",uv_vertex:"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n\tvMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n\tvAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n\tvLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n\tvAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n\tvBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n\tvNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tvDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n\tvMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n\tvSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tvTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n\tvThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_BATCHING\n\t\tworldPosition = batchingMatrix * worldPosition;\n\t#endif\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",background_frag:"uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\ttexColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",backgroundCube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",backgroundCube_frag:"#ifdef ENVMAP_TYPE_CUBE\n\tuniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n\tuniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nuniform mat3 backgroundRotation;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );\n\t#else\n\t\tvec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",cube_frag:"uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = texColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",depth_vert:"#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#include <morphinstance_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <clipping_planes_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#include <morphinstance_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <clipping_planes_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",meshbasic_vert:"#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshlambert_frag:"#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_lambert_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshnormal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",meshnormal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef USE_SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULAR_COLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_IRIDESCENCE\n\tuniform float iridescence;\n\tuniform float iridescenceIOR;\n\tuniform float iridescenceThicknessMinimum;\n\tuniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\tuniform vec2 anisotropyVector;\n\t#ifdef USE_ANISOTROPYMAP\n\t\tuniform sampler2D anisotropyMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\n\t#endif\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshtoon_vert:"#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshtoon_frag:"#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\nvoid main() {\n\t#ifdef USE_POINTS_UV\n\t\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\t#endif\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",shadow_vert:"#include <common>\n#include <batching_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}"},Bi={common:{diffuse:{value:new Pn(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new ze},alphaMap:{value:null},alphaMapTransform:{value:new ze},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new ze}},envmap:{envMap:{value:null},envMapRotation:{value:new ze},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new ze}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new ze}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new ze},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new ze},normalScale:{value:new Fe(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new ze},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new ze}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new ze}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new ze}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Pn(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Pn(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new ze},alphaTest:{value:0},uvTransform:{value:new ze}},sprite:{diffuse:{value:new Pn(16777215)},opacity:{value:1},center:{value:new Fe(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new ze},alphaMap:{value:null},alphaMapTransform:{value:new ze},alphaTest:{value:0}}},Gi={basic:{uniforms:gi([Bi.common,Bi.specularmap,Bi.envmap,Bi.aomap,Bi.lightmap,Bi.fog]),vertexShader:ki.meshbasic_vert,fragmentShader:ki.meshbasic_frag},lambert:{uniforms:gi([Bi.common,Bi.specularmap,Bi.envmap,Bi.aomap,Bi.lightmap,Bi.emissivemap,Bi.bumpmap,Bi.normalmap,Bi.displacementmap,Bi.fog,Bi.lights,{emissive:{value:new Pn(0)}}]),vertexShader:ki.meshlambert_vert,fragmentShader:ki.meshlambert_frag},phong:{uniforms:gi([Bi.common,Bi.specularmap,Bi.envmap,Bi.aomap,Bi.lightmap,Bi.emissivemap,Bi.bumpmap,Bi.normalmap,Bi.displacementmap,Bi.fog,Bi.lights,{emissive:{value:new Pn(0)},specular:{value:new Pn(1118481)},shininess:{value:30}}]),vertexShader:ki.meshphong_vert,fragmentShader:ki.meshphong_frag},standard:{uniforms:gi([Bi.common,Bi.envmap,Bi.aomap,Bi.lightmap,Bi.emissivemap,Bi.bumpmap,Bi.normalmap,Bi.displacementmap,Bi.roughnessmap,Bi.metalnessmap,Bi.fog,Bi.lights,{emissive:{value:new Pn(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:ki.meshphysical_vert,fragmentShader:ki.meshphysical_frag},toon:{uniforms:gi([Bi.common,Bi.aomap,Bi.lightmap,Bi.emissivemap,Bi.bumpmap,Bi.normalmap,Bi.displacementmap,Bi.gradientmap,Bi.fog,Bi.lights,{emissive:{value:new Pn(0)}}]),vertexShader:ki.meshtoon_vert,fragmentShader:ki.meshtoon_frag},matcap:{uniforms:gi([Bi.common,Bi.bumpmap,Bi.normalmap,Bi.displacementmap,Bi.fog,{matcap:{value:null}}]),vertexShader:ki.meshmatcap_vert,fragmentShader:ki.meshmatcap_frag},points:{uniforms:gi([Bi.points,Bi.fog]),vertexShader:ki.points_vert,fragmentShader:ki.points_frag},dashed:{uniforms:gi([Bi.common,Bi.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:ki.linedashed_vert,fragmentShader:ki.linedashed_frag},depth:{uniforms:gi([Bi.common,Bi.displacementmap]),vertexShader:ki.depth_vert,fragmentShader:ki.depth_frag},normal:{uniforms:gi([Bi.common,Bi.bumpmap,Bi.normalmap,Bi.displacementmap,{opacity:{value:1}}]),vertexShader:ki.meshnormal_vert,fragmentShader:ki.meshnormal_frag},sprite:{uniforms:gi([Bi.sprite,Bi.fog]),vertexShader:ki.sprite_vert,fragmentShader:ki.sprite_frag},background:{uniforms:{uvTransform:{value:new ze},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:ki.background_vert,fragmentShader:ki.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new ze}},vertexShader:ki.backgroundCube_vert,fragmentShader:ki.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:ki.cube_vert,fragmentShader:ki.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:ki.equirect_vert,fragmentShader:ki.equirect_frag},distanceRGBA:{uniforms:gi([Bi.common,Bi.displacementmap,{referencePosition:{value:new ht},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:ki.distanceRGBA_vert,fragmentShader:ki.distanceRGBA_frag},shadow:{uniforms:gi([Bi.lights,Bi.fog,{color:{value:new Pn(0)},opacity:{value:1}}]),vertexShader:ki.shadow_vert,fragmentShader:ki.shadow_frag}};Gi.physical={uniforms:gi([Gi.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new ze},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new ze},clearcoatNormalScale:{value:new Fe(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new ze},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new ze},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new ze},sheen:{value:0},sheenColor:{value:new Pn(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new ze},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new ze},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new ze},transmissionSamplerSize:{value:new Fe},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new ze},attenuationDistance:{value:0},attenuationColor:{value:new Pn(0)},specularColor:{value:new Pn(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new ze},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new ze},anisotropyVector:{value:new Fe},anisotropyMap:{value:null},anisotropyMapTransform:{value:new ze}}]),vertexShader:ki.meshphysical_vert,fragmentShader:ki.meshphysical_frag};const Hi={r:0,b:0,g:0},Vi=new Jt,Wi=new Bt;function Xi(e,t,n,i,s,r,a){const o=new Pn(0);let l,c,h=!0===r?0:1,d=null,u=0,p=null;function m(t,n){t.getRGB(Hi,vi(e)),i.buffers.color.setClear(Hi.r,Hi.g,Hi.b,n,a)}return{getClearColor:function(){return o},setClearColor:function(e,t=1){o.set(e),h=t,m(o,h)},getClearAlpha:function(){return h},setClearAlpha:function(e){h=e,m(o,h)},render:function(r,f){let g=!1,v=!0===f.isScene?f.background:null;if(v&&v.isTexture){v=(f.backgroundBlurriness>0?n:t).get(v)}null===v?m(o,h):v&&v.isColor&&(m(v,1),g=!0);const _=e.xr.getEnvironmentBlendMode();"additive"===_?i.buffers.color.setClear(0,0,0,1,a):"alpha-blend"===_&&i.buffers.color.setClear(0,0,0,0,a),(e.autoClear||g)&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),v&&(v.isCubeTexture||v.mapping===U)?(void 0===c&&(c=new ui(new mi(1,1,1),new yi({name:"BackgroundCubeMaterial",uniforms:fi(Gi.backgroundCube.uniforms),vertexShader:Gi.backgroundCube.vertexShader,fragmentShader:Gi.backgroundCube.fragmentShader,side:1,depthTest:!1,depthWrite:!1,fog:!1})),c.geometry.deleteAttribute("normal"),c.geometry.deleteAttribute("uv"),c.onBeforeRender=function(e,t,n){this.matrixWorld.copyPosition(n.matrixWorld)},Object.defineProperty(c.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),s.update(c)),Vi.copy(f.backgroundRotation),Vi.x*=-1,Vi.y*=-1,Vi.z*=-1,v.isCubeTexture&&!1===v.isRenderTargetTexture&&(Vi.y*=-1,Vi.z*=-1),c.material.uniforms.envMap.value=v,c.material.uniforms.flipEnvMap.value=v.isCubeTexture&&!1===v.isRenderTargetTexture?-1:1,c.material.uniforms.backgroundBlurriness.value=f.backgroundBlurriness,c.material.uniforms.backgroundIntensity.value=f.backgroundIntensity,c.material.uniforms.backgroundRotation.value.setFromMatrix4(Wi.makeRotationFromEuler(Vi)),c.material.toneMapped=Ye.getTransfer(v.colorSpace)!==ce,d===v&&u===v.version&&p===e.toneMapping||(c.material.needsUpdate=!0,d=v,u=v.version,p=e.toneMapping),c.layers.enableAll(),r.unshift(c,c.geometry,c.material,0,0,null)):v&&v.isTexture&&(void 0===l&&(l=new ui(new zi(2,2),new yi({name:"BackgroundMaterial",uniforms:fi(Gi.background.uniforms),vertexShader:Gi.background.vertexShader,fragmentShader:Gi.background.fragmentShader,side:0,depthTest:!1,depthWrite:!1,fog:!1})),l.geometry.deleteAttribute("normal"),Object.defineProperty(l.material,"map",{get:function(){return this.uniforms.t2D.value}}),s.update(l)),l.material.uniforms.t2D.value=v,l.material.uniforms.backgroundIntensity.value=f.backgroundIntensity,l.material.toneMapped=Ye.getTransfer(v.colorSpace)!==ce,!0===v.matrixAutoUpdate&&v.updateMatrix(),l.material.uniforms.uvTransform.value.copy(v.matrix),d===v&&u===v.version&&p===e.toneMapping||(l.material.needsUpdate=!0,d=v,u=v.version,p=e.toneMapping),l.layers.enableAll(),r.unshift(l,l.geometry,l.material,0,0,null))}}}function ji(e,t,n,i){const s=e.getParameter(e.MAX_VERTEX_ATTRIBS),r=i.isWebGL2?null:t.get("OES_vertex_array_object"),a=i.isWebGL2||null!==r,o={},l=p(null);let c=l,h=!1;function d(t){return i.isWebGL2?e.bindVertexArray(t):r.bindVertexArrayOES(t)}function u(t){return i.isWebGL2?e.deleteVertexArray(t):r.deleteVertexArrayOES(t)}function p(e){const t=[],n=[],i=[];for(let r=0;r<s;r++)t[r]=0,n[r]=0,i[r]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:t,enabledAttributes:n,attributeDivisors:i,object:e,attributes:{},index:null}}function m(){const e=c.newAttributes;for(let t=0,n=e.length;t<n;t++)e[t]=0}function f(e){g(e,0)}function g(n,s){const r=c.newAttributes,a=c.enabledAttributes,o=c.attributeDivisors;if(r[n]=1,0===a[n]&&(e.enableVertexAttribArray(n),a[n]=1),o[n]!==s){(i.isWebGL2?e:t.get("ANGLE_instanced_arrays"))[i.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](n,s),o[n]=s}}function v(){const t=c.newAttributes,n=c.enabledAttributes;for(let i=0,s=n.length;i<s;i++)n[i]!==t[i]&&(e.disableVertexAttribArray(i),n[i]=0)}function _(t,n,i,s,r,a,o){!0===o?e.vertexAttribIPointer(t,n,i,r,a):e.vertexAttribPointer(t,n,i,s,r,a)}function y(){x(),h=!0,c!==l&&(c=l,d(c.object))}function x(){l.geometry=null,l.program=null,l.wireframe=!1}return{setup:function(s,l,u,y,x){let M=!1;if(a){const t=function(t,n,s){const a=!0===s.wireframe;let l=o[t.id];void 0===l&&(l={},o[t.id]=l);let c=l[n.id];void 0===c&&(c={},l[n.id]=c);let h=c[a];void 0===h&&(h=p(i.isWebGL2?e.createVertexArray():r.createVertexArrayOES()),c[a]=h);return h}(y,u,l);c!==t&&(c=t,d(c.object)),M=function(e,t,n,i){const s=c.attributes,r=t.attributes;let a=0;const o=n.getAttributes();for(const l in o){if(o[l].location>=0){const t=s[l];let n=r[l];if(void 0===n&&("instanceMatrix"===l&&e.instanceMatrix&&(n=e.instanceMatrix),"instanceColor"===l&&e.instanceColor&&(n=e.instanceColor)),void 0===t)return!0;if(t.attribute!==n)return!0;if(n&&t.data!==n.data)return!0;a++}}return c.attributesNum!==a||c.index!==i}(s,y,u,x),M&&function(e,t,n,i){const s={},r=t.attributes;let a=0;const o=n.getAttributes();for(const l in o){if(o[l].location>=0){let t=r[l];void 0===t&&("instanceMatrix"===l&&e.instanceMatrix&&(t=e.instanceMatrix),"instanceColor"===l&&e.instanceColor&&(t=e.instanceColor));const n={};n.attribute=t,t&&t.data&&(n.data=t.data),s[l]=n,a++}}c.attributes=s,c.attributesNum=a,c.index=i}(s,y,u,x)}else{const e=!0===l.wireframe;c.geometry===y.id&&c.program===u.id&&c.wireframe===e||(c.geometry=y.id,c.program=u.id,c.wireframe=e,M=!0)}null!==x&&n.update(x,e.ELEMENT_ARRAY_BUFFER),(M||h)&&(h=!1,function(s,r,a,o){if(!1===i.isWebGL2&&(s.isInstancedMesh||o.isInstancedBufferGeometry)&&null===t.get("ANGLE_instanced_arrays"))return;m();const l=o.attributes,c=a.getAttributes(),h=r.defaultAttributeValues;for(const t in c){const r=c[t];if(r.location>=0){let a=l[t];if(void 0===a&&("instanceMatrix"===t&&s.instanceMatrix&&(a=s.instanceMatrix),"instanceColor"===t&&s.instanceColor&&(a=s.instanceColor)),void 0!==a){const t=a.normalized,l=a.itemSize,c=n.get(a);if(void 0===c)continue;const h=c.buffer,d=c.type,u=c.bytesPerElement,p=!0===i.isWebGL2&&(d===e.INT||d===e.UNSIGNED_INT||a.gpuType===W);if(a.isInterleavedBufferAttribute){const n=a.data,i=n.stride,c=a.offset;if(n.isInstancedInterleavedBuffer){for(let e=0;e<r.locationSize;e++)g(r.location+e,n.meshPerAttribute);!0!==s.isInstancedMesh&&void 0===o._maxInstanceCount&&(o._maxInstanceCount=n.meshPerAttribute*n.count)}else for(let e=0;e<r.locationSize;e++)f(r.location+e);e.bindBuffer(e.ARRAY_BUFFER,h);for(let e=0;e<r.locationSize;e++)_(r.location+e,l/r.locationSize,d,t,i*u,(c+l/r.locationSize*e)*u,p)}else{if(a.isInstancedBufferAttribute){for(let e=0;e<r.locationSize;e++)g(r.location+e,a.meshPerAttribute);!0!==s.isInstancedMesh&&void 0===o._maxInstanceCount&&(o._maxInstanceCount=a.meshPerAttribute*a.count)}else for(let e=0;e<r.locationSize;e++)f(r.location+e);e.bindBuffer(e.ARRAY_BUFFER,h);for(let e=0;e<r.locationSize;e++)_(r.location+e,l/r.locationSize,d,t,l*u,l/r.locationSize*e*u,p)}}else if(void 0!==h){const n=h[t];if(void 0!==n)switch(n.length){case 2:e.vertexAttrib2fv(r.location,n);break;case 3:e.vertexAttrib3fv(r.location,n);break;case 4:e.vertexAttrib4fv(r.location,n);break;default:e.vertexAttrib1fv(r.location,n)}}}}v()}(s,l,u,y),null!==x&&e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n.get(x).buffer))},reset:y,resetDefaultState:x,dispose:function(){y();for(const e in o){const t=o[e];for(const e in t){const n=t[e];for(const e in n)u(n[e].object),delete n[e];delete t[e]}delete o[e]}},releaseStatesOfGeometry:function(e){if(void 0===o[e.id])return;const t=o[e.id];for(const n in t){const e=t[n];for(const t in e)u(e[t].object),delete e[t];delete t[n]}delete o[e.id]},releaseStatesOfProgram:function(e){for(const t in o){const n=o[t];if(void 0===n[e.id])continue;const i=n[e.id];for(const e in i)u(i[e].object),delete i[e];delete n[e.id]}},initAttributes:m,enableAttribute:f,disableUnusedAttributes:v}}function qi(e,t,n,i){const s=i.isWebGL2;let r;this.setMode=function(e){r=e},this.render=function(t,i){e.drawArrays(r,t,i),n.update(i,r,1)},this.renderInstances=function(i,a,o){if(0===o)return;let l,c;if(s)l=e,c="drawArraysInstanced";else if(l=t.get("ANGLE_instanced_arrays"),c="drawArraysInstancedANGLE",null===l)return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");l[c](r,i,a,o),n.update(a,r,o)},this.renderMultiDraw=function(e,i,s){if(0===s)return;const a=t.get("WEBGL_multi_draw");if(null===a)for(let t=0;t<s;t++)this.render(e[t],i[t]);else{a.multiDrawArraysWEBGL(r,e,0,i,0,s);let t=0;for(let e=0;e<s;e++)t+=i[e];n.update(t,r,1)}}}function Yi(e,t,n){let i;function s(t){if("highp"===t){if(e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.HIGH_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.HIGH_FLOAT).precision>0)return"highp";t="mediump"}return"mediump"===t&&e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.MEDIUM_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}const r="undefined"!=typeof WebGL2RenderingContext&&"WebGL2RenderingContext"===e.constructor.name;let a=void 0!==n.precision?n.precision:"highp";const o=s(a);o!==a&&(console.warn("THREE.WebGLRenderer:",a,"not supported, using",o,"instead."),a=o);const l=r||t.has("WEBGL_draw_buffers"),c=!0===n.logarithmicDepthBuffer,h=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS),d=e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS),u=e.getParameter(e.MAX_TEXTURE_SIZE),p=e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE),m=e.getParameter(e.MAX_VERTEX_ATTRIBS),f=e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS),g=e.getParameter(e.MAX_VARYING_VECTORS),v=e.getParameter(e.MAX_FRAGMENT_UNIFORM_VECTORS),_=d>0,y=r||t.has("OES_texture_float");return{isWebGL2:r,drawBuffers:l,getMaxAnisotropy:function(){if(void 0!==i)return i;if(!0===t.has("EXT_texture_filter_anisotropic")){const n=t.get("EXT_texture_filter_anisotropic");i=e.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else i=0;return i},getMaxPrecision:s,precision:a,logarithmicDepthBuffer:c,maxTextures:h,maxVertexTextures:d,maxTextureSize:u,maxCubemapSize:p,maxAttributes:m,maxVertexUniforms:f,maxVaryings:g,maxFragmentUniforms:v,vertexTextures:_,floatFragmentTextures:y,floatVertexTextures:_&&y,maxSamples:r?e.getParameter(e.MAX_SAMPLES):0}}function Ki(e){const t=this;let n=null,i=0,s=!1,r=!1;const a=new Ui,o=new ze,l={value:null,needsUpdate:!1};function c(e,n,i,s){const r=null!==e?e.length:0;let c=null;if(0!==r){if(c=l.value,!0!==s||null===c){const t=i+4*r,s=n.matrixWorldInverse;o.getNormalMatrix(s),(null===c||c.length<t)&&(c=new Float32Array(t));for(let n=0,l=i;n!==r;++n,l+=4)a.copy(e[n]).applyMatrix4(s,o),a.normal.toArray(c,l),c[l+3]=a.constant}l.value=c,l.needsUpdate=!0}return t.numPlanes=r,t.numIntersection=0,c}this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(e,t){const n=0!==e.length||t||0!==i||s;return s=t,i=e.length,n},this.beginShadows=function(){r=!0,c(null)},this.endShadows=function(){r=!1},this.setGlobalState=function(e,t){n=c(e,t,0)},this.setState=function(a,o,h){const d=a.clippingPlanes,u=a.clipIntersection,p=a.clipShadows,m=e.get(a);if(!s||null===d||0===d.length||r&&!p)r?c(null):function(){l.value!==n&&(l.value=n,l.needsUpdate=i>0);t.numPlanes=i,t.numIntersection=0}();else{const e=r?0:i,t=4*e;let s=m.clippingState||null;l.value=s,s=c(d,o,t,h);for(let i=0;i!==t;++i)s[i]=n[i];m.clippingState=s,this.numIntersection=u?this.numPlanes:0,this.numPlanes+=e}}}function Ji(e){let t=new WeakMap;function n(e,t){return 303===t?e.mapping=P:304===t&&(e.mapping=L),e}function i(e){const n=e.target;n.removeEventListener("dispose",i);const s=t.get(n);void 0!==s&&(t.delete(n),s.dispose())}return{get:function(s){if(s&&s.isTexture){const r=s.mapping;if(303===r||304===r){if(t.has(s)){return n(t.get(s).texture,s.mapping)}{const r=s.image;if(r&&r.height>0){const a=new Ri(r.height);return a.fromEquirectangularTexture(e,s),t.set(s,a),s.addEventListener("dispose",i),n(a.texture,s.mapping)}return null}}}return s},dispose:function(){t=new WeakMap}}}class Zi extends xi{constructor(e=-1,t=1,n=1,i=-1,s=.1,r=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e,this.right=t,this.top=n,this.bottom=i,this.near=s,this.far=r,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=null===e.view?null:Object.assign({},e.view),this}setViewOffset(e,t,n,i,s,r){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=i,this.view.width=s,this.view.height=r,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let s=n-e,r=n+e,a=i+t,o=i-t;if(null!==this.view&&this.view.enabled){const e=(this.right-this.left)/this.view.fullWidth/this.zoom,t=(this.top-this.bottom)/this.view.fullHeight/this.zoom;s+=e*this.view.offsetX,r=s+e*this.view.width,a-=t*this.view.offsetY,o=a-t*this.view.height}this.projectionMatrix.makeOrthographic(s,r,a,o,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,null!==this.view&&(t.object.view=Object.assign({},this.view)),t}}const $i=[.125,.215,.35,.446,.526,.582],Qi=20,es=new Zi,ts=new Pn;let ns=null,is=0,ss=0;const rs=(1+Math.sqrt(5))/2,as=1/rs,os=[new ht(1,1,1),new ht(-1,1,1),new ht(1,1,-1),new ht(-1,1,-1),new ht(0,rs,as),new ht(0,rs,-as),new ht(as,0,rs),new ht(-as,0,rs),new ht(rs,as,0),new ht(-rs,as,0)];class ls{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(e,t=0,n=.1,i=100){ns=this._renderer.getRenderTarget(),is=this._renderer.getActiveCubeFace(),ss=this._renderer.getActiveMipmapLevel(),this._setSize(256);const s=this._allocateTargets();return s.depthBuffer=!0,this._sceneToCubeUV(e,n,i,s),t>0&&this._blur(s,0,0,t),this._applyPMREM(s),this._cleanup(s),s}fromEquirectangular(e,t=null){return this._fromTexture(e,t)}fromCubemap(e,t=null){return this._fromTexture(e,t)}compileCubemapShader(){null===this._cubemapMaterial&&(this._cubemapMaterial=us(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){null===this._equirectMaterial&&(this._equirectMaterial=ds(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),null!==this._cubemapMaterial&&this._cubemapMaterial.dispose(),null!==this._equirectMaterial&&this._equirectMaterial.dispose()}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){null!==this._blurMaterial&&this._blurMaterial.dispose(),null!==this._pingPongRenderTarget&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(ns,is,ss),e.scissorTest=!1,hs(e,0,0,e.width,e.height)}_fromTexture(e,t){e.mapping===P||e.mapping===L?this._setSize(0===e.image.length?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4),ns=this._renderer.getRenderTarget(),is=this._renderer.getActiveCubeFace(),ss=this._renderer.getActiveMipmapLevel();const n=t||this._allocateTargets();return this._textureToCubeUV(e,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,n={magFilter:k,minFilter:k,generateMipmaps:!1,type:q,format:K,colorSpace:re,depthBuffer:!1},i=cs(e,t,n);if(null===this._pingPongRenderTarget||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){null!==this._pingPongRenderTarget&&this._dispose(),this._pingPongRenderTarget=cs(e,t,n);const{_lodMax:i}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=function(e){const t=[],n=[],i=[];let s=e;const r=e-4+1+$i.length;for(let a=0;a<r;a++){const r=Math.pow(2,s);n.push(r);let o=1/r;a>e-4?o=$i[a-e+4-1]:0===a&&(o=0),i.push(o);const l=1/(r-2),c=-l,h=1+l,d=[c,c,h,c,h,h,c,c,h,h,c,h],u=6,p=6,m=3,f=2,g=1,v=new Float32Array(m*p*u),_=new Float32Array(f*p*u),y=new Float32Array(g*p*u);for(let e=0;e<u;e++){const t=e%3*2/3-1,n=e>2?0:-1,i=[t,n,0,t+2/3,n,0,t+2/3,n+1,0,t,n,0,t+2/3,n+1,0,t,n+1,0];v.set(i,m*p*e),_.set(d,f*p*e);const s=[e,e,e,e,e,e];y.set(s,g*p*e)}const x=new Yn;x.setAttribute("position",new Fn(v,m)),x.setAttribute("uv",new Fn(_,f)),x.setAttribute("faceIndex",new Fn(y,g)),t.push(x),s>4&&s--}return{lodPlanes:t,sizeLods:n,sigmas:i}}(i)),this._blurMaterial=function(e,t,n){const i=new Float32Array(Qi),s=new ht(0,1,0),r=new yi({name:"SphericalGaussianBlur",defines:{n:Qi,CUBEUV_TEXEL_WIDTH:1/t,CUBEUV_TEXEL_HEIGHT:1/n,CUBEUV_MAX_MIP:`${e}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:i},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:s}},vertexShader:ps(),fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1});return r}(i,e,t)}return i}_compileMaterial(e){const t=new ui(this._lodPlanes[0],e);this._renderer.compile(t,es)}_sceneToCubeUV(e,t,n,i){const s=new wi(90,1,t,n),r=[1,-1,1,1,1,1],a=[1,1,1,-1,-1,-1],o=this._renderer,l=o.autoClear,c=o.toneMapping;o.getClearColor(ts),o.toneMapping=0,o.autoClear=!1;const h=new Dn({name:"PMREM.Background",side:1,depthWrite:!1,depthTest:!1}),d=new ui(new mi,h);let u=!1;const p=e.background;p?p.isColor&&(h.color.copy(p),e.background=null,u=!0):(h.color.copy(ts),u=!0);for(let m=0;m<6;m++){const t=m%3;0===t?(s.up.set(0,r[m],0),s.lookAt(a[m],0,0)):1===t?(s.up.set(0,0,r[m]),s.lookAt(0,a[m],0)):(s.up.set(0,r[m],0),s.lookAt(0,0,a[m]));const n=this._cubeSize;hs(i,t*n,m>2?n:0,n,n),o.setRenderTarget(i),u&&o.render(d,s),o.render(e,s)}d.geometry.dispose(),d.material.dispose(),o.toneMapping=c,o.autoClear=l,e.background=p}_textureToCubeUV(e,t){const n=this._renderer,i=e.mapping===P||e.mapping===L;i?(null===this._cubemapMaterial&&(this._cubemapMaterial=us()),this._cubemapMaterial.uniforms.flipEnvMap.value=!1===e.isRenderTargetTexture?-1:1):null===this._equirectMaterial&&(this._equirectMaterial=ds());const s=i?this._cubemapMaterial:this._equirectMaterial,r=new ui(this._lodPlanes[0],s);s.uniforms.envMap.value=e;const a=this._cubeSize;hs(t,0,0,3*a,2*a),n.setRenderTarget(t),n.render(r,es)}_applyPMREM(e){const t=this._renderer,n=t.autoClear;t.autoClear=!1;for(let i=1;i<this._lodPlanes.length;i++){const t=Math.sqrt(this._sigmas[i]*this._sigmas[i]-this._sigmas[i-1]*this._sigmas[i-1]),n=os[(i-1)%os.length];this._blur(e,i-1,i,t,n)}t.autoClear=n}_blur(e,t,n,i,s){const r=this._pingPongRenderTarget;this._halfBlur(e,r,t,n,i,"latitudinal",s),this._halfBlur(r,e,n,n,i,"longitudinal",s)}_halfBlur(e,t,n,i,s,r,a){const o=this._renderer,l=this._blurMaterial;"latitudinal"!==r&&"longitudinal"!==r&&console.error("blur direction must be either latitudinal or longitudinal!");const c=new ui(this._lodPlanes[i],l),h=l.uniforms,d=this._sizeLods[n]-1,u=isFinite(s)?Math.PI/(2*d):2*Math.PI/39,p=s/u,m=isFinite(s)?1+Math.floor(3*p):Qi;m>Qi&&console.warn(`sigmaRadians, ${s}, is too large and will clip, as it requested ${m} samples when the maximum is set to 20`);const f=[];let g=0;for(let y=0;y<Qi;++y){const e=y/p,t=Math.exp(-e*e/2);f.push(t),0===y?g+=t:y<m&&(g+=2*t)}for(let y=0;y<f.length;y++)f[y]=f[y]/g;h.envMap.value=e.texture,h.samples.value=m,h.weights.value=f,h.latitudinal.value="latitudinal"===r,a&&(h.poleAxis.value=a);const{_lodMax:v}=this;h.dTheta.value=u,h.mipInt.value=v-n;const _=this._sizeLods[i];hs(t,3*_*(i>v-4?i-v+4:0),4*(this._cubeSize-_),3*_,2*_),o.setRenderTarget(t),o.render(c,es)}}function cs(e,t,n){const i=new at(e,t,n);return i.texture.mapping=U,i.texture.name="PMREM.cubeUv",i.scissorTest=!0,i}function hs(e,t,n,i,s){e.viewport.set(t,n,i,s),e.scissor.set(t,n,i,s)}function ds(){return new yi({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:ps(),fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tgl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}function us(){return new yi({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:ps(),fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}function ps(){return"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t"}function ms(e){let t=new WeakMap,n=null;function i(e){const n=e.target;n.removeEventListener("dispose",i);const s=t.get(n);void 0!==s&&(t.delete(n),s.dispose())}return{get:function(s){if(s&&s.isTexture){const r=s.mapping,a=303===r||304===r,o=r===P||r===L;if(a||o){if(s.isRenderTargetTexture&&!0===s.needsPMREMUpdate){s.needsPMREMUpdate=!1;let i=t.get(s);return null===n&&(n=new ls(e)),i=a?n.fromEquirectangular(s,i):n.fromCubemap(s,i),t.set(s,i),i.texture}if(t.has(s))return t.get(s).texture;{const r=s.image;if(a&&r&&r.height>0||o&&r&&function(e){let t=0;const n=6;for(let i=0;i<n;i++)void 0!==e[i]&&t++;return t===n}(r)){null===n&&(n=new ls(e));const r=a?n.fromEquirectangular(s):n.fromCubemap(s);return t.set(s,r),s.addEventListener("dispose",i),r.texture}return null}}}return s},dispose:function(){t=new WeakMap,null!==n&&(n.dispose(),n=null)}}}function fs(e){const t={};function n(n){if(void 0!==t[n])return t[n];let i;switch(n){case"WEBGL_depth_texture":i=e.getExtension("WEBGL_depth_texture")||e.getExtension("MOZ_WEBGL_depth_texture")||e.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=e.getExtension("EXT_texture_filter_anisotropic")||e.getExtension("MOZ_EXT_texture_filter_anisotropic")||e.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=e.getExtension("WEBGL_compressed_texture_s3tc")||e.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=e.getExtension(n)}return t[n]=i,i}return{has:function(e){return null!==n(e)},init:function(e){e.isWebGL2?(n("EXT_color_buffer_float"),n("WEBGL_clip_cull_distance")):(n("WEBGL_depth_texture"),n("OES_texture_float"),n("OES_texture_half_float"),n("OES_texture_half_float_linear"),n("OES_standard_derivatives"),n("OES_element_index_uint"),n("OES_vertex_array_object"),n("ANGLE_instanced_arrays")),n("OES_texture_float_linear"),n("EXT_color_buffer_half_float"),n("WEBGL_multisampled_render_to_texture")},get:function(e){const t=n(e);return null===t&&console.warn("THREE.WebGLRenderer: "+e+" extension not supported."),t}}}function gs(e,t,n,i){const s={},r=new WeakMap;function a(e){const o=e.target;null!==o.index&&t.remove(o.index);for(const n in o.attributes)t.remove(o.attributes[n]);for(const n in o.morphAttributes){const e=o.morphAttributes[n];for(let n=0,i=e.length;n<i;n++)t.remove(e[n])}o.removeEventListener("dispose",a),delete s[o.id];const l=r.get(o);l&&(t.remove(l),r.delete(o)),i.releaseStatesOfGeometry(o),!0===o.isInstancedBufferGeometry&&delete o._maxInstanceCount,n.memory.geometries--}function o(e){const n=[],i=e.index,s=e.attributes.position;let a=0;if(null!==i){const e=i.array;a=i.version;for(let t=0,i=e.length;t<i;t+=3){const i=e[t+0],s=e[t+1],r=e[t+2];n.push(i,s,s,r,r,i)}}else{if(void 0===s)return;{const e=s.array;a=s.version;for(let t=0,i=e.length/3-1;t<i;t+=3){const e=t+0,i=t+1,s=t+2;n.push(e,i,i,s,s,e)}}}const o=new(Be(n)?kn:zn)(n,1);o.version=a;const l=r.get(e);l&&t.remove(l),r.set(e,o)}return{get:function(e,t){return!0===s[t.id]||(t.addEventListener("dispose",a),s[t.id]=!0,n.memory.geometries++),t},update:function(n){const i=n.attributes;for(const r in i)t.update(i[r],e.ARRAY_BUFFER);const s=n.morphAttributes;for(const r in s){const n=s[r];for(let i=0,s=n.length;i<s;i++)t.update(n[i],e.ARRAY_BUFFER)}},getWireframeAttribute:function(e){const t=r.get(e);if(t){const n=e.index;null!==n&&t.version<n.version&&o(e)}else o(e);return r.get(e)}}}function vs(e,t,n,i){const s=i.isWebGL2;let r,a,o;this.setMode=function(e){r=e},this.setIndex=function(e){a=e.type,o=e.bytesPerElement},this.render=function(t,i){e.drawElements(r,i,a,t*o),n.update(i,r,1)},this.renderInstances=function(i,l,c){if(0===c)return;let h,d;if(s)h=e,d="drawElementsInstanced";else if(h=t.get("ANGLE_instanced_arrays"),d="drawElementsInstancedANGLE",null===h)return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");h[d](r,l,a,i*o,c),n.update(l,r,c)},this.renderMultiDraw=function(e,i,s){if(0===s)return;const l=t.get("WEBGL_multi_draw");if(null===l)for(let t=0;t<s;t++)this.render(e[t]/o,i[t]);else{l.multiDrawElementsWEBGL(r,i,0,a,e,0,s);let t=0;for(let e=0;e<s;e++)t+=i[e];n.update(t,r,1)}}}function _s(e){const t={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:t,programs:null,autoReset:!0,reset:function(){t.calls=0,t.triangles=0,t.points=0,t.lines=0},update:function(n,i,s){switch(t.calls++,i){case e.TRIANGLES:t.triangles+=s*(n/3);break;case e.LINES:t.lines+=s*(n/2);break;case e.LINE_STRIP:t.lines+=s*(n-1);break;case e.LINE_LOOP:t.lines+=s*n;break;case e.POINTS:t.points+=s*n;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",i)}}}}function ys(e,t){return e[0]-t[0]}function xs(e,t){return Math.abs(t[1])-Math.abs(e[1])}function Ms(e,t,n){const i={},s=new Float32Array(8),r=new WeakMap,a=new st,o=[];for(let l=0;l<8;l++)o[l]=[l,0];return{update:function(l,c,h){const d=l.morphTargetInfluences;if(!0===t.isWebGL2){const i=c.morphAttributes.position||c.morphAttributes.normal||c.morphAttributes.color,s=void 0!==i?i.length:0;let o=r.get(c);if(void 0===o||o.count!==s){let e=function(){v.dispose(),r.delete(c),c.removeEventListener("dispose",e)};void 0!==o&&o.texture.dispose();const n=void 0!==c.morphAttributes.position,i=void 0!==c.morphAttributes.normal,l=void 0!==c.morphAttributes.color,h=c.morphAttributes.position||[],d=c.morphAttributes.normal||[],u=c.morphAttributes.color||[];let p=0;!0===n&&(p=1),!0===i&&(p=2),!0===l&&(p=3);let m=c.attributes.position.count*p,f=1;m>t.maxTextureSize&&(f=Math.ceil(m/t.maxTextureSize),m=t.maxTextureSize);const g=new Float32Array(m*f*4*s),v=new ot(g,m,f,s);v.type=j,v.needsUpdate=!0;const _=4*p;for(let t=0;t<s;t++){const e=h[t],s=d[t],r=u[t],o=m*f*4*t;for(let t=0;t<e.count;t++){const c=t*_;!0===n&&(a.fromBufferAttribute(e,t),g[o+c+0]=a.x,g[o+c+1]=a.y,g[o+c+2]=a.z,g[o+c+3]=0),!0===i&&(a.fromBufferAttribute(s,t),g[o+c+4]=a.x,g[o+c+5]=a.y,g[o+c+6]=a.z,g[o+c+7]=0),!0===l&&(a.fromBufferAttribute(r,t),g[o+c+8]=a.x,g[o+c+9]=a.y,g[o+c+10]=a.z,g[o+c+11]=4===r.itemSize?a.w:1)}}o={count:s,texture:v,size:new Fe(m,f)},r.set(c,o),c.addEventListener("dispose",e)}if(!0===l.isInstancedMesh&&null!==l.morphTexture)h.getUniforms().setValue(e,"morphTexture",l.morphTexture,n);else{let t=0;for(let e=0;e<d.length;e++)t+=d[e];const n=c.morphTargetsRelative?1:1-t;h.getUniforms().setValue(e,"morphTargetBaseInfluence",n),h.getUniforms().setValue(e,"morphTargetInfluences",d)}h.getUniforms().setValue(e,"morphTargetsTexture",o.texture,n),h.getUniforms().setValue(e,"morphTargetsTextureSize",o.size)}else{const t=void 0===d?0:d.length;let n=i[c.id];if(void 0===n||n.length!==t){n=[];for(let e=0;e<t;e++)n[e]=[e,0];i[c.id]=n}for(let e=0;e<t;e++){const t=n[e];t[0]=e,t[1]=d[e]}n.sort(xs);for(let e=0;e<8;e++)e<t&&n[e][1]?(o[e][0]=n[e][0],o[e][1]=n[e][1]):(o[e][0]=Number.MAX_SAFE_INTEGER,o[e][1]=0);o.sort(ys);const r=c.morphAttributes.position,a=c.morphAttributes.normal;let l=0;for(let e=0;e<8;e++){const t=o[e],n=t[0],i=t[1];n!==Number.MAX_SAFE_INTEGER&&i?(r&&c.getAttribute("morphTarget"+e)!==r[n]&&c.setAttribute("morphTarget"+e,r[n]),a&&c.getAttribute("morphNormal"+e)!==a[n]&&c.setAttribute("morphNormal"+e,a[n]),s[e]=i,l+=i):(r&&!0===c.hasAttribute("morphTarget"+e)&&c.deleteAttribute("morphTarget"+e),a&&!0===c.hasAttribute("morphNormal"+e)&&c.deleteAttribute("morphNormal"+e),s[e]=0)}const u=c.morphTargetsRelative?1:1-l;h.getUniforms().setValue(e,"morphTargetBaseInfluence",u),h.getUniforms().setValue(e,"morphTargetInfluences",s)}}}}function Ss(e,t,n,i){let s=new WeakMap;function r(e){const t=e.target;t.removeEventListener("dispose",r),n.remove(t.instanceMatrix),null!==t.instanceColor&&n.remove(t.instanceColor)}return{update:function(a){const o=i.render.frame,l=a.geometry,c=t.get(a,l);if(s.get(c)!==o&&(t.update(c),s.set(c,o)),a.isInstancedMesh&&(!1===a.hasEventListener("dispose",r)&&a.addEventListener("dispose",r),s.get(a)!==o&&(n.update(a.instanceMatrix,e.ARRAY_BUFFER),null!==a.instanceColor&&n.update(a.instanceColor,e.ARRAY_BUFFER),s.set(a,o))),a.isSkinnedMesh){const e=a.skeleton;s.get(e)!==o&&(e.update(),s.set(e,o))}return c},dispose:function(){s=new WeakMap}}}class Es extends it{constructor(e,t,n,i,s,r,a,o,l,c){if((c=void 0!==c?c:J)!==J&&c!==Z)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===n&&c===J&&(n=X),void 0===n&&c===Z&&(n=Y),super(null,i,s,r,a,o,c,n,l),this.isDepthTexture=!0,this.image={width:e,height:t},this.magFilter=void 0!==a?a:O,this.minFilter=void 0!==o?o:O,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(e){return super.copy(e),this.compareFunction=e.compareFunction,this}toJSON(e){const t=super.toJSON(e);return null!==this.compareFunction&&(t.compareFunction=this.compareFunction),t}}const ws=new it,bs=new Es(1,1);bs.compareFunction=515;const Ts=new ot,As=new lt,Rs=new Ai,Cs=[],Ps=[],Ls=new Float32Array(16),Us=new Float32Array(9),Is=new Float32Array(4);function Ds(e,t,n){const i=e[0];if(i<=0||i>0)return e;const s=t*n;let r=Cs[s];if(void 0===r&&(r=new Float32Array(s),Cs[s]=r),0!==t){i.toArray(r,0);for(let i=1,s=0;i!==t;++i)s+=n,e[i].toArray(r,s)}return r}function Ns(e,t){if(e.length!==t.length)return!1;for(let n=0,i=e.length;n<i;n++)if(e[n]!==t[n])return!1;return!0}function Os(e,t){for(let n=0,i=t.length;n<i;n++)e[n]=t[n]}function Fs(e,t){let n=Ps[t];void 0===n&&(n=new Int32Array(t),Ps[t]=n);for(let i=0;i!==t;++i)n[i]=e.allocateTextureUnit();return n}function zs(e,t){const n=this.cache;n[0]!==t&&(e.uniform1f(this.addr,t),n[0]=t)}function ks(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y||(e.uniform2f(this.addr,t.x,t.y),n[0]=t.x,n[1]=t.y);else{if(Ns(n,t))return;e.uniform2fv(this.addr,t),Os(n,t)}}function Bs(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z||(e.uniform3f(this.addr,t.x,t.y,t.z),n[0]=t.x,n[1]=t.y,n[2]=t.z);else if(void 0!==t.r)n[0]===t.r&&n[1]===t.g&&n[2]===t.b||(e.uniform3f(this.addr,t.r,t.g,t.b),n[0]=t.r,n[1]=t.g,n[2]=t.b);else{if(Ns(n,t))return;e.uniform3fv(this.addr,t),Os(n,t)}}function Gs(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z&&n[3]===t.w||(e.uniform4f(this.addr,t.x,t.y,t.z,t.w),n[0]=t.x,n[1]=t.y,n[2]=t.z,n[3]=t.w);else{if(Ns(n,t))return;e.uniform4fv(this.addr,t),Os(n,t)}}function Hs(e,t){const n=this.cache,i=t.elements;if(void 0===i){if(Ns(n,t))return;e.uniformMatrix2fv(this.addr,!1,t),Os(n,t)}else{if(Ns(n,i))return;Is.set(i),e.uniformMatrix2fv(this.addr,!1,Is),Os(n,i)}}function Vs(e,t){const n=this.cache,i=t.elements;if(void 0===i){if(Ns(n,t))return;e.uniformMatrix3fv(this.addr,!1,t),Os(n,t)}else{if(Ns(n,i))return;Us.set(i),e.uniformMatrix3fv(this.addr,!1,Us),Os(n,i)}}function Ws(e,t){const n=this.cache,i=t.elements;if(void 0===i){if(Ns(n,t))return;e.uniformMatrix4fv(this.addr,!1,t),Os(n,t)}else{if(Ns(n,i))return;Ls.set(i),e.uniformMatrix4fv(this.addr,!1,Ls),Os(n,i)}}function Xs(e,t){const n=this.cache;n[0]!==t&&(e.uniform1i(this.addr,t),n[0]=t)}function js(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y||(e.uniform2i(this.addr,t.x,t.y),n[0]=t.x,n[1]=t.y);else{if(Ns(n,t))return;e.uniform2iv(this.addr,t),Os(n,t)}}function qs(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z||(e.uniform3i(this.addr,t.x,t.y,t.z),n[0]=t.x,n[1]=t.y,n[2]=t.z);else{if(Ns(n,t))return;e.uniform3iv(this.addr,t),Os(n,t)}}function Ys(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z&&n[3]===t.w||(e.uniform4i(this.addr,t.x,t.y,t.z,t.w),n[0]=t.x,n[1]=t.y,n[2]=t.z,n[3]=t.w);else{if(Ns(n,t))return;e.uniform4iv(this.addr,t),Os(n,t)}}function Ks(e,t){const n=this.cache;n[0]!==t&&(e.uniform1ui(this.addr,t),n[0]=t)}function Js(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y||(e.uniform2ui(this.addr,t.x,t.y),n[0]=t.x,n[1]=t.y);else{if(Ns(n,t))return;e.uniform2uiv(this.addr,t),Os(n,t)}}function Zs(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z||(e.uniform3ui(this.addr,t.x,t.y,t.z),n[0]=t.x,n[1]=t.y,n[2]=t.z);else{if(Ns(n,t))return;e.uniform3uiv(this.addr,t),Os(n,t)}}function $s(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z&&n[3]===t.w||(e.uniform4ui(this.addr,t.x,t.y,t.z,t.w),n[0]=t.x,n[1]=t.y,n[2]=t.z,n[3]=t.w);else{if(Ns(n,t))return;e.uniform4uiv(this.addr,t),Os(n,t)}}function Qs(e,t,n){const i=this.cache,s=n.allocateTextureUnit();i[0]!==s&&(e.uniform1i(this.addr,s),i[0]=s);const r=this.type===e.SAMPLER_2D_SHADOW?bs:ws;n.setTexture2D(t||r,s)}function er(e,t,n){const i=this.cache,s=n.allocateTextureUnit();i[0]!==s&&(e.uniform1i(this.addr,s),i[0]=s),n.setTexture3D(t||As,s)}function tr(e,t,n){const i=this.cache,s=n.allocateTextureUnit();i[0]!==s&&(e.uniform1i(this.addr,s),i[0]=s),n.setTextureCube(t||Rs,s)}function nr(e,t,n){const i=this.cache,s=n.allocateTextureUnit();i[0]!==s&&(e.uniform1i(this.addr,s),i[0]=s),n.setTexture2DArray(t||Ts,s)}function ir(e,t){e.uniform1fv(this.addr,t)}function sr(e,t){const n=Ds(t,this.size,2);e.uniform2fv(this.addr,n)}function rr(e,t){const n=Ds(t,this.size,3);e.uniform3fv(this.addr,n)}function ar(e,t){const n=Ds(t,this.size,4);e.uniform4fv(this.addr,n)}function or(e,t){const n=Ds(t,this.size,4);e.uniformMatrix2fv(this.addr,!1,n)}function lr(e,t){const n=Ds(t,this.size,9);e.uniformMatrix3fv(this.addr,!1,n)}function cr(e,t){const n=Ds(t,this.size,16);e.uniformMatrix4fv(this.addr,!1,n)}function hr(e,t){e.uniform1iv(this.addr,t)}function dr(e,t){e.uniform2iv(this.addr,t)}function ur(e,t){e.uniform3iv(this.addr,t)}function pr(e,t){e.uniform4iv(this.addr,t)}function mr(e,t){e.uniform1uiv(this.addr,t)}function fr(e,t){e.uniform2uiv(this.addr,t)}function gr(e,t){e.uniform3uiv(this.addr,t)}function vr(e,t){e.uniform4uiv(this.addr,t)}function _r(e,t,n){const i=this.cache,s=t.length,r=Fs(n,s);Ns(i,r)||(e.uniform1iv(this.addr,r),Os(i,r));for(let a=0;a!==s;++a)n.setTexture2D(t[a]||ws,r[a])}function yr(e,t,n){const i=this.cache,s=t.length,r=Fs(n,s);Ns(i,r)||(e.uniform1iv(this.addr,r),Os(i,r));for(let a=0;a!==s;++a)n.setTexture3D(t[a]||As,r[a])}function xr(e,t,n){const i=this.cache,s=t.length,r=Fs(n,s);Ns(i,r)||(e.uniform1iv(this.addr,r),Os(i,r));for(let a=0;a!==s;++a)n.setTextureCube(t[a]||Rs,r[a])}function Mr(e,t,n){const i=this.cache,s=t.length,r=Fs(n,s);Ns(i,r)||(e.uniform1iv(this.addr,r),Os(i,r));for(let a=0;a!==s;++a)n.setTexture2DArray(t[a]||Ts,r[a])}class Sr{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.type=t.type,this.setValue=function(e){switch(e){case 5126:return zs;case 35664:return ks;case 35665:return Bs;case 35666:return Gs;case 35674:return Hs;case 35675:return Vs;case 35676:return Ws;case 5124:case 35670:return Xs;case 35667:case 35671:return js;case 35668:case 35672:return qs;case 35669:case 35673:return Ys;case 5125:return Ks;case 36294:return Js;case 36295:return Zs;case 36296:return $s;case 35678:case 36198:case 36298:case 36306:case 35682:return Qs;case 35679:case 36299:case 36307:return er;case 35680:case 36300:case 36308:case 36293:return tr;case 36289:case 36303:case 36311:case 36292:return nr}}(t.type)}}class Er{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.type=t.type,this.size=t.size,this.setValue=function(e){switch(e){case 5126:return ir;case 35664:return sr;case 35665:return rr;case 35666:return ar;case 35674:return or;case 35675:return lr;case 35676:return cr;case 5124:case 35670:return hr;case 35667:case 35671:return dr;case 35668:case 35672:return ur;case 35669:case 35673:return pr;case 5125:return mr;case 36294:return fr;case 36295:return gr;case 36296:return vr;case 35678:case 36198:case 36298:case 36306:case 35682:return _r;case 35679:case 36299:case 36307:return yr;case 35680:case 36300:case 36308:case 36293:return xr;case 36289:case 36303:case 36311:case 36292:return Mr}}(t.type)}}class wr{constructor(e){this.id=e,this.seq=[],this.map={}}setValue(e,t,n){const i=this.seq;for(let s=0,r=i.length;s!==r;++s){const r=i[s];r.setValue(e,t[r.id],n)}}}const br=/(\w+)(\])?(\[|\.)?/g;function Tr(e,t){e.seq.push(t),e.map[t.id]=t}function Ar(e,t,n){const i=e.name,s=i.length;for(br.lastIndex=0;;){const r=br.exec(i),a=br.lastIndex;let o=r[1];const l="]"===r[2],c=r[3];if(l&&(o|=0),void 0===c||"["===c&&a+2===s){Tr(n,void 0===c?new Sr(o,e,t):new Er(o,e,t));break}{let e=n.map[o];void 0===e&&(e=new wr(o),Tr(n,e)),n=e}}}class Rr{constructor(e,t){this.seq=[],this.map={};const n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS);for(let i=0;i<n;++i){const n=e.getActiveUniform(t,i);Ar(n,e.getUniformLocation(t,n.name),this)}}setValue(e,t,n,i){const s=this.map[t];void 0!==s&&s.setValue(e,n,i)}setOptional(e,t,n){const i=t[n];void 0!==i&&this.setValue(e,n,i)}static upload(e,t,n,i){for(let s=0,r=t.length;s!==r;++s){const r=t[s],a=n[r.id];!1!==a.needsUpdate&&r.setValue(e,a.value,i)}}static seqWithValue(e,t){const n=[];for(let i=0,s=e.length;i!==s;++i){const s=e[i];s.id in t&&n.push(s)}return n}}function Cr(e,t,n){const i=e.createShader(t);return e.shaderSource(i,n),e.compileShader(i),i}let Pr=0;function Lr(e,t,n){const i=e.getShaderParameter(t,e.COMPILE_STATUS),s=e.getShaderInfoLog(t).trim();if(i&&""===s)return"";const r=/ERROR: 0:(\d+)/.exec(s);if(r){const i=parseInt(r[1]);return n.toUpperCase()+"\n\n"+s+"\n\n"+function(e,t){const n=e.split("\n"),i=[],s=Math.max(t-6,0),r=Math.min(t+6,n.length);for(let a=s;a<r;a++){const e=a+1;i.push(`${e===t?">":" "} ${e}: ${n[a]}`)}return i.join("\n")}(e.getShaderSource(t),i)}return s}function Ur(e,t){const n=function(e){const t=Ye.getPrimaries(Ye.workingColorSpace),n=Ye.getPrimaries(e);let i;switch(t===n?i="":t===de&&n===he?i="LinearDisplayP3ToLinearSRGB":t===he&&n===de&&(i="LinearSRGBToLinearDisplayP3"),e){case re:case oe:return[i,"LinearTransferOETF"];case se:case ae:return[i,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space:",e),[i,"LinearTransferOETF"]}}(t);return`vec4 ${e}( vec4 value ) { return ${n[0]}( ${n[1]}( value ) ); }`}function Ir(e,t){let n;switch(t){case 1:n="Linear";break;case 2:n="Reinhard";break;case 3:n="OptimizedCineon";break;case 4:n="ACESFilmic";break;case 6:n="AgX";break;case 7:n="Neutral";break;case 5:n="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",t),n="Linear"}return"vec3 "+e+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}function Dr(e){return""!==e}function Nr(e,t){const n=t.numSpotLightShadows+t.numSpotLightMaps-t.numSpotLightShadowsWithMaps;return e.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,t.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,n).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,t.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function Or(e,t){return e.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}const Fr=/^[ \t]*#include +<([\w\d./]+)>/gm;function zr(e){return e.replace(Fr,Br)}const kr=new Map([["encodings_fragment","colorspace_fragment"],["encodings_pars_fragment","colorspace_pars_fragment"],["output_fragment","opaque_fragment"]]);function Br(e,t){let n=ki[t];if(void 0===n){const e=kr.get(t);if(void 0===e)throw new Error("Can not resolve #include <"+t+">");n=ki[e],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',t,e)}return zr(n)}const Gr=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function Hr(e){return e.replace(Gr,Vr)}function Vr(e,t,n,i){let s="";for(let r=parseInt(t);r<parseInt(n);r++)s+=i.replace(/\[\s*i\s*\]/g,"[ "+r+" ]").replace(/UNROLLED_LOOP_INDEX/g,r);return s}function Wr(e){let t=`precision ${e.precision} float;\n\tprecision ${e.precision} int;\n\tprecision ${e.precision} sampler2D;\n\tprecision ${e.precision} samplerCube;\n\t`;return e.isWebGL2&&(t+=`precision ${e.precision} sampler3D;\n\t\tprecision ${e.precision} sampler2DArray;\n\t\tprecision ${e.precision} sampler2DShadow;\n\t\tprecision ${e.precision} samplerCubeShadow;\n\t\tprecision ${e.precision} sampler2DArrayShadow;\n\t\tprecision ${e.precision} isampler2D;\n\t\tprecision ${e.precision} isampler3D;\n\t\tprecision ${e.precision} isamplerCube;\n\t\tprecision ${e.precision} isampler2DArray;\n\t\tprecision ${e.precision} usampler2D;\n\t\tprecision ${e.precision} usampler3D;\n\t\tprecision ${e.precision} usamplerCube;\n\t\tprecision ${e.precision} usampler2DArray;\n\t\t`),"highp"===e.precision?t+="\n#define HIGH_PRECISION":"mediump"===e.precision?t+="\n#define MEDIUM_PRECISION":"lowp"===e.precision&&(t+="\n#define LOW_PRECISION"),t}function Xr(e,t,n,i){const s=e.getContext(),r=n.defines;let a=n.vertexShader,o=n.fragmentShader;const l=function(e){let t="SHADOWMAP_TYPE_BASIC";return 1===e.shadowMapType?t="SHADOWMAP_TYPE_PCF":2===e.shadowMapType?t="SHADOWMAP_TYPE_PCF_SOFT":3===e.shadowMapType&&(t="SHADOWMAP_TYPE_VSM"),t}(n),c=function(e){let t="ENVMAP_TYPE_CUBE";if(e.envMap)switch(e.envMapMode){case P:case L:t="ENVMAP_TYPE_CUBE";break;case U:t="ENVMAP_TYPE_CUBE_UV"}return t}(n),h=function(e){let t="ENVMAP_MODE_REFLECTION";e.envMap&&e.envMapMode===L&&(t="ENVMAP_MODE_REFRACTION");return t}(n),d=function(e){let t="ENVMAP_BLENDING_NONE";if(e.envMap)switch(e.combine){case 0:t="ENVMAP_BLENDING_MULTIPLY";break;case 1:t="ENVMAP_BLENDING_MIX";break;case 2:t="ENVMAP_BLENDING_ADD"}return t}(n),u=function(e){const t=e.envMapCubeUVHeight;if(null===t)return null;const n=Math.log2(t)-2,i=1/t;return{texelWidth:1/(3*Math.max(Math.pow(2,n),112)),texelHeight:i,maxMip:n}}(n),p=n.isWebGL2?"":function(e){return[e.extensionDerivatives||e.envMapCubeUVHeight||e.bumpMap||e.normalMapTangentSpace||e.clearcoatNormalMap||e.flatShading||e.alphaToCoverage||"physical"===e.shaderID?"#extension GL_OES_standard_derivatives : enable":"",(e.extensionFragDepth||e.logarithmicDepthBuffer)&&e.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",e.extensionDrawBuffers&&e.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(e.extensionShaderTextureLOD||e.envMap||e.transmission)&&e.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(Dr).join("\n")}(n),m=function(e){return[e.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",e.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""].filter(Dr).join("\n")}(n),f=function(e){const t=[];for(const n in e){const i=e[n];!1!==i&&t.push("#define "+n+" "+i)}return t.join("\n")}(r),g=s.createProgram();let v,_,y=n.glslVersion?"#version "+n.glslVersion+"\n":"";n.isRawShaderMaterial?(v=["#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,f].filter(Dr).join("\n"),v.length>0&&(v+="\n"),_=[p,"#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,f].filter(Dr).join("\n"),_.length>0&&(_+="\n")):(v=[Wr(n),"#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,f,n.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",n.batching?"#define USE_BATCHING":"",n.instancing?"#define USE_INSTANCING":"",n.instancingColor?"#define USE_INSTANCING_COLOR":"",n.instancingMorph?"#define USE_INSTANCING_MORPH":"",n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+h:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",n.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",n.displacementMap?"#define USE_DISPLACEMENTMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.anisotropy?"#define USE_ANISOTROPY":"",n.anisotropyMap?"#define USE_ANISOTROPYMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",n.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaHash?"#define USE_ALPHAHASH":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",n.mapUv?"#define MAP_UV "+n.mapUv:"",n.alphaMapUv?"#define ALPHAMAP_UV "+n.alphaMapUv:"",n.lightMapUv?"#define LIGHTMAP_UV "+n.lightMapUv:"",n.aoMapUv?"#define AOMAP_UV "+n.aoMapUv:"",n.emissiveMapUv?"#define EMISSIVEMAP_UV "+n.emissiveMapUv:"",n.bumpMapUv?"#define BUMPMAP_UV "+n.bumpMapUv:"",n.normalMapUv?"#define NORMALMAP_UV "+n.normalMapUv:"",n.displacementMapUv?"#define DISPLACEMENTMAP_UV "+n.displacementMapUv:"",n.metalnessMapUv?"#define METALNESSMAP_UV "+n.metalnessMapUv:"",n.roughnessMapUv?"#define ROUGHNESSMAP_UV "+n.roughnessMapUv:"",n.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+n.anisotropyMapUv:"",n.clearcoatMapUv?"#define CLEARCOATMAP_UV "+n.clearcoatMapUv:"",n.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+n.clearcoatNormalMapUv:"",n.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+n.clearcoatRoughnessMapUv:"",n.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+n.iridescenceMapUv:"",n.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+n.iridescenceThicknessMapUv:"",n.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+n.sheenColorMapUv:"",n.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+n.sheenRoughnessMapUv:"",n.specularMapUv?"#define SPECULARMAP_UV "+n.specularMapUv:"",n.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+n.specularColorMapUv:"",n.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+n.specularIntensityMapUv:"",n.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+n.transmissionMapUv:"",n.thicknessMapUv?"#define THICKNESSMAP_UV "+n.thicknessMapUv:"",n.vertexTangents&&!1===n.flatShading?"#define USE_TANGENT":"",n.vertexColors?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUv1s?"#define USE_UV1":"",n.vertexUv2s?"#define USE_UV2":"",n.vertexUv3s?"#define USE_UV3":"",n.pointsUvs?"#define USE_POINTS_UV":"",n.flatShading?"#define FLAT_SHADED":"",n.skinning?"#define USE_SKINNING":"",n.morphTargets?"#define USE_MORPHTARGETS":"",n.morphNormals&&!1===n.flatShading?"#define USE_MORPHNORMALS":"",n.morphColors&&n.isWebGL2?"#define USE_MORPHCOLORS":"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_TEXTURE_STRIDE "+n.morphTextureStride:"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_COUNT "+n.morphTargetsCount:"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+l:"",n.sizeAttenuation?"#define USE_SIZEATTENUATION":"",n.numLightProbes>0?"#define USE_LIGHT_PROBES":"",n.useLegacyLights?"#define LEGACY_LIGHTS":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","\tuniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","\tattribute vec2 uv1;","#endif","#ifdef USE_UV2","\tattribute vec2 uv2;","#endif","#ifdef USE_UV3","\tattribute vec2 uv3;","#endif","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","\tattribute vec4 color;","#elif defined( USE_COLOR )","\tattribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(Dr).join("\n"),_=[p,Wr(n),"#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,f,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",n.map?"#define USE_MAP":"",n.matcap?"#define USE_MATCAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+c:"",n.envMap?"#define "+h:"",n.envMap?"#define "+d:"",u?"#define CUBEUV_TEXEL_WIDTH "+u.texelWidth:"",u?"#define CUBEUV_TEXEL_HEIGHT "+u.texelHeight:"",u?"#define CUBEUV_MAX_MIP "+u.maxMip+".0":"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",n.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.anisotropy?"#define USE_ANISOTROPY":"",n.anisotropyMap?"#define USE_ANISOTROPYMAP":"",n.clearcoat?"#define USE_CLEARCOAT":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.iridescence?"#define USE_IRIDESCENCE":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",n.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaTest?"#define USE_ALPHATEST":"",n.alphaHash?"#define USE_ALPHAHASH":"",n.sheen?"#define USE_SHEEN":"",n.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.vertexTangents&&!1===n.flatShading?"#define USE_TANGENT":"",n.vertexColors||n.instancingColor?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUv1s?"#define USE_UV1":"",n.vertexUv2s?"#define USE_UV2":"",n.vertexUv3s?"#define USE_UV3":"",n.pointsUvs?"#define USE_POINTS_UV":"",n.gradientMap?"#define USE_GRADIENTMAP":"",n.flatShading?"#define FLAT_SHADED":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+l:"",n.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",n.numLightProbes>0?"#define USE_LIGHT_PROBES":"",n.useLegacyLights?"#define LEGACY_LIGHTS":"",n.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",0!==n.toneMapping?"#define TONE_MAPPING":"",0!==n.toneMapping?ki.tonemapping_pars_fragment:"",0!==n.toneMapping?Ir("toneMapping",n.toneMapping):"",n.dithering?"#define DITHERING":"",n.opaque?"#define OPAQUE":"",ki.colorspace_pars_fragment,Ur("linearToOutputTexel",n.outputColorSpace),n.useDepthPacking?"#define DEPTH_PACKING "+n.depthPacking:"","\n"].filter(Dr).join("\n")),a=zr(a),a=Nr(a,n),a=Or(a,n),o=zr(o),o=Nr(o,n),o=Or(o,n),a=Hr(a),o=Hr(o),n.isWebGL2&&!0!==n.isRawShaderMaterial&&(y="#version 300 es\n",v=[m,"precision mediump sampler2DArray;","#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+v,_=["precision mediump sampler2DArray;","#define varying in",n.glslVersion===Me?"":"layout(location = 0) out highp vec4 pc_fragColor;",n.glslVersion===Me?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+_);const x=y+v+a,M=y+_+o,S=Cr(s,s.VERTEX_SHADER,x),E=Cr(s,s.FRAGMENT_SHADER,M);function w(t){if(e.debug.checkShaderErrors){const n=s.getProgramInfoLog(g).trim(),i=s.getShaderInfoLog(S).trim(),r=s.getShaderInfoLog(E).trim();let a=!0,o=!0;if(!1===s.getProgramParameter(g,s.LINK_STATUS))if(a=!1,"function"==typeof e.debug.onShaderError)e.debug.onShaderError(s,g,S,E);else{const e=Lr(s,S,"vertex"),i=Lr(s,E,"fragment");console.error("THREE.WebGLProgram: Shader Error "+s.getError()+" - VALIDATE_STATUS "+s.getProgramParameter(g,s.VALIDATE_STATUS)+"\n\nMaterial Name: "+t.name+"\nMaterial Type: "+t.type+"\n\nProgram Info Log: "+n+"\n"+e+"\n"+i)}else""!==n?console.warn("THREE.WebGLProgram: Program Info Log:",n):""!==i&&""!==r||(o=!1);o&&(t.diagnostics={runnable:a,programLog:n,vertexShader:{log:i,prefix:v},fragmentShader:{log:r,prefix:_}})}s.deleteShader(S),s.deleteShader(E),b=new Rr(s,g),T=function(e,t){const n={},i=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES);for(let s=0;s<i;s++){const i=e.getActiveAttrib(t,s),r=i.name;let a=1;i.type===e.FLOAT_MAT2&&(a=2),i.type===e.FLOAT_MAT3&&(a=3),i.type===e.FLOAT_MAT4&&(a=4),n[r]={type:i.type,location:e.getAttribLocation(t,r),locationSize:a}}return n}(s,g)}let b,T;s.attachShader(g,S),s.attachShader(g,E),void 0!==n.index0AttributeName?s.bindAttribLocation(g,0,n.index0AttributeName):!0===n.morphTargets&&s.bindAttribLocation(g,0,"position"),s.linkProgram(g),this.getUniforms=function(){return void 0===b&&w(this),b},this.getAttributes=function(){return void 0===T&&w(this),T};let A=!1===n.rendererExtensionParallelShaderCompile;return this.isReady=function(){return!1===A&&(A=s.getProgramParameter(g,37297)),A},this.destroy=function(){i.releaseStatesOfProgram(this),s.deleteProgram(g),this.program=void 0},this.type=n.shaderType,this.name=n.shaderName,this.id=Pr++,this.cacheKey=t,this.usedTimes=1,this.program=g,this.vertexShader=S,this.fragmentShader=E,this}let jr=0;class qr{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(e){const t=e.vertexShader,n=e.fragmentShader,i=this._getShaderStage(t),s=this._getShaderStage(n),r=this._getShaderCacheForMaterial(e);return!1===r.has(i)&&(r.add(i),i.usedTimes++),!1===r.has(s)&&(r.add(s),s.usedTimes++),this}remove(e){const t=this.materialCache.get(e);for(const n of t)n.usedTimes--,0===n.usedTimes&&this.shaderCache.delete(n.code);return this.materialCache.delete(e),this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(e){const t=this.materialCache;let n=t.get(e);return void 0===n&&(n=new Set,t.set(e,n)),n}_getShaderStage(e){const t=this.shaderCache;let n=t.get(e);return void 0===n&&(n=new Yr(e),t.set(e,n)),n}}class Yr{constructor(e){this.id=jr++,this.code=e,this.usedTimes=0}}function Kr(e,t,n,i,s,r,a){const o=new Zt,l=new qr,c=new Set,h=[],d=s.isWebGL2,u=s.logarithmicDepthBuffer,p=s.vertexTextures;let m=s.precision;const f={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function g(e){return c.add(e),0===e?"uv":`uv${e}`}return{getParameters:function(r,o,h,v,_){const y=v.fog,x=_.geometry,M=r.isMeshStandardMaterial?v.environment:null,S=(r.isMeshStandardMaterial?n:t).get(r.envMap||M),E=S&&S.mapping===U?S.image.height:null,w=f[r.type];null!==r.precision&&(m=s.getMaxPrecision(r.precision),m!==r.precision&&console.warn("THREE.WebGLProgram.getParameters:",r.precision,"not supported, using",m,"instead."));const b=x.morphAttributes.position||x.morphAttributes.normal||x.morphAttributes.color,T=void 0!==b?b.length:0;let A,R,C,P,L=0;if(void 0!==x.morphAttributes.position&&(L=1),void 0!==x.morphAttributes.normal&&(L=2),void 0!==x.morphAttributes.color&&(L=3),w){const e=Gi[w];A=e.vertexShader,R=e.fragmentShader}else A=r.vertexShader,R=r.fragmentShader,l.update(r),C=l.getVertexShaderID(r),P=l.getFragmentShaderID(r);const I=e.getRenderTarget(),D=!0===_.isInstancedMesh,N=!0===_.isBatchedMesh,O=!!r.map,F=!!r.matcap,z=!!S,k=!!r.aoMap,B=!!r.lightMap,G=!!r.bumpMap,H=!!r.normalMap,V=!!r.displacementMap,W=!!r.emissiveMap,X=!!r.metalnessMap,j=!!r.roughnessMap,q=r.anisotropy>0,Y=r.clearcoat>0,K=r.iridescence>0,J=r.sheen>0,Z=r.transmission>0,$=q&&!!r.anisotropyMap,Q=Y&&!!r.clearcoatMap,ee=Y&&!!r.clearcoatNormalMap,te=Y&&!!r.clearcoatRoughnessMap,ne=K&&!!r.iridescenceMap,ie=K&&!!r.iridescenceThicknessMap,se=J&&!!r.sheenColorMap,ae=J&&!!r.sheenRoughnessMap,oe=!!r.specularMap,le=!!r.specularColorMap,he=!!r.specularIntensityMap,de=Z&&!!r.transmissionMap,ue=Z&&!!r.thicknessMap,pe=!!r.gradientMap,me=!!r.alphaMap,fe=r.alphaTest>0,ge=!!r.alphaHash,ve=!!r.extensions;let _e=0;r.toneMapped&&(null!==I&&!0!==I.isXRRenderTarget||(_e=e.toneMapping));const ye={isWebGL2:d,shaderID:w,shaderType:r.type,shaderName:r.name,vertexShader:A,fragmentShader:R,defines:r.defines,customVertexShaderID:C,customFragmentShaderID:P,isRawShaderMaterial:!0===r.isRawShaderMaterial,glslVersion:r.glslVersion,precision:m,batching:N,instancing:D,instancingColor:D&&null!==_.instanceColor,instancingMorph:D&&null!==_.morphTexture,supportsVertexTextures:p,outputColorSpace:null===I?e.outputColorSpace:!0===I.isXRRenderTarget?I.texture.colorSpace:re,alphaToCoverage:!!r.alphaToCoverage,map:O,matcap:F,envMap:z,envMapMode:z&&S.mapping,envMapCubeUVHeight:E,aoMap:k,lightMap:B,bumpMap:G,normalMap:H,displacementMap:p&&V,emissiveMap:W,normalMapObjectSpace:H&&1===r.normalMapType,normalMapTangentSpace:H&&0===r.normalMapType,metalnessMap:X,roughnessMap:j,anisotropy:q,anisotropyMap:$,clearcoat:Y,clearcoatMap:Q,clearcoatNormalMap:ee,clearcoatRoughnessMap:te,iridescence:K,iridescenceMap:ne,iridescenceThicknessMap:ie,sheen:J,sheenColorMap:se,sheenRoughnessMap:ae,specularMap:oe,specularColorMap:le,specularIntensityMap:he,transmission:Z,transmissionMap:de,thicknessMap:ue,gradientMap:pe,opaque:!1===r.transparent&&1===r.blending&&!1===r.alphaToCoverage,alphaMap:me,alphaTest:fe,alphaHash:ge,combine:r.combine,mapUv:O&&g(r.map.channel),aoMapUv:k&&g(r.aoMap.channel),lightMapUv:B&&g(r.lightMap.channel),bumpMapUv:G&&g(r.bumpMap.channel),normalMapUv:H&&g(r.normalMap.channel),displacementMapUv:V&&g(r.displacementMap.channel),emissiveMapUv:W&&g(r.emissiveMap.channel),metalnessMapUv:X&&g(r.metalnessMap.channel),roughnessMapUv:j&&g(r.roughnessMap.channel),anisotropyMapUv:$&&g(r.anisotropyMap.channel),clearcoatMapUv:Q&&g(r.clearcoatMap.channel),clearcoatNormalMapUv:ee&&g(r.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:te&&g(r.clearcoatRoughnessMap.channel),iridescenceMapUv:ne&&g(r.iridescenceMap.channel),iridescenceThicknessMapUv:ie&&g(r.iridescenceThicknessMap.channel),sheenColorMapUv:se&&g(r.sheenColorMap.channel),sheenRoughnessMapUv:ae&&g(r.sheenRoughnessMap.channel),specularMapUv:oe&&g(r.specularMap.channel),specularColorMapUv:le&&g(r.specularColorMap.channel),specularIntensityMapUv:he&&g(r.specularIntensityMap.channel),transmissionMapUv:de&&g(r.transmissionMap.channel),thicknessMapUv:ue&&g(r.thicknessMap.channel),alphaMapUv:me&&g(r.alphaMap.channel),vertexTangents:!!x.attributes.tangent&&(H||q),vertexColors:r.vertexColors,vertexAlphas:!0===r.vertexColors&&!!x.attributes.color&&4===x.attributes.color.itemSize,pointsUvs:!0===_.isPoints&&!!x.attributes.uv&&(O||me),fog:!!y,useFog:!0===r.fog,fogExp2:!!y&&y.isFogExp2,flatShading:!0===r.flatShading,sizeAttenuation:!0===r.sizeAttenuation,logarithmicDepthBuffer:u,skinning:!0===_.isSkinnedMesh,morphTargets:void 0!==x.morphAttributes.position,morphNormals:void 0!==x.morphAttributes.normal,morphColors:void 0!==x.morphAttributes.color,morphTargetsCount:T,morphTextureStride:L,numDirLights:o.directional.length,numPointLights:o.point.length,numSpotLights:o.spot.length,numSpotLightMaps:o.spotLightMap.length,numRectAreaLights:o.rectArea.length,numHemiLights:o.hemi.length,numDirLightShadows:o.directionalShadowMap.length,numPointLightShadows:o.pointShadowMap.length,numSpotLightShadows:o.spotShadowMap.length,numSpotLightShadowsWithMaps:o.numSpotLightShadowsWithMaps,numLightProbes:o.numLightProbes,numClippingPlanes:a.numPlanes,numClipIntersection:a.numIntersection,dithering:r.dithering,shadowMapEnabled:e.shadowMap.enabled&&h.length>0,shadowMapType:e.shadowMap.type,toneMapping:_e,useLegacyLights:e._useLegacyLights,decodeVideoTexture:O&&!0===r.map.isVideoTexture&&Ye.getTransfer(r.map.colorSpace)===ce,premultipliedAlpha:r.premultipliedAlpha,doubleSided:2===r.side,flipSided:1===r.side,useDepthPacking:r.depthPacking>=0,depthPacking:r.depthPacking||0,index0AttributeName:r.index0AttributeName,extensionDerivatives:ve&&!0===r.extensions.derivatives,extensionFragDepth:ve&&!0===r.extensions.fragDepth,extensionDrawBuffers:ve&&!0===r.extensions.drawBuffers,extensionShaderTextureLOD:ve&&!0===r.extensions.shaderTextureLOD,extensionClipCullDistance:ve&&!0===r.extensions.clipCullDistance&&i.has("WEBGL_clip_cull_distance"),extensionMultiDraw:ve&&!0===r.extensions.multiDraw&&i.has("WEBGL_multi_draw"),rendererExtensionFragDepth:d||i.has("EXT_frag_depth"),rendererExtensionDrawBuffers:d||i.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:d||i.has("EXT_shader_texture_lod"),rendererExtensionParallelShaderCompile:i.has("KHR_parallel_shader_compile"),customProgramCacheKey:r.customProgramCacheKey()};return ye.vertexUv1s=c.has(1),ye.vertexUv2s=c.has(2),ye.vertexUv3s=c.has(3),c.clear(),ye},getProgramCacheKey:function(t){const n=[];if(t.shaderID?n.push(t.shaderID):(n.push(t.customVertexShaderID),n.push(t.customFragmentShaderID)),void 0!==t.defines)for(const e in t.defines)n.push(e),n.push(t.defines[e]);return!1===t.isRawShaderMaterial&&(!function(e,t){e.push(t.precision),e.push(t.outputColorSpace),e.push(t.envMapMode),e.push(t.envMapCubeUVHeight),e.push(t.mapUv),e.push(t.alphaMapUv),e.push(t.lightMapUv),e.push(t.aoMapUv),e.push(t.bumpMapUv),e.push(t.normalMapUv),e.push(t.displacementMapUv),e.push(t.emissiveMapUv),e.push(t.metalnessMapUv),e.push(t.roughnessMapUv),e.push(t.anisotropyMapUv),e.push(t.clearcoatMapUv),e.push(t.clearcoatNormalMapUv),e.push(t.clearcoatRoughnessMapUv),e.push(t.iridescenceMapUv),e.push(t.iridescenceThicknessMapUv),e.push(t.sheenColorMapUv),e.push(t.sheenRoughnessMapUv),e.push(t.specularMapUv),e.push(t.specularColorMapUv),e.push(t.specularIntensityMapUv),e.push(t.transmissionMapUv),e.push(t.thicknessMapUv),e.push(t.combine),e.push(t.fogExp2),e.push(t.sizeAttenuation),e.push(t.morphTargetsCount),e.push(t.morphAttributeCount),e.push(t.numDirLights),e.push(t.numPointLights),e.push(t.numSpotLights),e.push(t.numSpotLightMaps),e.push(t.numHemiLights),e.push(t.numRectAreaLights),e.push(t.numDirLightShadows),e.push(t.numPointLightShadows),e.push(t.numSpotLightShadows),e.push(t.numSpotLightShadowsWithMaps),e.push(t.numLightProbes),e.push(t.shadowMapType),e.push(t.toneMapping),e.push(t.numClippingPlanes),e.push(t.numClipIntersection),e.push(t.depthPacking)}(n,t),function(e,t){o.disableAll(),t.isWebGL2&&o.enable(0);t.supportsVertexTextures&&o.enable(1);t.instancing&&o.enable(2);t.instancingColor&&o.enable(3);t.instancingMorph&&o.enable(4);t.matcap&&o.enable(5);t.envMap&&o.enable(6);t.normalMapObjectSpace&&o.enable(7);t.normalMapTangentSpace&&o.enable(8);t.clearcoat&&o.enable(9);t.iridescence&&o.enable(10);t.alphaTest&&o.enable(11);t.vertexColors&&o.enable(12);t.vertexAlphas&&o.enable(13);t.vertexUv1s&&o.enable(14);t.vertexUv2s&&o.enable(15);t.vertexUv3s&&o.enable(16);t.vertexTangents&&o.enable(17);t.anisotropy&&o.enable(18);t.alphaHash&&o.enable(19);t.batching&&o.enable(20);e.push(o.mask),o.disableAll(),t.fog&&o.enable(0);t.useFog&&o.enable(1);t.flatShading&&o.enable(2);t.logarithmicDepthBuffer&&o.enable(3);t.skinning&&o.enable(4);t.morphTargets&&o.enable(5);t.morphNormals&&o.enable(6);t.morphColors&&o.enable(7);t.premultipliedAlpha&&o.enable(8);t.shadowMapEnabled&&o.enable(9);t.useLegacyLights&&o.enable(10);t.doubleSided&&o.enable(11);t.flipSided&&o.enable(12);t.useDepthPacking&&o.enable(13);t.dithering&&o.enable(14);t.transmission&&o.enable(15);t.sheen&&o.enable(16);t.opaque&&o.enable(17);t.pointsUvs&&o.enable(18);t.decodeVideoTexture&&o.enable(19);t.alphaToCoverage&&o.enable(20);e.push(o.mask)}(n,t),n.push(e.outputColorSpace)),n.push(t.customProgramCacheKey),n.join()},getUniforms:function(e){const t=f[e.type];let n;if(t){const e=Gi[t];n=_i.clone(e.uniforms)}else n=e.uniforms;return n},acquireProgram:function(t,n){let i;for(let e=0,s=h.length;e<s;e++){const t=h[e];if(t.cacheKey===n){i=t,++i.usedTimes;break}}return void 0===i&&(i=new Xr(e,n,t,r),h.push(i)),i},releaseProgram:function(e){if(0==--e.usedTimes){const t=h.indexOf(e);h[t]=h[h.length-1],h.pop(),e.destroy()}},releaseShaderCache:function(e){l.remove(e)},programs:h,dispose:function(){l.dispose()}}}function Jr(){let e=new WeakMap;return{get:function(t){let n=e.get(t);return void 0===n&&(n={},e.set(t,n)),n},remove:function(t){e.delete(t)},update:function(t,n,i){e.get(t)[n]=i},dispose:function(){e=new WeakMap}}}function Zr(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.material.id!==t.material.id?e.material.id-t.material.id:e.z!==t.z?e.z-t.z:e.id-t.id}function $r(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:e.id-t.id}function Qr(){const e=[];let t=0;const n=[],i=[],s=[];function r(n,i,s,r,a,o){let l=e[t];return void 0===l?(l={id:n.id,object:n,geometry:i,material:s,groupOrder:r,renderOrder:n.renderOrder,z:a,group:o},e[t]=l):(l.id=n.id,l.object=n,l.geometry=i,l.material=s,l.groupOrder=r,l.renderOrder=n.renderOrder,l.z=a,l.group=o),t++,l}return{opaque:n,transmissive:i,transparent:s,init:function(){t=0,n.length=0,i.length=0,s.length=0},push:function(e,t,a,o,l,c){const h=r(e,t,a,o,l,c);a.transmission>0?i.push(h):!0===a.transparent?s.push(h):n.push(h)},unshift:function(e,t,a,o,l,c){const h=r(e,t,a,o,l,c);a.transmission>0?i.unshift(h):!0===a.transparent?s.unshift(h):n.unshift(h)},finish:function(){for(let n=t,i=e.length;n<i;n++){const t=e[n];if(null===t.id)break;t.id=null,t.object=null,t.geometry=null,t.material=null,t.group=null}},sort:function(e,t){n.length>1&&n.sort(e||Zr),i.length>1&&i.sort(t||$r),s.length>1&&s.sort(t||$r)}}}function ea(){let e=new WeakMap;return{get:function(t,n){const i=e.get(t);let s;return void 0===i?(s=new Qr,e.set(t,[s])):n>=i.length?(s=new Qr,i.push(s)):s=i[n],s},dispose:function(){e=new WeakMap}}}function ta(){const e={};return{get:function(t){if(void 0!==e[t.id])return e[t.id];let n;switch(t.type){case"DirectionalLight":n={direction:new ht,color:new Pn};break;case"SpotLight":n={position:new ht,direction:new ht,color:new Pn,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":n={position:new ht,color:new Pn,distance:0,decay:0};break;case"HemisphereLight":n={direction:new ht,skyColor:new Pn,groundColor:new Pn};break;case"RectAreaLight":n={color:new Pn,position:new ht,halfWidth:new ht,halfHeight:new ht}}return e[t.id]=n,n}}}let na=0;function ia(e,t){return(t.castShadow?2:0)-(e.castShadow?2:0)+(t.map?1:0)-(e.map?1:0)}function sa(e,t){const n=new ta,i=function(){const e={};return{get:function(t){if(void 0!==e[t.id])return e[t.id];let n;switch(t.type){case"DirectionalLight":case"SpotLight":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Fe};break;case"PointLight":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Fe,shadowCameraNear:1,shadowCameraFar:1e3}}return e[t.id]=n,n}}}(),s={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let l=0;l<9;l++)s.probe.push(new ht);const r=new ht,a=new Bt,o=new Bt;return{setup:function(r,a){let o=0,l=0,c=0;for(let e=0;e<9;e++)s.probe[e].set(0,0,0);let h=0,d=0,u=0,p=0,m=0,f=0,g=0,v=0,_=0,y=0,x=0;r.sort(ia);const M=!0===a?Math.PI:1;for(let e=0,t=r.length;e<t;e++){const t=r[e],a=t.color,S=t.intensity,E=t.distance,w=t.shadow&&t.shadow.map?t.shadow.map.texture:null;if(t.isAmbientLight)o+=a.r*S*M,l+=a.g*S*M,c+=a.b*S*M;else if(t.isLightProbe){for(let e=0;e<9;e++)s.probe[e].addScaledVector(t.sh.coefficients[e],S);x++}else if(t.isDirectionalLight){const e=n.get(t);if(e.color.copy(t.color).multiplyScalar(t.intensity*M),t.castShadow){const e=t.shadow,n=i.get(t);n.shadowBias=e.bias,n.shadowNormalBias=e.normalBias,n.shadowRadius=e.radius,n.shadowMapSize=e.mapSize,s.directionalShadow[h]=n,s.directionalShadowMap[h]=w,s.directionalShadowMatrix[h]=t.shadow.matrix,f++}s.directional[h]=e,h++}else if(t.isSpotLight){const e=n.get(t);e.position.setFromMatrixPosition(t.matrixWorld),e.color.copy(a).multiplyScalar(S*M),e.distance=E,e.coneCos=Math.cos(t.angle),e.penumbraCos=Math.cos(t.angle*(1-t.penumbra)),e.decay=t.decay,s.spot[u]=e;const r=t.shadow;if(t.map&&(s.spotLightMap[_]=t.map,_++,r.updateMatrices(t),t.castShadow&&y++),s.spotLightMatrix[u]=r.matrix,t.castShadow){const e=i.get(t);e.shadowBias=r.bias,e.shadowNormalBias=r.normalBias,e.shadowRadius=r.radius,e.shadowMapSize=r.mapSize,s.spotShadow[u]=e,s.spotShadowMap[u]=w,v++}u++}else if(t.isRectAreaLight){const e=n.get(t);e.color.copy(a).multiplyScalar(S),e.halfWidth.set(.5*t.width,0,0),e.halfHeight.set(0,.5*t.height,0),s.rectArea[p]=e,p++}else if(t.isPointLight){const e=n.get(t);if(e.color.copy(t.color).multiplyScalar(t.intensity*M),e.distance=t.distance,e.decay=t.decay,t.castShadow){const e=t.shadow,n=i.get(t);n.shadowBias=e.bias,n.shadowNormalBias=e.normalBias,n.shadowRadius=e.radius,n.shadowMapSize=e.mapSize,n.shadowCameraNear=e.camera.near,n.shadowCameraFar=e.camera.far,s.pointShadow[d]=n,s.pointShadowMap[d]=w,s.pointShadowMatrix[d]=t.shadow.matrix,g++}s.point[d]=e,d++}else if(t.isHemisphereLight){const e=n.get(t);e.skyColor.copy(t.color).multiplyScalar(S*M),e.groundColor.copy(t.groundColor).multiplyScalar(S*M),s.hemi[m]=e,m++}}p>0&&(t.isWebGL2?!0===e.has("OES_texture_float_linear")?(s.rectAreaLTC1=Bi.LTC_FLOAT_1,s.rectAreaLTC2=Bi.LTC_FLOAT_2):(s.rectAreaLTC1=Bi.LTC_HALF_1,s.rectAreaLTC2=Bi.LTC_HALF_2):!0===e.has("OES_texture_float_linear")?(s.rectAreaLTC1=Bi.LTC_FLOAT_1,s.rectAreaLTC2=Bi.LTC_FLOAT_2):!0===e.has("OES_texture_half_float_linear")?(s.rectAreaLTC1=Bi.LTC_HALF_1,s.rectAreaLTC2=Bi.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),s.ambient[0]=o,s.ambient[1]=l,s.ambient[2]=c;const S=s.hash;S.directionalLength===h&&S.pointLength===d&&S.spotLength===u&&S.rectAreaLength===p&&S.hemiLength===m&&S.numDirectionalShadows===f&&S.numPointShadows===g&&S.numSpotShadows===v&&S.numSpotMaps===_&&S.numLightProbes===x||(s.directional.length=h,s.spot.length=u,s.rectArea.length=p,s.point.length=d,s.hemi.length=m,s.directionalShadow.length=f,s.directionalShadowMap.length=f,s.pointShadow.length=g,s.pointShadowMap.length=g,s.spotShadow.length=v,s.spotShadowMap.length=v,s.directionalShadowMatrix.length=f,s.pointShadowMatrix.length=g,s.spotLightMatrix.length=v+_-y,s.spotLightMap.length=_,s.numSpotLightShadowsWithMaps=y,s.numLightProbes=x,S.directionalLength=h,S.pointLength=d,S.spotLength=u,S.rectAreaLength=p,S.hemiLength=m,S.numDirectionalShadows=f,S.numPointShadows=g,S.numSpotShadows=v,S.numSpotMaps=_,S.numLightProbes=x,s.version=na++)},setupView:function(e,t){let n=0,i=0,l=0,c=0,h=0;const d=t.matrixWorldInverse;for(let u=0,p=e.length;u<p;u++){const t=e[u];if(t.isDirectionalLight){const e=s.directional[n];e.direction.setFromMatrixPosition(t.matrixWorld),r.setFromMatrixPosition(t.target.matrixWorld),e.direction.sub(r),e.direction.transformDirection(d),n++}else if(t.isSpotLight){const e=s.spot[l];e.position.setFromMatrixPosition(t.matrixWorld),e.position.applyMatrix4(d),e.direction.setFromMatrixPosition(t.matrixWorld),r.setFromMatrixPosition(t.target.matrixWorld),e.direction.sub(r),e.direction.transformDirection(d),l++}else if(t.isRectAreaLight){const e=s.rectArea[c];e.position.setFromMatrixPosition(t.matrixWorld),e.position.applyMatrix4(d),o.identity(),a.copy(t.matrixWorld),a.premultiply(d),o.extractRotation(a),e.halfWidth.set(.5*t.width,0,0),e.halfHeight.set(0,.5*t.height,0),e.halfWidth.applyMatrix4(o),e.halfHeight.applyMatrix4(o),c++}else if(t.isPointLight){const e=s.point[i];e.position.setFromMatrixPosition(t.matrixWorld),e.position.applyMatrix4(d),i++}else if(t.isHemisphereLight){const e=s.hemi[h];e.direction.setFromMatrixPosition(t.matrixWorld),e.direction.transformDirection(d),h++}}},state:s}}function ra(e,t){const n=new sa(e,t),i=[],s=[];return{init:function(){i.length=0,s.length=0},state:{lightsArray:i,shadowsArray:s,lights:n},setupLights:function(e){n.setup(i,e)},setupLightsView:function(e){n.setupView(i,e)},pushLight:function(e){i.push(e)},pushShadow:function(e){s.push(e)}}}function aa(e,t){let n=new WeakMap;return{get:function(i,s=0){const r=n.get(i);let a;return void 0===r?(a=new ra(e,t),n.set(i,[a])):s>=r.length?(a=new ra(e,t),r.push(a)):a=r[s],a},dispose:function(){n=new WeakMap}}}class oa extends In{constructor(e){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=3200,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(e)}copy(e){return super.copy(e),this.depthPacking=e.depthPacking,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this}}class la extends In{constructor(e){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(e)}copy(e){return super.copy(e),this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this}}function ca(e,t,n){let i=new Ni;const s=new Fe,r=new Fe,a=new st,o=new oa({depthPacking:3201}),l=new la,u={},p=n.maxTextureSize,m={[c]:1,[h]:0,[d]:2},f=new yi({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new Fe},radius:{value:4}},vertexShader:"void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"}),g=f.clone();g.defines.HORIZONTAL_PASS=1;const v=new Yn;v.setAttribute("position",new Fn(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const _=new ui(v,f),y=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=1;let x=this.type;function M(n,i){const r=t.update(_);f.defines.VSM_SAMPLES!==n.blurSamples&&(f.defines.VSM_SAMPLES=n.blurSamples,g.defines.VSM_SAMPLES=n.blurSamples,f.needsUpdate=!0,g.needsUpdate=!0),null===n.mapPass&&(n.mapPass=new at(s.x,s.y)),f.uniforms.shadow_pass.value=n.map.texture,f.uniforms.resolution.value=n.mapSize,f.uniforms.radius.value=n.radius,e.setRenderTarget(n.mapPass),e.clear(),e.renderBufferDirect(i,null,r,f,_,null),g.uniforms.shadow_pass.value=n.mapPass.texture,g.uniforms.resolution.value=n.mapSize,g.uniforms.radius.value=n.radius,e.setRenderTarget(n.map),e.clear(),e.renderBufferDirect(i,null,r,g,_,null)}function S(t,n,i,s){let r=null;const a=!0===i.isPointLight?t.customDistanceMaterial:t.customDepthMaterial;if(void 0!==a)r=a;else if(r=!0===i.isPointLight?l:o,e.localClippingEnabled&&!0===n.clipShadows&&Array.isArray(n.clippingPlanes)&&0!==n.clippingPlanes.length||n.displacementMap&&0!==n.displacementScale||n.alphaMap&&n.alphaTest>0||n.map&&n.alphaTest>0){const e=r.uuid,t=n.uuid;let i=u[e];void 0===i&&(i={},u[e]=i);let s=i[t];void 0===s&&(s=r.clone(),i[t]=s,n.addEventListener("dispose",w)),r=s}if(r.visible=n.visible,r.wireframe=n.wireframe,r.side=3===s?null!==n.shadowSide?n.shadowSide:n.side:null!==n.shadowSide?n.shadowSide:m[n.side],r.alphaMap=n.alphaMap,r.alphaTest=n.alphaTest,r.map=n.map,r.clipShadows=n.clipShadows,r.clippingPlanes=n.clippingPlanes,r.clipIntersection=n.clipIntersection,r.displacementMap=n.displacementMap,r.displacementScale=n.displacementScale,r.displacementBias=n.displacementBias,r.wireframeLinewidth=n.wireframeLinewidth,r.linewidth=n.linewidth,!0===i.isPointLight&&!0===r.isMeshDistanceMaterial){e.properties.get(r).light=i}return r}function E(n,s,r,a,o){if(!1===n.visible)return;if(n.layers.test(s.layers)&&(n.isMesh||n.isLine||n.isPoints)&&(n.castShadow||n.receiveShadow&&3===o)&&(!n.frustumCulled||i.intersectsObject(n))){n.modelViewMatrix.multiplyMatrices(r.matrixWorldInverse,n.matrixWorld);const i=t.update(n),l=n.material;if(Array.isArray(l)){const t=i.groups;for(let c=0,h=t.length;c<h;c++){const h=t[c],d=l[h.materialIndex];if(d&&d.visible){const t=S(n,d,a,o);n.onBeforeShadow(e,n,s,r,i,t,h),e.renderBufferDirect(r,null,i,t,n,h),n.onAfterShadow(e,n,s,r,i,t,h)}}}else if(l.visible){const t=S(n,l,a,o);n.onBeforeShadow(e,n,s,r,i,t,null),e.renderBufferDirect(r,null,i,t,n,null),n.onAfterShadow(e,n,s,r,i,t,null)}}const l=n.children;for(let e=0,t=l.length;e<t;e++)E(l[e],s,r,a,o)}function w(e){e.target.removeEventListener("dispose",w);for(const t in u){const n=u[t],i=e.target.uuid;if(i in n){n[i].dispose(),delete n[i]}}}this.render=function(t,n,o){if(!1===y.enabled)return;if(!1===y.autoUpdate&&!1===y.needsUpdate)return;if(0===t.length)return;const l=e.getRenderTarget(),c=e.getActiveCubeFace(),h=e.getActiveMipmapLevel(),d=e.state;d.setBlending(0),d.buffers.color.setClear(1,1,1,1),d.buffers.depth.setTest(!0),d.setScissorTest(!1);const u=3!==x&&3===this.type,m=3===x&&3!==this.type;for(let f=0,g=t.length;f<g;f++){const l=t[f],c=l.shadow;if(void 0===c){console.warn("THREE.WebGLShadowMap:",l,"has no shadow.");continue}if(!1===c.autoUpdate&&!1===c.needsUpdate)continue;s.copy(c.mapSize);const h=c.getFrameExtents();if(s.multiply(h),r.copy(c.mapSize),(s.x>p||s.y>p)&&(s.x>p&&(r.x=Math.floor(p/h.x),s.x=r.x*h.x,c.mapSize.x=r.x),s.y>p&&(r.y=Math.floor(p/h.y),s.y=r.y*h.y,c.mapSize.y=r.y)),null===c.map||!0===u||!0===m){const e=3!==this.type?{minFilter:O,magFilter:O}:{};null!==c.map&&c.map.dispose(),c.map=new at(s.x,s.y,e),c.map.texture.name=l.name+".shadowMap",c.camera.updateProjectionMatrix()}e.setRenderTarget(c.map),e.clear();const g=c.getViewportCount();for(let e=0;e<g;e++){const t=c.getViewport(e);a.set(r.x*t.x,r.y*t.y,r.x*t.z,r.y*t.w),d.viewport(a),c.updateMatrices(l,e),i=c.getFrustum(),E(n,o,c.camera,l,this.type)}!0!==c.isPointLightShadow&&3===this.type&&M(c,o),c.needsUpdate=!1}x=this.type,y.needsUpdate=!1,e.setRenderTarget(l,c,h)}}function ha(e,t,n){const i=n.isWebGL2;const s=new function(){let t=!1;const n=new st;let i=null;const s=new st(0,0,0,0);return{setMask:function(n){i===n||t||(e.colorMask(n,n,n,n),i=n)},setLocked:function(e){t=e},setClear:function(t,i,r,a,o){!0===o&&(t*=a,i*=a,r*=a),n.set(t,i,r,a),!1===s.equals(n)&&(e.clearColor(t,i,r,a),s.copy(n))},reset:function(){t=!1,i=null,s.set(-1,0,0,0)}}},r=new function(){let t=!1,n=null,i=null,s=null;return{setTest:function(t){t?ae(e.DEPTH_TEST):oe(e.DEPTH_TEST)},setMask:function(i){n===i||t||(e.depthMask(i),n=i)},setFunc:function(t){if(i!==t){switch(t){case 0:e.depthFunc(e.NEVER);break;case 1:e.depthFunc(e.ALWAYS);break;case 2:e.depthFunc(e.LESS);break;case 3:default:e.depthFunc(e.LEQUAL);break;case 4:e.depthFunc(e.EQUAL);break;case 5:e.depthFunc(e.GEQUAL);break;case 6:e.depthFunc(e.GREATER);break;case 7:e.depthFunc(e.NOTEQUAL)}i=t}},setLocked:function(e){t=e},setClear:function(t){s!==t&&(e.clearDepth(t),s=t)},reset:function(){t=!1,n=null,i=null,s=null}}},a=new function(){let t=!1,n=null,i=null,s=null,r=null,a=null,o=null,l=null,c=null;return{setTest:function(n){t||(n?ae(e.STENCIL_TEST):oe(e.STENCIL_TEST))},setMask:function(i){n===i||t||(e.stencilMask(i),n=i)},setFunc:function(t,n,a){i===t&&s===n&&r===a||(e.stencilFunc(t,n,a),i=t,s=n,r=a)},setOp:function(t,n,i){a===t&&o===n&&l===i||(e.stencilOp(t,n,i),a=t,o=n,l=i)},setLocked:function(e){t=e},setClear:function(t){c!==t&&(e.clearStencil(t),c=t)},reset:function(){t=!1,n=null,i=null,s=null,r=null,a=null,o=null,l=null,c=null}}},o=new WeakMap,l=new WeakMap;let c={},h={},d=new WeakMap,P=[],L=null,U=!1,I=null,D=null,N=null,O=null,F=null,z=null,k=null,B=new Pn(0,0,0),G=0,H=!1,V=null,W=null,X=null,j=null,q=null;const Y=e.getParameter(e.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let K=!1,J=0;const Z=e.getParameter(e.VERSION);-1!==Z.indexOf("WebGL")?(J=parseFloat(/^WebGL (\d)/.exec(Z)[1]),K=J>=1):-1!==Z.indexOf("OpenGL ES")&&(J=parseFloat(/^OpenGL ES (\d)/.exec(Z)[1]),K=J>=2);let $=null,Q={};const ee=e.getParameter(e.SCISSOR_BOX),te=e.getParameter(e.VIEWPORT),ne=(new st).fromArray(ee),ie=(new st).fromArray(te);function se(t,n,s,r){const a=new Uint8Array(4),o=e.createTexture();e.bindTexture(t,o),e.texParameteri(t,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(t,e.TEXTURE_MAG_FILTER,e.NEAREST);for(let l=0;l<s;l++)!i||t!==e.TEXTURE_3D&&t!==e.TEXTURE_2D_ARRAY?e.texImage2D(n+l,0,e.RGBA,1,1,0,e.RGBA,e.UNSIGNED_BYTE,a):e.texImage3D(n,0,e.RGBA,1,1,r,0,e.RGBA,e.UNSIGNED_BYTE,a);return o}const re={};function ae(t){!0!==c[t]&&(e.enable(t),c[t]=!0)}function oe(t){!1!==c[t]&&(e.disable(t),c[t]=!1)}re[e.TEXTURE_2D]=se(e.TEXTURE_2D,e.TEXTURE_2D,1),re[e.TEXTURE_CUBE_MAP]=se(e.TEXTURE_CUBE_MAP,e.TEXTURE_CUBE_MAP_POSITIVE_X,6),i&&(re[e.TEXTURE_2D_ARRAY]=se(e.TEXTURE_2D_ARRAY,e.TEXTURE_2D_ARRAY,1,1),re[e.TEXTURE_3D]=se(e.TEXTURE_3D,e.TEXTURE_3D,1,1)),s.setClear(0,0,0,1),r.setClear(1),a.setClear(0),ae(e.DEPTH_TEST),r.setFunc(3),de(!1),ue(1),ae(e.CULL_FACE),he(0);const le={[u]:e.FUNC_ADD,[p]:e.FUNC_SUBTRACT,[m]:e.FUNC_REVERSE_SUBTRACT};if(i)le[103]=e.MIN,le[104]=e.MAX;else{const e=t.get("EXT_blend_minmax");null!==e&&(le[103]=e.MIN_EXT,le[104]=e.MAX_EXT)}const ce={[f]:e.ZERO,[g]:e.ONE,[v]:e.SRC_COLOR,[y]:e.SRC_ALPHA,[b]:e.SRC_ALPHA_SATURATE,[E]:e.DST_COLOR,[M]:e.DST_ALPHA,[_]:e.ONE_MINUS_SRC_COLOR,[x]:e.ONE_MINUS_SRC_ALPHA,[w]:e.ONE_MINUS_DST_COLOR,[S]:e.ONE_MINUS_DST_ALPHA,[T]:e.CONSTANT_COLOR,[A]:e.ONE_MINUS_CONSTANT_COLOR,[R]:e.CONSTANT_ALPHA,[C]:e.ONE_MINUS_CONSTANT_ALPHA};function he(t,n,i,s,r,a,o,l,c,h){if(0!==t){if(!1===U&&(ae(e.BLEND),U=!0),5===t)r=r||n,a=a||i,o=o||s,n===D&&r===F||(e.blendEquationSeparate(le[n],le[r]),D=n,F=r),i===N&&s===O&&a===z&&o===k||(e.blendFuncSeparate(ce[i],ce[s],ce[a],ce[o]),N=i,O=s,z=a,k=o),!1!==l.equals(B)&&c===G||(e.blendColor(l.r,l.g,l.b,c),B.copy(l),G=c),I=t,H=!1;else if(t!==I||h!==H){if(D===u&&F===u||(e.blendEquation(e.FUNC_ADD),D=u,F=u),h)switch(t){case 1:e.blendFuncSeparate(e.ONE,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA);break;case 2:e.blendFunc(e.ONE,e.ONE);break;case 3:e.blendFuncSeparate(e.ZERO,e.ONE_MINUS_SRC_COLOR,e.ZERO,e.ONE);break;case 4:e.blendFuncSeparate(e.ZERO,e.SRC_COLOR,e.ZERO,e.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",t)}else switch(t){case 1:e.blendFuncSeparate(e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA);break;case 2:e.blendFunc(e.SRC_ALPHA,e.ONE);break;case 3:e.blendFuncSeparate(e.ZERO,e.ONE_MINUS_SRC_COLOR,e.ZERO,e.ONE);break;case 4:e.blendFunc(e.ZERO,e.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",t)}N=null,O=null,z=null,k=null,B.set(0,0,0),G=0,I=t,H=h}}else!0===U&&(oe(e.BLEND),U=!1)}function de(t){V!==t&&(t?e.frontFace(e.CW):e.frontFace(e.CCW),V=t)}function ue(t){0!==t?(ae(e.CULL_FACE),t!==W&&(1===t?e.cullFace(e.BACK):2===t?e.cullFace(e.FRONT):e.cullFace(e.FRONT_AND_BACK))):oe(e.CULL_FACE),W=t}function pe(t,n,i){t?(ae(e.POLYGON_OFFSET_FILL),j===n&&q===i||(e.polygonOffset(n,i),j=n,q=i)):oe(e.POLYGON_OFFSET_FILL)}return{buffers:{color:s,depth:r,stencil:a},enable:ae,disable:oe,bindFramebuffer:function(t,n){return h[t]!==n&&(e.bindFramebuffer(t,n),h[t]=n,i&&(t===e.DRAW_FRAMEBUFFER&&(h[e.FRAMEBUFFER]=n),t===e.FRAMEBUFFER&&(h[e.DRAW_FRAMEBUFFER]=n)),!0)},drawBuffers:function(i,s){let r=P,a=!1;if(i){r=d.get(s),void 0===r&&(r=[],d.set(s,r));const t=i.textures;if(r.length!==t.length||r[0]!==e.COLOR_ATTACHMENT0){for(let n=0,i=t.length;n<i;n++)r[n]=e.COLOR_ATTACHMENT0+n;r.length=t.length,a=!0}}else r[0]!==e.BACK&&(r[0]=e.BACK,a=!0);if(a)if(n.isWebGL2)e.drawBuffers(r);else{if(!0!==t.has("WEBGL_draw_buffers"))throw new Error("THREE.WebGLState: Usage of gl.drawBuffers() require WebGL2 or WEBGL_draw_buffers extension");t.get("WEBGL_draw_buffers").drawBuffersWEBGL(r)}},useProgram:function(t){return L!==t&&(e.useProgram(t),L=t,!0)},setBlending:he,setMaterial:function(t,n){2===t.side?oe(e.CULL_FACE):ae(e.CULL_FACE);let i=1===t.side;n&&(i=!i),de(i),1===t.blending&&!1===t.transparent?he(0):he(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.blendColor,t.blendAlpha,t.premultipliedAlpha),r.setFunc(t.depthFunc),r.setTest(t.depthTest),r.setMask(t.depthWrite),s.setMask(t.colorWrite);const o=t.stencilWrite;a.setTest(o),o&&(a.setMask(t.stencilWriteMask),a.setFunc(t.stencilFunc,t.stencilRef,t.stencilFuncMask),a.setOp(t.stencilFail,t.stencilZFail,t.stencilZPass)),pe(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits),!0===t.alphaToCoverage?ae(e.SAMPLE_ALPHA_TO_COVERAGE):oe(e.SAMPLE_ALPHA_TO_COVERAGE)},setFlipSided:de,setCullFace:ue,setLineWidth:function(t){t!==X&&(K&&e.lineWidth(t),X=t)},setPolygonOffset:pe,setScissorTest:function(t){t?ae(e.SCISSOR_TEST):oe(e.SCISSOR_TEST)},activeTexture:function(t){void 0===t&&(t=e.TEXTURE0+Y-1),$!==t&&(e.activeTexture(t),$=t)},bindTexture:function(t,n,i){void 0===i&&(i=null===$?e.TEXTURE0+Y-1:$);let s=Q[i];void 0===s&&(s={type:void 0,texture:void 0},Q[i]=s),s.type===t&&s.texture===n||($!==i&&(e.activeTexture(i),$=i),e.bindTexture(t,n||re[t]),s.type=t,s.texture=n)},unbindTexture:function(){const t=Q[$];void 0!==t&&void 0!==t.type&&(e.bindTexture(t.type,null),t.type=void 0,t.texture=void 0)},compressedTexImage2D:function(){try{e.compressedTexImage2D.apply(e,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},compressedTexImage3D:function(){try{e.compressedTexImage3D.apply(e,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage2D:function(){try{e.texImage2D.apply(e,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage3D:function(){try{e.texImage3D.apply(e,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},updateUBOMapping:function(t,n){let i=l.get(n);void 0===i&&(i=new WeakMap,l.set(n,i));let s=i.get(t);void 0===s&&(s=e.getUniformBlockIndex(n,t.name),i.set(t,s))},uniformBlockBinding:function(t,n){const i=l.get(n).get(t);o.get(n)!==i&&(e.uniformBlockBinding(n,i,t.__bindingPointIndex),o.set(n,i))},texStorage2D:function(){try{e.texStorage2D.apply(e,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texStorage3D:function(){try{e.texStorage3D.apply(e,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texSubImage2D:function(){try{e.texSubImage2D.apply(e,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texSubImage3D:function(){try{e.texSubImage3D.apply(e,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},compressedTexSubImage2D:function(){try{e.compressedTexSubImage2D.apply(e,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},compressedTexSubImage3D:function(){try{e.compressedTexSubImage3D.apply(e,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},scissor:function(t){!1===ne.equals(t)&&(e.scissor(t.x,t.y,t.z,t.w),ne.copy(t))},viewport:function(t){!1===ie.equals(t)&&(e.viewport(t.x,t.y,t.z,t.w),ie.copy(t))},reset:function(){e.disable(e.BLEND),e.disable(e.CULL_FACE),e.disable(e.DEPTH_TEST),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SCISSOR_TEST),e.disable(e.STENCIL_TEST),e.disable(e.SAMPLE_ALPHA_TO_COVERAGE),e.blendEquation(e.FUNC_ADD),e.blendFunc(e.ONE,e.ZERO),e.blendFuncSeparate(e.ONE,e.ZERO,e.ONE,e.ZERO),e.blendColor(0,0,0,0),e.colorMask(!0,!0,!0,!0),e.clearColor(0,0,0,0),e.depthMask(!0),e.depthFunc(e.LESS),e.clearDepth(1),e.stencilMask(4294967295),e.stencilFunc(e.ALWAYS,0,4294967295),e.stencilOp(e.KEEP,e.KEEP,e.KEEP),e.clearStencil(0),e.cullFace(e.BACK),e.frontFace(e.CCW),e.polygonOffset(0,0),e.activeTexture(e.TEXTURE0),e.bindFramebuffer(e.FRAMEBUFFER,null),!0===i&&(e.bindFramebuffer(e.DRAW_FRAMEBUFFER,null),e.bindFramebuffer(e.READ_FRAMEBUFFER,null)),e.useProgram(null),e.lineWidth(1),e.scissor(0,0,e.canvas.width,e.canvas.height),e.viewport(0,0,e.canvas.width,e.canvas.height),c={},$=null,Q={},h={},d=new WeakMap,P=[],L=null,U=!1,I=null,D=null,N=null,O=null,F=null,z=null,k=null,B=new Pn(0,0,0),G=0,H=!1,V=null,W=null,X=null,j=null,q=null,ne.set(0,0,e.canvas.width,e.canvas.height),ie.set(0,0,e.canvas.width,e.canvas.height),s.reset(),r.reset(),a.reset()}}}function da(e,t,n,i,s,r,a){const o=s.isWebGL2,l=t.has("WEBGL_multisampled_render_to_texture")?t.get("WEBGL_multisampled_render_to_texture"):null,c="undefined"!=typeof navigator&&/OculusBrowser/g.test(navigator.userAgent),h=new Fe,d=new WeakMap;let u;const p=new WeakMap;let m=!1;try{m="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d")}catch(oe){}function f(e,t){return m?new OffscreenCanvas(e,t):Ge("canvas")}function g(e,t,n,i){let s=1;const r=ae(e);if((r.width>i||r.height>i)&&(s=i/Math.max(r.width,r.height)),s<1||!0===t){if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap||"undefined"!=typeof VideoFrame&&e instanceof VideoFrame){const i=t?Ie:Math.floor,a=i(s*r.width),o=i(s*r.height);void 0===u&&(u=f(a,o));const l=n?f(a,o):u;l.width=a,l.height=o;return l.getContext("2d").drawImage(e,0,0,a,o),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+r.width+"x"+r.height+") to ("+a+"x"+o+")."),l}return"data"in e&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+r.width+"x"+r.height+")."),e}return e}function v(e){const t=ae(e);return Ue(t.width)&&Ue(t.height)}function _(e,t){return e.generateMipmaps&&t&&e.minFilter!==O&&e.minFilter!==k}function y(t){e.generateMipmap(t)}function x(n,i,s,r,a=!1){if(!1===o)return i;if(null!==n){if(void 0!==e[n])return e[n];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+n+"'")}let l=i;if(i===e.RED&&(s===e.FLOAT&&(l=e.R32F),s===e.HALF_FLOAT&&(l=e.R16F),s===e.UNSIGNED_BYTE&&(l=e.R8)),i===e.RED_INTEGER&&(s===e.UNSIGNED_BYTE&&(l=e.R8UI),s===e.UNSIGNED_SHORT&&(l=e.R16UI),s===e.UNSIGNED_INT&&(l=e.R32UI),s===e.BYTE&&(l=e.R8I),s===e.SHORT&&(l=e.R16I),s===e.INT&&(l=e.R32I)),i===e.RG&&(s===e.FLOAT&&(l=e.RG32F),s===e.HALF_FLOAT&&(l=e.RG16F),s===e.UNSIGNED_BYTE&&(l=e.RG8)),i===e.RG_INTEGER&&(s===e.UNSIGNED_BYTE&&(l=e.RG8UI),s===e.UNSIGNED_SHORT&&(l=e.RG16UI),s===e.UNSIGNED_INT&&(l=e.RG32UI),s===e.BYTE&&(l=e.RG8I),s===e.SHORT&&(l=e.RG16I),s===e.INT&&(l=e.RG32I)),i===e.RGBA){const t=a?le:Ye.getTransfer(r);s===e.FLOAT&&(l=e.RGBA32F),s===e.HALF_FLOAT&&(l=e.RGBA16F),s===e.UNSIGNED_BYTE&&(l=t===ce?e.SRGB8_ALPHA8:e.RGBA8),s===e.UNSIGNED_SHORT_4_4_4_4&&(l=e.RGBA4),s===e.UNSIGNED_SHORT_5_5_5_1&&(l=e.RGB5_A1)}return l!==e.R16F&&l!==e.R32F&&l!==e.RG16F&&l!==e.RG32F&&l!==e.RGBA16F&&l!==e.RGBA32F||t.get("EXT_color_buffer_float"),l}function M(e,t,n){return!0===_(e,n)||e.isFramebufferTexture&&e.minFilter!==O&&e.minFilter!==k?Math.log2(Math.max(t.width,t.height))+1:void 0!==e.mipmaps&&e.mipmaps.length>0?e.mipmaps.length:e.isCompressedTexture&&Array.isArray(e.image)?t.mipmaps.length:1}function S(t){return t===O||1004===t||t===z?e.NEAREST:e.LINEAR}function E(e){const t=e.target;t.removeEventListener("dispose",E),function(e){const t=i.get(e);if(void 0===t.__webglInit)return;const n=e.source,s=p.get(n);if(s){const i=s[t.__cacheKey];i.usedTimes--,0===i.usedTimes&&b(e),0===Object.keys(s).length&&p.delete(n)}i.remove(e)}(t),t.isVideoTexture&&d.delete(t)}function w(t){const n=t.target;n.removeEventListener("dispose",w),function(t){const n=i.get(t);t.depthTexture&&t.depthTexture.dispose();if(t.isWebGLCubeRenderTarget)for(let i=0;i<6;i++){if(Array.isArray(n.__webglFramebuffer[i]))for(let t=0;t<n.__webglFramebuffer[i].length;t++)e.deleteFramebuffer(n.__webglFramebuffer[i][t]);else e.deleteFramebuffer(n.__webglFramebuffer[i]);n.__webglDepthbuffer&&e.deleteRenderbuffer(n.__webglDepthbuffer[i])}else{if(Array.isArray(n.__webglFramebuffer))for(let t=0;t<n.__webglFramebuffer.length;t++)e.deleteFramebuffer(n.__webglFramebuffer[t]);else e.deleteFramebuffer(n.__webglFramebuffer);if(n.__webglDepthbuffer&&e.deleteRenderbuffer(n.__webglDepthbuffer),n.__webglMultisampledFramebuffer&&e.deleteFramebuffer(n.__webglMultisampledFramebuffer),n.__webglColorRenderbuffer)for(let t=0;t<n.__webglColorRenderbuffer.length;t++)n.__webglColorRenderbuffer[t]&&e.deleteRenderbuffer(n.__webglColorRenderbuffer[t]);n.__webglDepthRenderbuffer&&e.deleteRenderbuffer(n.__webglDepthRenderbuffer)}const s=t.textures;for(let r=0,o=s.length;r<o;r++){const t=i.get(s[r]);t.__webglTexture&&(e.deleteTexture(t.__webglTexture),a.memory.textures--),i.remove(s[r])}i.remove(t)}(n)}function b(t){const n=i.get(t);e.deleteTexture(n.__webglTexture);const s=t.source;delete p.get(s)[n.__cacheKey],a.memory.textures--}let T=0;function A(t,s){const r=i.get(t);if(t.isVideoTexture&&function(e){const t=a.render.frame;d.get(e)!==t&&(d.set(e,t),e.update())}(t),!1===t.isRenderTargetTexture&&t.version>0&&r.__version!==t.version){const e=t.image;if(null===e)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else{if(!1!==e.complete)return void W(r,t,s);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}n.bindTexture(e.TEXTURE_2D,r.__webglTexture,e.TEXTURE0+s)}const R={[I]:e.REPEAT,[D]:e.CLAMP_TO_EDGE,[N]:e.MIRRORED_REPEAT},C={[O]:e.NEAREST,[F]:e.NEAREST_MIPMAP_NEAREST,[z]:e.NEAREST_MIPMAP_LINEAR,[k]:e.LINEAR,[B]:e.LINEAR_MIPMAP_NEAREST,[G]:e.LINEAR_MIPMAP_LINEAR},P={[pe]:e.NEVER,[xe]:e.ALWAYS,[me]:e.LESS,[ge]:e.LEQUAL,[fe]:e.EQUAL,[ye]:e.GEQUAL,[ve]:e.GREATER,[_e]:e.NOTEQUAL};function L(n,r,a){if(r.type!==j||!1!==t.has("OES_texture_float_linear")||r.magFilter!==k&&r.magFilter!==B&&r.magFilter!==z&&r.magFilter!==G&&r.minFilter!==k&&r.minFilter!==B&&r.minFilter!==z&&r.minFilter!==G||console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."),a?(e.texParameteri(n,e.TEXTURE_WRAP_S,R[r.wrapS]),e.texParameteri(n,e.TEXTURE_WRAP_T,R[r.wrapT]),n!==e.TEXTURE_3D&&n!==e.TEXTURE_2D_ARRAY||e.texParameteri(n,e.TEXTURE_WRAP_R,R[r.wrapR]),e.texParameteri(n,e.TEXTURE_MAG_FILTER,C[r.magFilter]),e.texParameteri(n,e.TEXTURE_MIN_FILTER,C[r.minFilter])):(e.texParameteri(n,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(n,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),n!==e.TEXTURE_3D&&n!==e.TEXTURE_2D_ARRAY||e.texParameteri(n,e.TEXTURE_WRAP_R,e.CLAMP_TO_EDGE),r.wrapS===D&&r.wrapT===D||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),e.texParameteri(n,e.TEXTURE_MAG_FILTER,S(r.magFilter)),e.texParameteri(n,e.TEXTURE_MIN_FILTER,S(r.minFilter)),r.minFilter!==O&&r.minFilter!==k&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),r.compareFunction&&(e.texParameteri(n,e.TEXTURE_COMPARE_MODE,e.COMPARE_REF_TO_TEXTURE),e.texParameteri(n,e.TEXTURE_COMPARE_FUNC,P[r.compareFunction])),!0===t.has("EXT_texture_filter_anisotropic")){if(r.magFilter===O)return;if(r.minFilter!==z&&r.minFilter!==G)return;if(r.type===j&&!1===t.has("OES_texture_float_linear"))return;if(!1===o&&r.type===q&&!1===t.has("OES_texture_half_float_linear"))return;if(r.anisotropy>1||i.get(r).__currentAnisotropy){const a=t.get("EXT_texture_filter_anisotropic");e.texParameterf(n,a.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(r.anisotropy,s.getMaxAnisotropy())),i.get(r).__currentAnisotropy=r.anisotropy}}}function U(t,n){let i=!1;void 0===t.__webglInit&&(t.__webglInit=!0,n.addEventListener("dispose",E));const s=n.source;let r=p.get(s);void 0===r&&(r={},p.set(s,r));const o=function(e){const t=[];return t.push(e.wrapS),t.push(e.wrapT),t.push(e.wrapR||0),t.push(e.magFilter),t.push(e.minFilter),t.push(e.anisotropy),t.push(e.internalFormat),t.push(e.format),t.push(e.type),t.push(e.generateMipmaps),t.push(e.premultiplyAlpha),t.push(e.flipY),t.push(e.unpackAlignment),t.push(e.colorSpace),t.join()}(n);if(o!==t.__cacheKey){void 0===r[o]&&(r[o]={texture:e.createTexture(),usedTimes:0},a.memory.textures++,i=!0),r[o].usedTimes++;const s=r[t.__cacheKey];void 0!==s&&(r[t.__cacheKey].usedTimes--,0===s.usedTimes&&b(n)),t.__cacheKey=o,t.__webglTexture=r[o].texture}return i}function W(t,a,l){let c=e.TEXTURE_2D;(a.isDataArrayTexture||a.isCompressedArrayTexture)&&(c=e.TEXTURE_2D_ARRAY),a.isData3DTexture&&(c=e.TEXTURE_3D);const h=U(t,a),d=a.source;n.bindTexture(c,t.__webglTexture,e.TEXTURE0+l);const u=i.get(d);if(d.version!==u.__version||!0===h){n.activeTexture(e.TEXTURE0+l);const t=Ye.getPrimaries(Ye.workingColorSpace),i=a.colorSpace===ie?null:Ye.getPrimaries(a.colorSpace),p=a.colorSpace===ie||t===i?e.NONE:e.BROWSER_DEFAULT_WEBGL;e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,a.flipY),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,a.premultiplyAlpha),e.pixelStorei(e.UNPACK_ALIGNMENT,a.unpackAlignment),e.pixelStorei(e.UNPACK_COLORSPACE_CONVERSION_WEBGL,p);const m=function(e){return!o&&(e.wrapS!==D||e.wrapT!==D||e.minFilter!==O&&e.minFilter!==k)}(a)&&!1===v(a.image);let f=g(a.image,m,!1,s.maxTextureSize);f=se(a,f);const S=v(f)||o,E=r.convert(a.format,a.colorSpace);let w,b=r.convert(a.type),T=x(a.internalFormat,E,b,a.colorSpace,a.isVideoTexture);L(c,a,S);const A=a.mipmaps,R=o&&!0!==a.isVideoTexture&&36196!==T,C=void 0===u.__version||!0===h,P=d.dataReady,U=M(a,f,S);if(a.isDepthTexture)T=e.DEPTH_COMPONENT,o?T=a.type===j?e.DEPTH_COMPONENT32F:a.type===X?e.DEPTH_COMPONENT24:a.type===Y?e.DEPTH24_STENCIL8:e.DEPTH_COMPONENT16:a.type===j&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),a.format===J&&T===e.DEPTH_COMPONENT&&a.type!==V&&a.type!==X&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),a.type=X,b=r.convert(a.type)),a.format===Z&&T===e.DEPTH_COMPONENT&&(T=e.DEPTH_STENCIL,a.type!==Y&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),a.type=Y,b=r.convert(a.type))),C&&(R?n.texStorage2D(e.TEXTURE_2D,1,T,f.width,f.height):n.texImage2D(e.TEXTURE_2D,0,T,f.width,f.height,0,E,b,null));else if(a.isDataTexture)if(A.length>0&&S){R&&C&&n.texStorage2D(e.TEXTURE_2D,U,T,A[0].width,A[0].height);for(let t=0,i=A.length;t<i;t++)w=A[t],R?P&&n.texSubImage2D(e.TEXTURE_2D,t,0,0,w.width,w.height,E,b,w.data):n.texImage2D(e.TEXTURE_2D,t,T,w.width,w.height,0,E,b,w.data);a.generateMipmaps=!1}else R?(C&&n.texStorage2D(e.TEXTURE_2D,U,T,f.width,f.height),P&&n.texSubImage2D(e.TEXTURE_2D,0,0,0,f.width,f.height,E,b,f.data)):n.texImage2D(e.TEXTURE_2D,0,T,f.width,f.height,0,E,b,f.data);else if(a.isCompressedTexture)if(a.isCompressedArrayTexture){R&&C&&n.texStorage3D(e.TEXTURE_2D_ARRAY,U,T,A[0].width,A[0].height,f.depth);for(let t=0,i=A.length;t<i;t++)w=A[t],a.format!==K?null!==E?R?P&&n.compressedTexSubImage3D(e.TEXTURE_2D_ARRAY,t,0,0,0,w.width,w.height,f.depth,E,w.data,0,0):n.compressedTexImage3D(e.TEXTURE_2D_ARRAY,t,T,w.width,w.height,f.depth,0,w.data,0,0):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):R?P&&n.texSubImage3D(e.TEXTURE_2D_ARRAY,t,0,0,0,w.width,w.height,f.depth,E,b,w.data):n.texImage3D(e.TEXTURE_2D_ARRAY,t,T,w.width,w.height,f.depth,0,E,b,w.data)}else{R&&C&&n.texStorage2D(e.TEXTURE_2D,U,T,A[0].width,A[0].height);for(let t=0,i=A.length;t<i;t++)w=A[t],a.format!==K?null!==E?R?P&&n.compressedTexSubImage2D(e.TEXTURE_2D,t,0,0,w.width,w.height,E,w.data):n.compressedTexImage2D(e.TEXTURE_2D,t,T,w.width,w.height,0,w.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):R?P&&n.texSubImage2D(e.TEXTURE_2D,t,0,0,w.width,w.height,E,b,w.data):n.texImage2D(e.TEXTURE_2D,t,T,w.width,w.height,0,E,b,w.data)}else if(a.isDataArrayTexture)R?(C&&n.texStorage3D(e.TEXTURE_2D_ARRAY,U,T,f.width,f.height,f.depth),P&&n.texSubImage3D(e.TEXTURE_2D_ARRAY,0,0,0,0,f.width,f.height,f.depth,E,b,f.data)):n.texImage3D(e.TEXTURE_2D_ARRAY,0,T,f.width,f.height,f.depth,0,E,b,f.data);else if(a.isData3DTexture)R?(C&&n.texStorage3D(e.TEXTURE_3D,U,T,f.width,f.height,f.depth),P&&n.texSubImage3D(e.TEXTURE_3D,0,0,0,0,f.width,f.height,f.depth,E,b,f.data)):n.texImage3D(e.TEXTURE_3D,0,T,f.width,f.height,f.depth,0,E,b,f.data);else if(a.isFramebufferTexture){if(C)if(R)n.texStorage2D(e.TEXTURE_2D,U,T,f.width,f.height);else{let t=f.width,i=f.height;for(let s=0;s<U;s++)n.texImage2D(e.TEXTURE_2D,s,T,t,i,0,E,b,null),t>>=1,i>>=1}}else if(A.length>0&&S){if(R&&C){const t=ae(A[0]);n.texStorage2D(e.TEXTURE_2D,U,T,t.width,t.height)}for(let t=0,i=A.length;t<i;t++)w=A[t],R?P&&n.texSubImage2D(e.TEXTURE_2D,t,0,0,E,b,w):n.texImage2D(e.TEXTURE_2D,t,T,E,b,w);a.generateMipmaps=!1}else if(R){if(C){const t=ae(f);n.texStorage2D(e.TEXTURE_2D,U,T,t.width,t.height)}P&&n.texSubImage2D(e.TEXTURE_2D,0,0,0,E,b,f)}else n.texImage2D(e.TEXTURE_2D,0,T,E,b,f);_(a,S)&&y(c),u.__version=d.version,a.onUpdate&&a.onUpdate(a)}t.__version=a.version}function $(t,s,a,o,c,h){const d=r.convert(a.format,a.colorSpace),u=r.convert(a.type),p=x(a.internalFormat,d,u,a.colorSpace);if(!i.get(s).__hasExternalTextures){const t=Math.max(1,s.width>>h),i=Math.max(1,s.height>>h);c===e.TEXTURE_3D||c===e.TEXTURE_2D_ARRAY?n.texImage3D(c,h,p,t,i,s.depth,0,d,u,null):n.texImage2D(c,h,p,t,i,0,d,u,null)}n.bindFramebuffer(e.FRAMEBUFFER,t),ne(s)?l.framebufferTexture2DMultisampleEXT(e.FRAMEBUFFER,o,c,i.get(a).__webglTexture,0,te(s)):(c===e.TEXTURE_2D||c>=e.TEXTURE_CUBE_MAP_POSITIVE_X&&c<=e.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&e.framebufferTexture2D(e.FRAMEBUFFER,o,c,i.get(a).__webglTexture,h),n.bindFramebuffer(e.FRAMEBUFFER,null)}function Q(t,n,i){if(e.bindRenderbuffer(e.RENDERBUFFER,t),n.depthBuffer&&!n.stencilBuffer){let s=!0===o?e.DEPTH_COMPONENT24:e.DEPTH_COMPONENT16;if(i||ne(n)){const t=n.depthTexture;t&&t.isDepthTexture&&(t.type===j?s=e.DEPTH_COMPONENT32F:t.type===X&&(s=e.DEPTH_COMPONENT24));const i=te(n);ne(n)?l.renderbufferStorageMultisampleEXT(e.RENDERBUFFER,i,s,n.width,n.height):e.renderbufferStorageMultisample(e.RENDERBUFFER,i,s,n.width,n.height)}else e.renderbufferStorage(e.RENDERBUFFER,s,n.width,n.height);e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.RENDERBUFFER,t)}else if(n.depthBuffer&&n.stencilBuffer){const s=te(n);i&&!1===ne(n)?e.renderbufferStorageMultisample(e.RENDERBUFFER,s,e.DEPTH24_STENCIL8,n.width,n.height):ne(n)?l.renderbufferStorageMultisampleEXT(e.RENDERBUFFER,s,e.DEPTH24_STENCIL8,n.width,n.height):e.renderbufferStorage(e.RENDERBUFFER,e.DEPTH_STENCIL,n.width,n.height),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.RENDERBUFFER,t)}else{const t=n.textures;for(let s=0;s<t.length;s++){const a=t[s],o=r.convert(a.format,a.colorSpace),c=r.convert(a.type),h=x(a.internalFormat,o,c,a.colorSpace),d=te(n);i&&!1===ne(n)?e.renderbufferStorageMultisample(e.RENDERBUFFER,d,h,n.width,n.height):ne(n)?l.renderbufferStorageMultisampleEXT(e.RENDERBUFFER,d,h,n.width,n.height):e.renderbufferStorage(e.RENDERBUFFER,h,n.width,n.height)}}e.bindRenderbuffer(e.RENDERBUFFER,null)}function ee(t){const s=i.get(t),r=!0===t.isWebGLCubeRenderTarget;if(t.depthTexture&&!s.__autoAllocateDepthBuffer){if(r)throw new Error("target.depthTexture not supported in Cube render targets");!function(t,s){if(s&&s.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(n.bindFramebuffer(e.FRAMEBUFFER,t),!s.depthTexture||!s.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");i.get(s.depthTexture).__webglTexture&&s.depthTexture.image.width===s.width&&s.depthTexture.image.height===s.height||(s.depthTexture.image.width=s.width,s.depthTexture.image.height=s.height,s.depthTexture.needsUpdate=!0),A(s.depthTexture,0);const r=i.get(s.depthTexture).__webglTexture,a=te(s);if(s.depthTexture.format===J)ne(s)?l.framebufferTexture2DMultisampleEXT(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,r,0,a):e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,r,0);else{if(s.depthTexture.format!==Z)throw new Error("Unknown depthTexture format");ne(s)?l.framebufferTexture2DMultisampleEXT(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.TEXTURE_2D,r,0,a):e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.TEXTURE_2D,r,0)}}(s.__webglFramebuffer,t)}else if(r){s.__webglDepthbuffer=[];for(let i=0;i<6;i++)n.bindFramebuffer(e.FRAMEBUFFER,s.__webglFramebuffer[i]),s.__webglDepthbuffer[i]=e.createRenderbuffer(),Q(s.__webglDepthbuffer[i],t,!1)}else n.bindFramebuffer(e.FRAMEBUFFER,s.__webglFramebuffer),s.__webglDepthbuffer=e.createRenderbuffer(),Q(s.__webglDepthbuffer,t,!1);n.bindFramebuffer(e.FRAMEBUFFER,null)}function te(e){return Math.min(s.maxSamples,e.samples)}function ne(e){const n=i.get(e);return o&&e.samples>0&&!0===t.has("WEBGL_multisampled_render_to_texture")&&!1!==n.__useRenderToTexture}function se(e,n){const i=e.colorSpace,s=e.format,r=e.type;return!0===e.isCompressedTexture||!0===e.isVideoTexture||e.format===Se||i!==re&&i!==ie&&(Ye.getTransfer(i)===ce?!1===o?!0===t.has("EXT_sRGB")&&s===K?(e.format=Se,e.minFilter=k,e.generateMipmaps=!1):n=$e.sRGBToLinear(n):s===K&&r===H||console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",i)),n}function ae(e){return"undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement?(h.width=e.naturalWidth||e.width,h.height=e.naturalHeight||e.height):"undefined"!=typeof VideoFrame&&e instanceof VideoFrame?(h.width=e.displayWidth,h.height=e.displayHeight):(h.width=e.width,h.height=e.height),h}this.allocateTextureUnit=function(){const e=T;return e>=s.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+e+" texture units while this GPU supports only "+s.maxTextures),T+=1,e},this.resetTextureUnits=function(){T=0},this.setTexture2D=A,this.setTexture2DArray=function(t,s){const r=i.get(t);t.version>0&&r.__version!==t.version?W(r,t,s):n.bindTexture(e.TEXTURE_2D_ARRAY,r.__webglTexture,e.TEXTURE0+s)},this.setTexture3D=function(t,s){const r=i.get(t);t.version>0&&r.__version!==t.version?W(r,t,s):n.bindTexture(e.TEXTURE_3D,r.__webglTexture,e.TEXTURE0+s)},this.setTextureCube=function(t,a){const l=i.get(t);t.version>0&&l.__version!==t.version?function(t,a,l){if(6!==a.image.length)return;const c=U(t,a),h=a.source;n.bindTexture(e.TEXTURE_CUBE_MAP,t.__webglTexture,e.TEXTURE0+l);const d=i.get(h);if(h.version!==d.__version||!0===c){n.activeTexture(e.TEXTURE0+l);const t=Ye.getPrimaries(Ye.workingColorSpace),i=a.colorSpace===ie?null:Ye.getPrimaries(a.colorSpace),u=a.colorSpace===ie||t===i?e.NONE:e.BROWSER_DEFAULT_WEBGL;e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,a.flipY),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,a.premultiplyAlpha),e.pixelStorei(e.UNPACK_ALIGNMENT,a.unpackAlignment),e.pixelStorei(e.UNPACK_COLORSPACE_CONVERSION_WEBGL,u);const p=a.isCompressedTexture||a.image[0].isCompressedTexture,m=a.image[0]&&a.image[0].isDataTexture,f=[];for(let e=0;e<6;e++)f[e]=p||m?m?a.image[e].image:a.image[e]:g(a.image[e],!1,!0,s.maxCubemapSize),f[e]=se(a,f[e]);const S=f[0],E=v(S)||o,w=r.convert(a.format,a.colorSpace),b=r.convert(a.type),T=x(a.internalFormat,w,b,a.colorSpace),A=o&&!0!==a.isVideoTexture,R=void 0===d.__version||!0===c,C=h.dataReady;let P,U=M(a,S,E);if(L(e.TEXTURE_CUBE_MAP,a,E),p){A&&R&&n.texStorage2D(e.TEXTURE_CUBE_MAP,U,T,S.width,S.height);for(let t=0;t<6;t++){P=f[t].mipmaps;for(let i=0;i<P.length;i++){const s=P[i];a.format!==K?null!==w?A?C&&n.compressedTexSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,i,0,0,s.width,s.height,w,s.data):n.compressedTexImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,i,T,s.width,s.height,0,s.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):A?C&&n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,i,0,0,s.width,s.height,w,b,s.data):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,i,T,s.width,s.height,0,w,b,s.data)}}}else{if(P=a.mipmaps,A&&R){P.length>0&&U++;const t=ae(f[0]);n.texStorage2D(e.TEXTURE_CUBE_MAP,U,T,t.width,t.height)}for(let t=0;t<6;t++)if(m){A?C&&n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,0,0,f[t].width,f[t].height,w,b,f[t].data):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,T,f[t].width,f[t].height,0,w,b,f[t].data);for(let i=0;i<P.length;i++){const s=P[i].image[t].image;A?C&&n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,i+1,0,0,s.width,s.height,w,b,s.data):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,i+1,T,s.width,s.height,0,w,b,s.data)}}else{A?C&&n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,0,0,w,b,f[t]):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,T,w,b,f[t]);for(let i=0;i<P.length;i++){const s=P[i];A?C&&n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,i+1,0,0,w,b,s.image[t]):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,i+1,T,w,b,s.image[t])}}}_(a,E)&&y(e.TEXTURE_CUBE_MAP),d.__version=h.version,a.onUpdate&&a.onUpdate(a)}t.__version=a.version}(l,t,a):n.bindTexture(e.TEXTURE_CUBE_MAP,l.__webglTexture,e.TEXTURE0+a)},this.rebindTextures=function(t,n,s){const r=i.get(t);void 0!==n&&$(r.__webglFramebuffer,t,t.texture,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,0),void 0!==s&&ee(t)},this.setupRenderTarget=function(t){const l=t.texture,c=i.get(t),h=i.get(l);t.addEventListener("dispose",w);const d=t.textures,u=!0===t.isWebGLCubeRenderTarget,p=d.length>1,m=v(t)||o;if(p||(void 0===h.__webglTexture&&(h.__webglTexture=e.createTexture()),h.__version=l.version,a.memory.textures++),u){c.__webglFramebuffer=[];for(let t=0;t<6;t++)if(o&&l.mipmaps&&l.mipmaps.length>0){c.__webglFramebuffer[t]=[];for(let n=0;n<l.mipmaps.length;n++)c.__webglFramebuffer[t][n]=e.createFramebuffer()}else c.__webglFramebuffer[t]=e.createFramebuffer()}else{if(o&&l.mipmaps&&l.mipmaps.length>0){c.__webglFramebuffer=[];for(let t=0;t<l.mipmaps.length;t++)c.__webglFramebuffer[t]=e.createFramebuffer()}else c.__webglFramebuffer=e.createFramebuffer();if(p)if(s.drawBuffers)for(let t=0,n=d.length;t<n;t++){const n=i.get(d[t]);void 0===n.__webglTexture&&(n.__webglTexture=e.createTexture(),a.memory.textures++)}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");if(o&&t.samples>0&&!1===ne(t)){c.__webglMultisampledFramebuffer=e.createFramebuffer(),c.__webglColorRenderbuffer=[],n.bindFramebuffer(e.FRAMEBUFFER,c.__webglMultisampledFramebuffer);for(let n=0;n<d.length;n++){const i=d[n];c.__webglColorRenderbuffer[n]=e.createRenderbuffer(),e.bindRenderbuffer(e.RENDERBUFFER,c.__webglColorRenderbuffer[n]);const s=r.convert(i.format,i.colorSpace),a=r.convert(i.type),o=x(i.internalFormat,s,a,i.colorSpace,!0===t.isXRRenderTarget),l=te(t);e.renderbufferStorageMultisample(e.RENDERBUFFER,l,o,t.width,t.height),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+n,e.RENDERBUFFER,c.__webglColorRenderbuffer[n])}e.bindRenderbuffer(e.RENDERBUFFER,null),t.depthBuffer&&(c.__webglDepthRenderbuffer=e.createRenderbuffer(),Q(c.__webglDepthRenderbuffer,t,!0)),n.bindFramebuffer(e.FRAMEBUFFER,null)}}if(u){n.bindTexture(e.TEXTURE_CUBE_MAP,h.__webglTexture),L(e.TEXTURE_CUBE_MAP,l,m);for(let n=0;n<6;n++)if(o&&l.mipmaps&&l.mipmaps.length>0)for(let i=0;i<l.mipmaps.length;i++)$(c.__webglFramebuffer[n][i],t,l,e.COLOR_ATTACHMENT0,e.TEXTURE_CUBE_MAP_POSITIVE_X+n,i);else $(c.__webglFramebuffer[n],t,l,e.COLOR_ATTACHMENT0,e.TEXTURE_CUBE_MAP_POSITIVE_X+n,0);_(l,m)&&y(e.TEXTURE_CUBE_MAP),n.unbindTexture()}else if(p){for(let s=0,r=d.length;s<r;s++){const r=d[s],a=i.get(r);n.bindTexture(e.TEXTURE_2D,a.__webglTexture),L(e.TEXTURE_2D,r,m),$(c.__webglFramebuffer,t,r,e.COLOR_ATTACHMENT0+s,e.TEXTURE_2D,0),_(r,m)&&y(e.TEXTURE_2D)}n.unbindTexture()}else{let i=e.TEXTURE_2D;if((t.isWebGL3DRenderTarget||t.isWebGLArrayRenderTarget)&&(o?i=t.isWebGL3DRenderTarget?e.TEXTURE_3D:e.TEXTURE_2D_ARRAY:console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")),n.bindTexture(i,h.__webglTexture),L(i,l,m),o&&l.mipmaps&&l.mipmaps.length>0)for(let n=0;n<l.mipmaps.length;n++)$(c.__webglFramebuffer[n],t,l,e.COLOR_ATTACHMENT0,i,n);else $(c.__webglFramebuffer,t,l,e.COLOR_ATTACHMENT0,i,0);_(l,m)&&y(i),n.unbindTexture()}t.depthBuffer&&ee(t)},this.updateRenderTargetMipmap=function(t){const s=v(t)||o,r=t.textures;for(let a=0,o=r.length;a<o;a++){const o=r[a];if(_(o,s)){const s=t.isWebGLCubeRenderTarget?e.TEXTURE_CUBE_MAP:e.TEXTURE_2D,r=i.get(o).__webglTexture;n.bindTexture(s,r),y(s),n.unbindTexture()}}},this.updateMultisampleRenderTarget=function(t){if(o&&t.samples>0&&!1===ne(t)){const s=t.textures,r=t.width,a=t.height;let o=e.COLOR_BUFFER_BIT;const l=[],h=t.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT,d=i.get(t),u=s.length>1;if(u)for(let t=0;t<s.length;t++)n.bindFramebuffer(e.FRAMEBUFFER,d.__webglMultisampledFramebuffer),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.RENDERBUFFER,null),n.bindFramebuffer(e.FRAMEBUFFER,d.__webglFramebuffer),e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.TEXTURE_2D,null,0);n.bindFramebuffer(e.READ_FRAMEBUFFER,d.__webglMultisampledFramebuffer),n.bindFramebuffer(e.DRAW_FRAMEBUFFER,d.__webglFramebuffer);for(let n=0;n<s.length;n++){l.push(e.COLOR_ATTACHMENT0+n),t.depthBuffer&&l.push(h);const p=void 0!==d.__ignoreDepthValues&&d.__ignoreDepthValues;if(!1===p&&(t.depthBuffer&&(o|=e.DEPTH_BUFFER_BIT),t.stencilBuffer&&(o|=e.STENCIL_BUFFER_BIT)),u&&e.framebufferRenderbuffer(e.READ_FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.RENDERBUFFER,d.__webglColorRenderbuffer[n]),!0===p&&(e.invalidateFramebuffer(e.READ_FRAMEBUFFER,[h]),e.invalidateFramebuffer(e.DRAW_FRAMEBUFFER,[h])),u){const t=i.get(s[n]).__webglTexture;e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)}e.blitFramebuffer(0,0,r,a,0,0,r,a,o,e.NEAREST),c&&e.invalidateFramebuffer(e.READ_FRAMEBUFFER,l)}if(n.bindFramebuffer(e.READ_FRAMEBUFFER,null),n.bindFramebuffer(e.DRAW_FRAMEBUFFER,null),u)for(let t=0;t<s.length;t++){n.bindFramebuffer(e.FRAMEBUFFER,d.__webglMultisampledFramebuffer),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.RENDERBUFFER,d.__webglColorRenderbuffer[t]);const r=i.get(s[t]).__webglTexture;n.bindFramebuffer(e.FRAMEBUFFER,d.__webglFramebuffer),e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.TEXTURE_2D,r,0)}n.bindFramebuffer(e.DRAW_FRAMEBUFFER,d.__webglMultisampledFramebuffer)}},this.setupDepthRenderbuffer=ee,this.setupFrameBufferTexture=$,this.useMultisampledRTT=ne}function ua(e,t,n){const i=n.isWebGL2;return{convert:function(n,s=""){let r;const a=Ye.getTransfer(s);if(n===H)return e.UNSIGNED_BYTE;if(1017===n)return e.UNSIGNED_SHORT_4_4_4_4;if(1018===n)return e.UNSIGNED_SHORT_5_5_5_1;if(1010===n)return e.BYTE;if(1011===n)return e.SHORT;if(n===V)return e.UNSIGNED_SHORT;if(n===W)return e.INT;if(n===X)return e.UNSIGNED_INT;if(n===j)return e.FLOAT;if(n===q)return i?e.HALF_FLOAT:(r=t.get("OES_texture_half_float"),null!==r?r.HALF_FLOAT_OES:null);if(1021===n)return e.ALPHA;if(n===K)return e.RGBA;if(1024===n)return e.LUMINANCE;if(1025===n)return e.LUMINANCE_ALPHA;if(n===J)return e.DEPTH_COMPONENT;if(n===Z)return e.DEPTH_STENCIL;if(n===Se)return r=t.get("EXT_sRGB"),null!==r?r.SRGB_ALPHA_EXT:null;if(1028===n)return e.RED;if(1029===n)return e.RED_INTEGER;if(1030===n)return e.RG;if(1031===n)return e.RG_INTEGER;if(1033===n)return e.RGBA_INTEGER;if(n===$||n===Q||n===ee||n===te)if(a===ce){if(r=t.get("WEBGL_compressed_texture_s3tc_srgb"),null===r)return null;if(n===$)return r.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(n===Q)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(n===ee)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(n===te)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{if(r=t.get("WEBGL_compressed_texture_s3tc"),null===r)return null;if(n===$)return r.COMPRESSED_RGB_S3TC_DXT1_EXT;if(n===Q)return r.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(n===ee)return r.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(n===te)return r.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(35840===n||35841===n||35842===n||35843===n){if(r=t.get("WEBGL_compressed_texture_pvrtc"),null===r)return null;if(35840===n)return r.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(35841===n)return r.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(35842===n)return r.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(35843===n)return r.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(36196===n)return r=t.get("WEBGL_compressed_texture_etc1"),null!==r?r.COMPRESSED_RGB_ETC1_WEBGL:null;if(37492===n||37496===n){if(r=t.get("WEBGL_compressed_texture_etc"),null===r)return null;if(37492===n)return a===ce?r.COMPRESSED_SRGB8_ETC2:r.COMPRESSED_RGB8_ETC2;if(37496===n)return a===ce?r.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:r.COMPRESSED_RGBA8_ETC2_EAC}if(37808===n||37809===n||37810===n||37811===n||37812===n||37813===n||37814===n||37815===n||37816===n||37817===n||37818===n||37819===n||37820===n||37821===n){if(r=t.get("WEBGL_compressed_texture_astc"),null===r)return null;if(37808===n)return a===ce?r.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:r.COMPRESSED_RGBA_ASTC_4x4_KHR;if(37809===n)return a===ce?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:r.COMPRESSED_RGBA_ASTC_5x4_KHR;if(37810===n)return a===ce?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:r.COMPRESSED_RGBA_ASTC_5x5_KHR;if(37811===n)return a===ce?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:r.COMPRESSED_RGBA_ASTC_6x5_KHR;if(37812===n)return a===ce?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:r.COMPRESSED_RGBA_ASTC_6x6_KHR;if(37813===n)return a===ce?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:r.COMPRESSED_RGBA_ASTC_8x5_KHR;if(37814===n)return a===ce?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:r.COMPRESSED_RGBA_ASTC_8x6_KHR;if(37815===n)return a===ce?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:r.COMPRESSED_RGBA_ASTC_8x8_KHR;if(37816===n)return a===ce?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:r.COMPRESSED_RGBA_ASTC_10x5_KHR;if(37817===n)return a===ce?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:r.COMPRESSED_RGBA_ASTC_10x6_KHR;if(37818===n)return a===ce?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:r.COMPRESSED_RGBA_ASTC_10x8_KHR;if(37819===n)return a===ce?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:r.COMPRESSED_RGBA_ASTC_10x10_KHR;if(37820===n)return a===ce?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:r.COMPRESSED_RGBA_ASTC_12x10_KHR;if(37821===n)return a===ce?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:r.COMPRESSED_RGBA_ASTC_12x12_KHR}if(n===ne||36494===n||36495===n){if(r=t.get("EXT_texture_compression_bptc"),null===r)return null;if(n===ne)return a===ce?r.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:r.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(36494===n)return r.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(36495===n)return r.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}if(36283===n||36284===n||36285===n||36286===n){if(r=t.get("EXT_texture_compression_rgtc"),null===r)return null;if(n===ne)return r.COMPRESSED_RED_RGTC1_EXT;if(36284===n)return r.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(36285===n)return r.COMPRESSED_RED_GREEN_RGTC2_EXT;if(36286===n)return r.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}return n===Y?i?e.UNSIGNED_INT_24_8:(r=t.get("WEBGL_depth_texture"),null!==r?r.UNSIGNED_INT_24_8_WEBGL:null):void 0!==e[n]?e[n]:null}}}class pa extends wi{constructor(e=[]){super(),this.isArrayCamera=!0,this.cameras=e}}class ma extends mn{constructor(){super(),this.isGroup=!0,this.type="Group"}}const fa={type:"move"};class ga{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return null===this._hand&&(this._hand=new ma,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return null===this._targetRay&&(this._targetRay=new ma,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new ht,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new ht),this._targetRay}getGripSpace(){return null===this._grip&&(this._grip=new ma,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new ht,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new ht),this._grip}dispatchEvent(e){return null!==this._targetRay&&this._targetRay.dispatchEvent(e),null!==this._grip&&this._grip.dispatchEvent(e),null!==this._hand&&this._hand.dispatchEvent(e),this}connect(e){if(e&&e.hand){const t=this._hand;if(t)for(const n of e.hand.values())this._getHandJoint(t,n)}return this.dispatchEvent({type:"connected",data:e}),this}disconnect(e){return this.dispatchEvent({type:"disconnected",data:e}),null!==this._targetRay&&(this._targetRay.visible=!1),null!==this._grip&&(this._grip.visible=!1),null!==this._hand&&(this._hand.visible=!1),this}update(e,t,n){let i=null,s=null,r=null;const a=this._targetRay,o=this._grip,l=this._hand;if(e&&"visible-blurred"!==t.session.visibilityState){if(l&&e.hand){r=!0;for(const r of e.hand.values()){const e=t.getJointPose(r,n),i=this._getHandJoint(l,r);null!==e&&(i.matrix.fromArray(e.transform.matrix),i.matrix.decompose(i.position,i.rotation,i.scale),i.matrixWorldNeedsUpdate=!0,i.jointRadius=e.radius),i.visible=null!==e}const i=l.joints["index-finger-tip"],s=l.joints["thumb-tip"],a=i.position.distanceTo(s.position),o=.02,c=.005;l.inputState.pinching&&a>o+c?(l.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})):!l.inputState.pinching&&a<=o-c&&(l.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this}))}else null!==o&&e.gripSpace&&(s=t.getPose(e.gripSpace,n),null!==s&&(o.matrix.fromArray(s.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),o.matrixWorldNeedsUpdate=!0,s.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(s.linearVelocity)):o.hasLinearVelocity=!1,s.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(s.angularVelocity)):o.hasAngularVelocity=!1));null!==a&&(i=t.getPose(e.targetRaySpace,n),null===i&&null!==s&&(i=s),null!==i&&(a.matrix.fromArray(i.transform.matrix),a.matrix.decompose(a.position,a.rotation,a.scale),a.matrixWorldNeedsUpdate=!0,i.linearVelocity?(a.hasLinearVelocity=!0,a.linearVelocity.copy(i.linearVelocity)):a.hasLinearVelocity=!1,i.angularVelocity?(a.hasAngularVelocity=!0,a.angularVelocity.copy(i.angularVelocity)):a.hasAngularVelocity=!1,this.dispatchEvent(fa)))}return null!==a&&(a.visible=null!==i),null!==o&&(o.visible=null!==s),null!==l&&(l.visible=null!==r),this}_getHandJoint(e,t){if(void 0===e.joints[t.jointName]){const n=new ma;n.matrixAutoUpdate=!1,n.visible=!1,e.joints[t.jointName]=n,e.add(n)}return e.joints[t.jointName]}}class va{constructor(){this.texture=null,this.mesh=null,this.depthNear=0,this.depthFar=0}init(e,t,n){if(null===this.texture){const i=new it;e.properties.get(i).__webglTexture=t.texture,t.depthNear==n.depthNear&&t.depthFar==n.depthFar||(this.depthNear=t.depthNear,this.depthFar=t.depthFar),this.texture=i}}render(e,t){if(null!==this.texture){if(null===this.mesh){const e=t.cameras[0].viewport,n=new yi({extensions:{fragDepth:!0},vertexShader:"\nvoid main() {\n\n\tgl_Position = vec4( position, 1.0 );\n\n}",fragmentShader:"\nuniform sampler2DArray depthColor;\nuniform float depthWidth;\nuniform float depthHeight;\n\nvoid main() {\n\n\tvec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );\n\n\tif ( coord.x >= 1.0 ) {\n\n\t\tgl_FragDepthEXT = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;\n\n\t} else {\n\n\t\tgl_FragDepthEXT = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;\n\n\t}\n\n}",uniforms:{depthColor:{value:this.texture},depthWidth:{value:e.z},depthHeight:{value:e.w}}});this.mesh=new ui(new zi(20,20),n)}e.render(this.mesh,t)}}reset(){this.texture=null,this.mesh=null}}class _a extends be{constructor(e,t){super();const n=this;let i=null,s=1,r=null,a="local-floor",o=1,l=null,c=null,h=null,d=null,u=null,p=null;const m=new va,f=t.getContextAttributes();let g=null,v=null;const _=[],y=[],x=new Fe;let M=null;const S=new wi;S.layers.enable(1),S.viewport=new st;const E=new wi;E.layers.enable(2),E.viewport=new st;const w=[S,E],b=new pa;b.layers.enable(1),b.layers.enable(2);let T=null,A=null;function R(e){const t=y.indexOf(e.inputSource);if(-1===t)return;const n=_[t];void 0!==n&&(n.update(e.inputSource,e.frame,l||r),n.dispatchEvent({type:e.type,data:e.inputSource}))}function C(){i.removeEventListener("select",R),i.removeEventListener("selectstart",R),i.removeEventListener("selectend",R),i.removeEventListener("squeeze",R),i.removeEventListener("squeezestart",R),i.removeEventListener("squeezeend",R),i.removeEventListener("end",C),i.removeEventListener("inputsourceschange",P);for(let e=0;e<_.length;e++){const t=y[e];null!==t&&(y[e]=null,_[e].disconnect(t))}T=null,A=null,m.reset(),e.setRenderTarget(g),u=null,d=null,h=null,i=null,v=null,N.stop(),n.isPresenting=!1,e.setPixelRatio(M),e.setSize(x.width,x.height,!1),n.dispatchEvent({type:"sessionend"})}function P(e){for(let t=0;t<e.removed.length;t++){const n=e.removed[t],i=y.indexOf(n);i>=0&&(y[i]=null,_[i].disconnect(n))}for(let t=0;t<e.added.length;t++){const n=e.added[t];let i=y.indexOf(n);if(-1===i){for(let e=0;e<_.length;e++){if(e>=y.length){y.push(n),i=e;break}if(null===y[e]){y[e]=n,i=e;break}}if(-1===i)break}const s=_[i];s&&s.connect(n)}}this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(e){let t=_[e];return void 0===t&&(t=new ga,_[e]=t),t.getTargetRaySpace()},this.getControllerGrip=function(e){let t=_[e];return void 0===t&&(t=new ga,_[e]=t),t.getGripSpace()},this.getHand=function(e){let t=_[e];return void 0===t&&(t=new ga,_[e]=t),t.getHandSpace()},this.setFramebufferScaleFactor=function(e){s=e,!0===n.isPresenting&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(e){a=e,!0===n.isPresenting&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return l||r},this.setReferenceSpace=function(e){l=e},this.getBaseLayer=function(){return null!==d?d:u},this.getBinding=function(){return h},this.getFrame=function(){return p},this.getSession=function(){return i},this.setSession=async function(c){if(i=c,null!==i){if(g=e.getRenderTarget(),i.addEventListener("select",R),i.addEventListener("selectstart",R),i.addEventListener("selectend",R),i.addEventListener("squeeze",R),i.addEventListener("squeezestart",R),i.addEventListener("squeezeend",R),i.addEventListener("end",C),i.addEventListener("inputsourceschange",P),!0!==f.xrCompatible&&await t.makeXRCompatible(),M=e.getPixelRatio(),e.getSize(x),void 0===i.renderState.layers||!1===e.capabilities.isWebGL2){const n={antialias:void 0!==i.renderState.layers||f.antialias,alpha:!0,depth:f.depth,stencil:f.stencil,framebufferScaleFactor:s};u=new XRWebGLLayer(i,t,n),i.updateRenderState({baseLayer:u}),e.setPixelRatio(1),e.setSize(u.framebufferWidth,u.framebufferHeight,!1),v=new at(u.framebufferWidth,u.framebufferHeight,{format:K,type:H,colorSpace:e.outputColorSpace,stencilBuffer:f.stencil})}else{let n=null,r=null,a=null;f.depth&&(a=f.stencil?t.DEPTH24_STENCIL8:t.DEPTH_COMPONENT24,n=f.stencil?Z:J,r=f.stencil?Y:X);const o={colorFormat:t.RGBA8,depthFormat:a,scaleFactor:s};h=new XRWebGLBinding(i,t),d=h.createProjectionLayer(o),i.updateRenderState({layers:[d]}),e.setPixelRatio(1),e.setSize(d.textureWidth,d.textureHeight,!1),v=new at(d.textureWidth,d.textureHeight,{format:K,type:H,depthTexture:new Es(d.textureWidth,d.textureHeight,r,void 0,void 0,void 0,void 0,void 0,void 0,n),stencilBuffer:f.stencil,colorSpace:e.outputColorSpace,samples:f.antialias?4:0});e.properties.get(v).__ignoreDepthValues=d.ignoreDepthValues}v.isXRRenderTarget=!0,this.setFoveation(o),l=null,r=await i.requestReferenceSpace(a),N.setContext(i),N.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(null!==i)return i.environmentBlendMode};const L=new ht,U=new ht;function I(e,t){null===t?e.matrixWorld.copy(e.matrix):e.matrixWorld.multiplyMatrices(t.matrixWorld,e.matrix),e.matrixWorldInverse.copy(e.matrixWorld).invert()}this.updateCamera=function(e){if(null===i)return;null!==m.texture&&(e.near=m.depthNear,e.far=m.depthFar),b.near=E.near=S.near=e.near,b.far=E.far=S.far=e.far,T===b.near&&A===b.far||(i.updateRenderState({depthNear:b.near,depthFar:b.far}),T=b.near,A=b.far,S.near=T,S.far=A,E.near=T,E.far=A,S.updateProjectionMatrix(),E.updateProjectionMatrix(),e.updateProjectionMatrix());const t=e.parent,n=b.cameras;I(b,t);for(let i=0;i<n.length;i++)I(n[i],t);2===n.length?function(e,t,n){L.setFromMatrixPosition(t.matrixWorld),U.setFromMatrixPosition(n.matrixWorld);const i=L.distanceTo(U),s=t.projectionMatrix.elements,r=n.projectionMatrix.elements,a=s[14]/(s[10]-1),o=s[14]/(s[10]+1),l=(s[9]+1)/s[5],c=(s[9]-1)/s[5],h=(s[8]-1)/s[0],d=(r[8]+1)/r[0],u=a*h,p=a*d,m=i/(-h+d),f=m*-h;t.matrixWorld.decompose(e.position,e.quaternion,e.scale),e.translateX(f),e.translateZ(m),e.matrixWorld.compose(e.position,e.quaternion,e.scale),e.matrixWorldInverse.copy(e.matrixWorld).invert();const g=a+m,v=o+m,_=u-f,y=p+(i-f),x=l*o/v*g,M=c*o/v*g;e.projectionMatrix.makePerspective(_,y,x,M,g,v),e.projectionMatrixInverse.copy(e.projectionMatrix).invert()}(b,S,E):b.projectionMatrix.copy(S.projectionMatrix),function(e,t,n){null===n?e.matrix.copy(t.matrixWorld):(e.matrix.copy(n.matrixWorld),e.matrix.invert(),e.matrix.multiply(t.matrixWorld));e.matrix.decompose(e.position,e.quaternion,e.scale),e.updateMatrixWorld(!0),e.projectionMatrix.copy(t.projectionMatrix),e.projectionMatrixInverse.copy(t.projectionMatrixInverse),e.isPerspectiveCamera&&(e.fov=2*Re*Math.atan(1/e.projectionMatrix.elements[5]),e.zoom=1)}(e,b,t)},this.getCamera=function(){return b},this.getFoveation=function(){if(null!==d||null!==u)return o},this.setFoveation=function(e){o=e,null!==d&&(d.fixedFoveation=e),null!==u&&void 0!==u.fixedFoveation&&(u.fixedFoveation=e)},this.hasDepthSensing=function(){return null!==m.texture};let D=null;const N=new Oi;N.setAnimationLoop((function(t,s){if(c=s.getViewerPose(l||r),p=s,null!==c){const t=c.views;null!==u&&(e.setRenderTargetFramebuffer(v,u.framebuffer),e.setRenderTarget(v));let n=!1;t.length!==b.cameras.length&&(b.cameras.length=0,n=!0);for(let i=0;i<t.length;i++){const s=t[i];let r=null;if(null!==u)r=u.getViewport(s);else{const t=h.getViewSubImage(d,s);r=t.viewport,0===i&&(e.setRenderTargetTextures(v,t.colorTexture,d.ignoreDepthValues?void 0:t.depthStencilTexture),e.setRenderTarget(v))}let a=w[i];void 0===a&&(a=new wi,a.layers.enable(i),a.viewport=new st,w[i]=a),a.matrix.fromArray(s.transform.matrix),a.matrix.decompose(a.position,a.quaternion,a.scale),a.projectionMatrix.fromArray(s.projectionMatrix),a.projectionMatrixInverse.copy(a.projectionMatrix).invert(),a.viewport.set(r.x,r.y,r.width,r.height),0===i&&(b.matrix.copy(a.matrix),b.matrix.decompose(b.position,b.quaternion,b.scale)),!0===n&&b.cameras.push(a)}const s=i.enabledFeatures;if(s&&s.includes("depth-sensing")){const n=h.getDepthInformation(t[0]);n&&n.isValid&&n.texture&&m.init(e,n,i.renderState)}}for(let e=0;e<_.length;e++){const t=y[e],n=_[e];null!==t&&void 0!==n&&n.update(t,s,l||r)}m.render(e,b),D&&D(t,s),s.detectedPlanes&&n.dispatchEvent({type:"planesdetected",data:s}),p=null})),this.setAnimationLoop=function(e){D=e},this.dispose=function(){}}}const ya=new Jt,xa=new Bt;function Ma(e,t){function n(e,t){!0===e.matrixAutoUpdate&&e.updateMatrix(),t.value.copy(e.matrix)}function i(i,s){i.opacity.value=s.opacity,s.color&&i.diffuse.value.copy(s.color),s.emissive&&i.emissive.value.copy(s.emissive).multiplyScalar(s.emissiveIntensity),s.map&&(i.map.value=s.map,n(s.map,i.mapTransform)),s.alphaMap&&(i.alphaMap.value=s.alphaMap,n(s.alphaMap,i.alphaMapTransform)),s.bumpMap&&(i.bumpMap.value=s.bumpMap,n(s.bumpMap,i.bumpMapTransform),i.bumpScale.value=s.bumpScale,1===s.side&&(i.bumpScale.value*=-1)),s.normalMap&&(i.normalMap.value=s.normalMap,n(s.normalMap,i.normalMapTransform),i.normalScale.value.copy(s.normalScale),1===s.side&&i.normalScale.value.negate()),s.displacementMap&&(i.displacementMap.value=s.displacementMap,n(s.displacementMap,i.displacementMapTransform),i.displacementScale.value=s.displacementScale,i.displacementBias.value=s.displacementBias),s.emissiveMap&&(i.emissiveMap.value=s.emissiveMap,n(s.emissiveMap,i.emissiveMapTransform)),s.specularMap&&(i.specularMap.value=s.specularMap,n(s.specularMap,i.specularMapTransform)),s.alphaTest>0&&(i.alphaTest.value=s.alphaTest);const r=t.get(s),a=r.envMap,o=r.envMapRotation;if(a&&(i.envMap.value=a,ya.copy(o),ya.x*=-1,ya.y*=-1,ya.z*=-1,a.isCubeTexture&&!1===a.isRenderTargetTexture&&(ya.y*=-1,ya.z*=-1),i.envMapRotation.value.setFromMatrix4(xa.makeRotationFromEuler(ya)),i.flipEnvMap.value=a.isCubeTexture&&!1===a.isRenderTargetTexture?-1:1,i.reflectivity.value=s.reflectivity,i.ior.value=s.ior,i.refractionRatio.value=s.refractionRatio),s.lightMap){i.lightMap.value=s.lightMap;const t=!0===e._useLegacyLights?Math.PI:1;i.lightMapIntensity.value=s.lightMapIntensity*t,n(s.lightMap,i.lightMapTransform)}s.aoMap&&(i.aoMap.value=s.aoMap,i.aoMapIntensity.value=s.aoMapIntensity,n(s.aoMap,i.aoMapTransform))}return{refreshFogUniforms:function(t,n){n.color.getRGB(t.fogColor.value,vi(e)),n.isFog?(t.fogNear.value=n.near,t.fogFar.value=n.far):n.isFogExp2&&(t.fogDensity.value=n.density)},refreshMaterialUniforms:function(e,s,r,a,o){s.isMeshBasicMaterial||s.isMeshLambertMaterial?i(e,s):s.isMeshToonMaterial?(i(e,s),function(e,t){t.gradientMap&&(e.gradientMap.value=t.gradientMap)}(e,s)):s.isMeshPhongMaterial?(i(e,s),function(e,t){e.specular.value.copy(t.specular),e.shininess.value=Math.max(t.shininess,1e-4)}(e,s)):s.isMeshStandardMaterial?(i(e,s),function(e,i){e.metalness.value=i.metalness,i.metalnessMap&&(e.metalnessMap.value=i.metalnessMap,n(i.metalnessMap,e.metalnessMapTransform));e.roughness.value=i.roughness,i.roughnessMap&&(e.roughnessMap.value=i.roughnessMap,n(i.roughnessMap,e.roughnessMapTransform));const s=t.get(i).envMap;s&&(e.envMapIntensity.value=i.envMapIntensity)}(e,s),s.isMeshPhysicalMaterial&&function(e,t,i){e.ior.value=t.ior,t.sheen>0&&(e.sheenColor.value.copy(t.sheenColor).multiplyScalar(t.sheen),e.sheenRoughness.value=t.sheenRoughness,t.sheenColorMap&&(e.sheenColorMap.value=t.sheenColorMap,n(t.sheenColorMap,e.sheenColorMapTransform)),t.sheenRoughnessMap&&(e.sheenRoughnessMap.value=t.sheenRoughnessMap,n(t.sheenRoughnessMap,e.sheenRoughnessMapTransform)));t.clearcoat>0&&(e.clearcoat.value=t.clearcoat,e.clearcoatRoughness.value=t.clearcoatRoughness,t.clearcoatMap&&(e.clearcoatMap.value=t.clearcoatMap,n(t.clearcoatMap,e.clearcoatMapTransform)),t.clearcoatRoughnessMap&&(e.clearcoatRoughnessMap.value=t.clearcoatRoughnessMap,n(t.clearcoatRoughnessMap,e.clearcoatRoughnessMapTransform)),t.clearcoatNormalMap&&(e.clearcoatNormalMap.value=t.clearcoatNormalMap,n(t.clearcoatNormalMap,e.clearcoatNormalMapTransform),e.clearcoatNormalScale.value.copy(t.clearcoatNormalScale),1===t.side&&e.clearcoatNormalScale.value.negate()));t.iridescence>0&&(e.iridescence.value=t.iridescence,e.iridescenceIOR.value=t.iridescenceIOR,e.iridescenceThicknessMinimum.value=t.iridescenceThicknessRange[0],e.iridescenceThicknessMaximum.value=t.iridescenceThicknessRange[1],t.iridescenceMap&&(e.iridescenceMap.value=t.iridescenceMap,n(t.iridescenceMap,e.iridescenceMapTransform)),t.iridescenceThicknessMap&&(e.iridescenceThicknessMap.value=t.iridescenceThicknessMap,n(t.iridescenceThicknessMap,e.iridescenceThicknessMapTransform)));t.transmission>0&&(e.transmission.value=t.transmission,e.transmissionSamplerMap.value=i.texture,e.transmissionSamplerSize.value.set(i.width,i.height),t.transmissionMap&&(e.transmissionMap.value=t.transmissionMap,n(t.transmissionMap,e.transmissionMapTransform)),e.thickness.value=t.thickness,t.thicknessMap&&(e.thicknessMap.value=t.thicknessMap,n(t.thicknessMap,e.thicknessMapTransform)),e.attenuationDistance.value=t.attenuationDistance,e.attenuationColor.value.copy(t.attenuationColor));t.anisotropy>0&&(e.anisotropyVector.value.set(t.anisotropy*Math.cos(t.anisotropyRotation),t.anisotropy*Math.sin(t.anisotropyRotation)),t.anisotropyMap&&(e.anisotropyMap.value=t.anisotropyMap,n(t.anisotropyMap,e.anisotropyMapTransform)));e.specularIntensity.value=t.specularIntensity,e.specularColor.value.copy(t.specularColor),t.specularColorMap&&(e.specularColorMap.value=t.specularColorMap,n(t.specularColorMap,e.specularColorMapTransform));t.specularIntensityMap&&(e.specularIntensityMap.value=t.specularIntensityMap,n(t.specularIntensityMap,e.specularIntensityMapTransform))}(e,s,o)):s.isMeshMatcapMaterial?(i(e,s),function(e,t){t.matcap&&(e.matcap.value=t.matcap)}(e,s)):s.isMeshDepthMaterial?i(e,s):s.isMeshDistanceMaterial?(i(e,s),function(e,n){const i=t.get(n).light;e.referencePosition.value.setFromMatrixPosition(i.matrixWorld),e.nearDistance.value=i.shadow.camera.near,e.farDistance.value=i.shadow.camera.far}(e,s)):s.isMeshNormalMaterial?i(e,s):s.isLineBasicMaterial?(function(e,t){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity,t.map&&(e.map.value=t.map,n(t.map,e.mapTransform))}(e,s),s.isLineDashedMaterial&&function(e,t){e.dashSize.value=t.dashSize,e.totalSize.value=t.dashSize+t.gapSize,e.scale.value=t.scale}(e,s)):s.isPointsMaterial?function(e,t,i,s){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity,e.size.value=t.size*i,e.scale.value=.5*s,t.map&&(e.map.value=t.map,n(t.map,e.uvTransform));t.alphaMap&&(e.alphaMap.value=t.alphaMap,n(t.alphaMap,e.alphaMapTransform));t.alphaTest>0&&(e.alphaTest.value=t.alphaTest)}(e,s,r,a):s.isSpriteMaterial?function(e,t){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity,e.rotation.value=t.rotation,t.map&&(e.map.value=t.map,n(t.map,e.mapTransform));t.alphaMap&&(e.alphaMap.value=t.alphaMap,n(t.alphaMap,e.alphaMapTransform));t.alphaTest>0&&(e.alphaTest.value=t.alphaTest)}(e,s):s.isShadowMaterial?(e.color.value.copy(s.color),e.opacity.value=s.opacity):s.isShaderMaterial&&(s.uniformsNeedUpdate=!1)}}}function Sa(e,t,n,i){let s={},r={},a=[];const o=n.isWebGL2?e.getParameter(e.MAX_UNIFORM_BUFFER_BINDINGS):0;function l(e,t,n,i){const s=e.value,r=t+"_"+n;if(void 0===i[r])return i[r]="number"==typeof s||"boolean"==typeof s?s:s.clone(),!0;{const e=i[r];if("number"==typeof s||"boolean"==typeof s){if(e!==s)return i[r]=s,!0}else if(!1===e.equals(s))return e.copy(s),!0}return!1}function c(e){const t={boundary:0,storage:0};return"number"==typeof e||"boolean"==typeof e?(t.boundary=4,t.storage=4):e.isVector2?(t.boundary=8,t.storage=8):e.isVector3||e.isColor?(t.boundary=16,t.storage=12):e.isVector4?(t.boundary=16,t.storage=16):e.isMatrix3?(t.boundary=48,t.storage=48):e.isMatrix4?(t.boundary=64,t.storage=64):e.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",e),t}function h(t){const n=t.target;n.removeEventListener("dispose",h);const i=a.indexOf(n.__bindingPointIndex);a.splice(i,1),e.deleteBuffer(s[n.id]),delete s[n.id],delete r[n.id]}return{bind:function(e,t){const n=t.program;i.uniformBlockBinding(e,n)},update:function(n,d){let u=s[n.id];void 0===u&&(!function(e){const t=e.uniforms;let n=0;const i=16;for(let r=0,a=t.length;r<a;r++){const e=Array.isArray(t[r])?t[r]:[t[r]];for(let t=0,s=e.length;t<s;t++){const s=e[t],r=Array.isArray(s.value)?s.value:[s.value];for(let e=0,t=r.length;e<t;e++){const t=c(r[e]),a=n%i;0!==a&&i-a<t.boundary&&(n+=i-a),s.__data=new Float32Array(t.storage/Float32Array.BYTES_PER_ELEMENT),s.__offset=n,n+=t.storage}}}const s=n%i;s>0&&(n+=i-s);e.__size=n,e.__cache={}}(n),u=function(t){const n=function(){for(let e=0;e<o;e++)if(-1===a.indexOf(e))return a.push(e),e;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}();t.__bindingPointIndex=n;const i=e.createBuffer(),s=t.__size,r=t.usage;return e.bindBuffer(e.UNIFORM_BUFFER,i),e.bufferData(e.UNIFORM_BUFFER,s,r),e.bindBuffer(e.UNIFORM_BUFFER,null),e.bindBufferBase(e.UNIFORM_BUFFER,n,i),i}(n),s[n.id]=u,n.addEventListener("dispose",h));const p=d.program;i.updateUBOMapping(n,p);const m=t.render.frame;r[n.id]!==m&&(!function(t){const n=s[t.id],i=t.uniforms,r=t.__cache;e.bindBuffer(e.UNIFORM_BUFFER,n);for(let s=0,a=i.length;s<a;s++){const t=Array.isArray(i[s])?i[s]:[i[s]];for(let n=0,i=t.length;n<i;n++){const i=t[n];if(!0===l(i,s,n,r)){const t=i.__offset,n=Array.isArray(i.value)?i.value:[i.value];let s=0;for(let r=0;r<n.length;r++){const a=n[r],o=c(a);"number"==typeof a||"boolean"==typeof a?(i.__data[0]=a,e.bufferSubData(e.UNIFORM_BUFFER,t+s,i.__data)):a.isMatrix3?(i.__data[0]=a.elements[0],i.__data[1]=a.elements[1],i.__data[2]=a.elements[2],i.__data[3]=0,i.__data[4]=a.elements[3],i.__data[5]=a.elements[4],i.__data[6]=a.elements[5],i.__data[7]=0,i.__data[8]=a.elements[6],i.__data[9]=a.elements[7],i.__data[10]=a.elements[8],i.__data[11]=0):(a.toArray(i.__data,s),s+=o.storage/Float32Array.BYTES_PER_ELEMENT)}e.bufferSubData(e.UNIFORM_BUFFER,t,i.__data)}}}e.bindBuffer(e.UNIFORM_BUFFER,null)}(n),r[n.id]=m)},dispose:function(){for(const t in s)e.deleteBuffer(s[t]);a=[],s={},r={}}}}class Ea{constructor(e={}){const{canvas:n=He(),context:i=null,depth:s=!0,stencil:r=!0,alpha:a=!1,antialias:o=!1,premultipliedAlpha:l=!0,preserveDrawingBuffer:c=!1,powerPreference:h="default",failIfMajorPerformanceCaveat:d=!1}=e;let u;this.isWebGLRenderer=!0,u=null!==i?i.getContextAttributes().alpha:a;const p=new Uint32Array(4),m=new Int32Array(4);let f=null,g=null;const v=[],_=[];this.domElement=n,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this._outputColorSpace=se,this._useLegacyLights=!1,this.toneMapping=0,this.toneMappingExposure=1;const y=this;let x=!1,M=0,S=0,E=null,w=-1,b=null;const T=new st,A=new st;let R=null;const C=new Pn(0);let P=0,L=n.width,U=n.height,I=1,D=null,N=null;const O=new st(0,0,L,U),F=new st(0,0,L,U);let z=!1;const k=new Ni;let B=!1,W=!1,J=null;const Z=new Bt,$=new Fe,Q=new ht,ee={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function te(){return null===E?I:1}let ne,ie,ae,oe,le,ce,he,de,ue,pe,me,fe,ge,ve,_e,ye,xe,Me,Se,Ee,we,be,Te,Ae,Re=i;function Ce(e,t){for(let i=0;i<e.length;i++){const s=e[i],r=n.getContext(s,t);if(null!==r)return r}return null}try{const e={alpha:!0,depth:s,stencil:r,antialias:o,premultipliedAlpha:l,preserveDrawingBuffer:c,powerPreference:h,failIfMajorPerformanceCaveat:d};if("setAttribute"in n&&n.setAttribute("data-engine",`three.js r${t}`),n.addEventListener("webglcontextlost",Ue,!1),n.addEventListener("webglcontextrestored",De,!1),n.addEventListener("webglcontextcreationerror",Ne,!1),null===Re){const t=["webgl2","webgl","experimental-webgl"];if(!0===y.isWebGL1Renderer&&t.shift(),Re=Ce(t,e),null===Re)throw Ce(t)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}"undefined"!=typeof WebGLRenderingContext&&Re instanceof WebGLRenderingContext&&console.warn("THREE.WebGLRenderer: WebGL 1 support was deprecated in r153 and will be removed in r163."),void 0===Re.getShaderPrecisionFormat&&(Re.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(Ze){throw console.error("THREE.WebGLRenderer: "+Ze.message),Ze}function Pe(){ne=new fs(Re),ie=new Yi(Re,ne,e),ne.init(ie),be=new ua(Re,ne,ie),ae=new ha(Re,ne,ie),oe=new _s(Re),le=new Jr,ce=new da(Re,ne,ae,le,ie,be,oe),he=new Ji(y),de=new ms(y),ue=new Fi(Re,ie),Te=new ji(Re,ne,ue,ie),pe=new gs(Re,ue,oe,Te),me=new Ss(Re,pe,ue,oe),Se=new Ms(Re,ie,ce),ye=new Ki(le),fe=new Kr(y,he,de,ne,ie,Te,ye),ge=new Ma(y,le),ve=new ea,_e=new aa(ne,ie),Me=new Xi(y,he,de,ae,me,u,l),xe=new ca(y,me,ie),Ae=new Sa(Re,oe,ie,ae),Ee=new qi(Re,ne,oe,ie),we=new vs(Re,ne,oe,ie),oe.programs=fe.programs,y.capabilities=ie,y.extensions=ne,y.properties=le,y.renderLists=ve,y.shadowMap=xe,y.state=ae,y.info=oe}Pe();const Le=new _a(y,Re);function Ue(e){e.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),x=!0}function De(){console.log("THREE.WebGLRenderer: Context Restored."),x=!1;const e=oe.autoReset,t=xe.enabled,n=xe.autoUpdate,i=xe.needsUpdate,s=xe.type;Pe(),oe.autoReset=e,xe.enabled=t,xe.autoUpdate=n,xe.needsUpdate=i,xe.type=s}function Ne(e){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",e.statusMessage)}function Oe(e){const t=e.target;t.removeEventListener("dispose",Oe),function(e){(function(e){const t=le.get(e).programs;void 0!==t&&(t.forEach((function(e){fe.releaseProgram(e)})),e.isShaderMaterial&&fe.releaseShaderCache(e))})(e),le.remove(e)}(t)}function ze(e,t,n){!0===e.transparent&&2===e.side&&!1===e.forceSinglePass?(e.side=1,e.needsUpdate=!0,Ye(e,t,n),e.side=0,e.needsUpdate=!0,Ye(e,t,n),e.side=2):Ye(e,t,n)}this.xr=Le,this.getContext=function(){return Re},this.getContextAttributes=function(){return Re.getContextAttributes()},this.forceContextLoss=function(){const e=ne.get("WEBGL_lose_context");e&&e.loseContext()},this.forceContextRestore=function(){const e=ne.get("WEBGL_lose_context");e&&e.restoreContext()},this.getPixelRatio=function(){return I},this.setPixelRatio=function(e){void 0!==e&&(I=e,this.setSize(L,U,!1))},this.getSize=function(e){return e.set(L,U)},this.setSize=function(e,t,i=!0){Le.isPresenting?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(L=e,U=t,n.width=Math.floor(e*I),n.height=Math.floor(t*I),!0===i&&(n.style.width=e+"px",n.style.height=t+"px"),this.setViewport(0,0,e,t))},this.getDrawingBufferSize=function(e){return e.set(L*I,U*I).floor()},this.setDrawingBufferSize=function(e,t,i){L=e,U=t,I=i,n.width=Math.floor(e*i),n.height=Math.floor(t*i),this.setViewport(0,0,e,t)},this.getCurrentViewport=function(e){return e.copy(T)},this.getViewport=function(e){return e.copy(O)},this.setViewport=function(e,t,n,i){e.isVector4?O.set(e.x,e.y,e.z,e.w):O.set(e,t,n,i),ae.viewport(T.copy(O).multiplyScalar(I).round())},this.getScissor=function(e){return e.copy(F)},this.setScissor=function(e,t,n,i){e.isVector4?F.set(e.x,e.y,e.z,e.w):F.set(e,t,n,i),ae.scissor(A.copy(F).multiplyScalar(I).round())},this.getScissorTest=function(){return z},this.setScissorTest=function(e){ae.setScissorTest(z=e)},this.setOpaqueSort=function(e){D=e},this.setTransparentSort=function(e){N=e},this.getClearColor=function(e){return e.copy(Me.getClearColor())},this.setClearColor=function(){Me.setClearColor.apply(Me,arguments)},this.getClearAlpha=function(){return Me.getClearAlpha()},this.setClearAlpha=function(){Me.setClearAlpha.apply(Me,arguments)},this.clear=function(e=!0,t=!0,n=!0){let i=0;if(e){let e=!1;if(null!==E){const t=E.texture.format;e=1033===t||1031===t||1029===t}if(e){const e=E.texture.type,t=e===H||e===X||e===V||e===Y||1017===e||1018===e,n=Me.getClearColor(),i=Me.getClearAlpha(),s=n.r,r=n.g,a=n.b;t?(p[0]=s,p[1]=r,p[2]=a,p[3]=i,Re.clearBufferuiv(Re.COLOR,0,p)):(m[0]=s,m[1]=r,m[2]=a,m[3]=i,Re.clearBufferiv(Re.COLOR,0,m))}else i|=Re.COLOR_BUFFER_BIT}t&&(i|=Re.DEPTH_BUFFER_BIT),n&&(i|=Re.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),Re.clear(i)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){n.removeEventListener("webglcontextlost",Ue,!1),n.removeEventListener("webglcontextrestored",De,!1),n.removeEventListener("webglcontextcreationerror",Ne,!1),ve.dispose(),_e.dispose(),le.dispose(),he.dispose(),de.dispose(),me.dispose(),Te.dispose(),Ae.dispose(),fe.dispose(),Le.dispose(),Le.removeEventListener("sessionstart",Be),Le.removeEventListener("sessionend",Ge),J&&(J.dispose(),J=null),Ve.stop()},this.renderBufferDirect=function(e,t,n,i,s,r){null===t&&(t=ee);const a=s.isMesh&&s.matrixWorld.determinant()<0,o=function(e,t,n,i,s){!0!==t.isScene&&(t=ee);ce.resetTextureUnits();const r=t.fog,a=i.isMeshStandardMaterial?t.environment:null,o=null===E?y.outputColorSpace:!0===E.isXRRenderTarget?E.texture.colorSpace:re,l=(i.isMeshStandardMaterial?de:he).get(i.envMap||a),c=!0===i.vertexColors&&!!n.attributes.color&&4===n.attributes.color.itemSize,h=!!n.attributes.tangent&&(!!i.normalMap||i.anisotropy>0),d=!!n.morphAttributes.position,u=!!n.morphAttributes.normal,p=!!n.morphAttributes.color;let m=0;i.toneMapped&&(null!==E&&!0!==E.isXRRenderTarget||(m=y.toneMapping));const f=n.morphAttributes.position||n.morphAttributes.normal||n.morphAttributes.color,v=void 0!==f?f.length:0,_=le.get(i),x=g.state.lights;if(!0===B&&(!0===W||e!==b)){const t=e===b&&i.id===w;ye.setState(i,e,t)}let M=!1;i.version===_.__version?_.needsLights&&_.lightsStateVersion!==x.state.version||_.outputColorSpace!==o||s.isBatchedMesh&&!1===_.batching?M=!0:s.isBatchedMesh||!0!==_.batching?s.isInstancedMesh&&!1===_.instancing?M=!0:s.isInstancedMesh||!0!==_.instancing?s.isSkinnedMesh&&!1===_.skinning?M=!0:s.isSkinnedMesh||!0!==_.skinning?s.isInstancedMesh&&!0===_.instancingColor&&null===s.instanceColor||s.isInstancedMesh&&!1===_.instancingColor&&null!==s.instanceColor||s.isInstancedMesh&&!0===_.instancingMorph&&null===s.morphTexture||s.isInstancedMesh&&!1===_.instancingMorph&&null!==s.morphTexture||_.envMap!==l||!0===i.fog&&_.fog!==r?M=!0:void 0===_.numClippingPlanes||_.numClippingPlanes===ye.numPlanes&&_.numIntersection===ye.numIntersection?(_.vertexAlphas!==c||_.vertexTangents!==h||_.morphTargets!==d||_.morphNormals!==u||_.morphColors!==p||_.toneMapping!==m||!0===ie.isWebGL2&&_.morphTargetsCount!==v)&&(M=!0):M=!0:M=!0:M=!0:M=!0:(M=!0,_.__version=i.version);let S=_.currentProgram;!0===M&&(S=Ye(i,t,s));let T=!1,A=!1,R=!1;const C=S.getUniforms(),P=_.uniforms;ae.useProgram(S.program)&&(T=!0,A=!0,R=!0);i.id!==w&&(w=i.id,A=!0);if(T||b!==e){C.setValue(Re,"projectionMatrix",e.projectionMatrix),C.setValue(Re,"viewMatrix",e.matrixWorldInverse);const t=C.map.cameraPosition;void 0!==t&&t.setValue(Re,Q.setFromMatrixPosition(e.matrixWorld)),ie.logarithmicDepthBuffer&&C.setValue(Re,"logDepthBufFC",2/(Math.log(e.far+1)/Math.LN2)),(i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshLambertMaterial||i.isMeshBasicMaterial||i.isMeshStandardMaterial||i.isShaderMaterial)&&C.setValue(Re,"isOrthographic",!0===e.isOrthographicCamera),b!==e&&(b=e,A=!0,R=!0)}if(s.isSkinnedMesh){C.setOptional(Re,s,"bindMatrix"),C.setOptional(Re,s,"bindMatrixInverse");const e=s.skeleton;e&&(ie.floatVertexTextures?(null===e.boneTexture&&e.computeBoneTexture(),C.setValue(Re,"boneTexture",e.boneTexture,ce)):console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required."))}s.isBatchedMesh&&(C.setOptional(Re,s,"batchingTexture"),C.setValue(Re,"batchingTexture",s._matricesTexture,ce));const L=n.morphAttributes;(void 0!==L.position||void 0!==L.normal||void 0!==L.color&&!0===ie.isWebGL2)&&Se.update(s,n,S);(A||_.receiveShadow!==s.receiveShadow)&&(_.receiveShadow=s.receiveShadow,C.setValue(Re,"receiveShadow",s.receiveShadow));i.isMeshGouraudMaterial&&null!==i.envMap&&(P.envMap.value=l,P.flipEnvMap.value=l.isCubeTexture&&!1===l.isRenderTargetTexture?-1:1);A&&(C.setValue(Re,"toneMappingExposure",y.toneMappingExposure),_.needsLights&&(N=R,(D=P).ambientLightColor.needsUpdate=N,D.lightProbe.needsUpdate=N,D.directionalLights.needsUpdate=N,D.directionalLightShadows.needsUpdate=N,D.pointLights.needsUpdate=N,D.pointLightShadows.needsUpdate=N,D.spotLights.needsUpdate=N,D.spotLightShadows.needsUpdate=N,D.rectAreaLights.needsUpdate=N,D.hemisphereLights.needsUpdate=N),r&&!0===i.fog&&ge.refreshFogUniforms(P,r),ge.refreshMaterialUniforms(P,i,I,U,J),Rr.upload(Re,Ke(_),P,ce));var D,N;i.isShaderMaterial&&!0===i.uniformsNeedUpdate&&(Rr.upload(Re,Ke(_),P,ce),i.uniformsNeedUpdate=!1);i.isSpriteMaterial&&C.setValue(Re,"center",s.center);if(C.setValue(Re,"modelViewMatrix",s.modelViewMatrix),C.setValue(Re,"normalMatrix",s.normalMatrix),C.setValue(Re,"modelMatrix",s.matrixWorld),i.isShaderMaterial||i.isRawShaderMaterial){const e=i.uniformsGroups;for(let t=0,n=e.length;t<n;t++)if(ie.isWebGL2){const n=e[t];Ae.update(n,S),Ae.bind(n,S)}else console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.")}return S}(e,t,n,i,s);ae.setMaterial(i,a);let l=n.index,c=1;if(!0===i.wireframe){if(l=pe.getWireframeAttribute(n),void 0===l)return;c=2}const h=n.drawRange,d=n.attributes.position;let u=h.start*c,p=(h.start+h.count)*c;null!==r&&(u=Math.max(u,r.start*c),p=Math.min(p,(r.start+r.count)*c)),null!==l?(u=Math.max(u,0),p=Math.min(p,l.count)):null!=d&&(u=Math.max(u,0),p=Math.min(p,d.count));const m=p-u;if(m<0||m===1/0)return;let f;Te.setup(s,i,o,n,l);let v=Ee;if(null!==l&&(f=ue.get(l),v=we,v.setIndex(f)),s.isMesh)!0===i.wireframe?(ae.setLineWidth(i.wireframeLinewidth*te()),v.setMode(Re.LINES)):v.setMode(Re.TRIANGLES);else if(s.isLine){let e=i.linewidth;void 0===e&&(e=1),ae.setLineWidth(e*te()),s.isLineSegments?v.setMode(Re.LINES):s.isLineLoop?v.setMode(Re.LINE_LOOP):v.setMode(Re.LINE_STRIP)}else s.isPoints?v.setMode(Re.POINTS):s.isSprite&&v.setMode(Re.TRIANGLES);if(s.isBatchedMesh)v.renderMultiDraw(s._multiDrawStarts,s._multiDrawCounts,s._multiDrawCount);else if(s.isInstancedMesh)v.renderInstances(u,m,s.count);else if(n.isInstancedBufferGeometry){const e=void 0!==n._maxInstanceCount?n._maxInstanceCount:1/0,t=Math.min(n.instanceCount,e);v.renderInstances(u,m,t)}else v.render(u,m)},this.compile=function(e,t,n=null){null===n&&(n=e),g=_e.get(n),g.init(),_.push(g),n.traverseVisible((function(e){e.isLight&&e.layers.test(t.layers)&&(g.pushLight(e),e.castShadow&&g.pushShadow(e))})),e!==n&&e.traverseVisible((function(e){e.isLight&&e.layers.test(t.layers)&&(g.pushLight(e),e.castShadow&&g.pushShadow(e))})),g.setupLights(y._useLegacyLights);const i=new Set;return e.traverse((function(e){const t=e.material;if(t)if(Array.isArray(t))for(let s=0;s<t.length;s++){const r=t[s];ze(r,n,e),i.add(r)}else ze(t,n,e),i.add(t)})),_.pop(),g=null,i},this.compileAsync=function(e,t,n=null){const i=this.compile(e,t,n);return new Promise((t=>{function n(){i.forEach((function(e){le.get(e).currentProgram.isReady()&&i.delete(e)})),0!==i.size?setTimeout(n,10):t(e)}null!==ne.get("KHR_parallel_shader_compile")?n():setTimeout(n,10)}))};let ke=null;function Be(){Ve.stop()}function Ge(){Ve.start()}const Ve=new Oi;function We(e,t,n,i){if(!1===e.visible)return;if(e.layers.test(t.layers))if(e.isGroup)n=e.renderOrder;else if(e.isLOD)!0===e.autoUpdate&&e.update(t);else if(e.isLight)g.pushLight(e),e.castShadow&&g.pushShadow(e);else if(e.isSprite){if(!e.frustumCulled||k.intersectsSprite(e)){i&&Q.setFromMatrixPosition(e.matrixWorld).applyMatrix4(Z);const t=me.update(e),s=e.material;s.visible&&f.push(e,t,s,n,Q.z,null)}}else if((e.isMesh||e.isLine||e.isPoints)&&(!e.frustumCulled||k.intersectsObject(e))){const t=me.update(e),s=e.material;if(i&&(void 0!==e.boundingSphere?(null===e.boundingSphere&&e.computeBoundingSphere(),Q.copy(e.boundingSphere.center)):(null===t.boundingSphere&&t.computeBoundingSphere(),Q.copy(t.boundingSphere.center)),Q.applyMatrix4(e.matrixWorld).applyMatrix4(Z)),Array.isArray(s)){const i=t.groups;for(let r=0,a=i.length;r<a;r++){const a=i[r],o=s[a.materialIndex];o&&o.visible&&f.push(e,t,o,n,Q.z,a)}}else s.visible&&f.push(e,t,s,n,Q.z,null)}const s=e.children;for(let r=0,a=s.length;r<a;r++)We(s[r],t,n,i)}function Xe(e,t,n,i){const s=e.opaque,r=e.transmissive,a=e.transparent;g.setupLightsView(n),!0===B&&ye.setGlobalState(y.clippingPlanes,n),r.length>0&&function(e,t,n,i){const s=!0===n.isScene?n.overrideMaterial:null;if(null!==s)return;const r=ie.isWebGL2;null===J&&(J=new at(1,1,{generateMipmaps:!0,type:ne.has("EXT_color_buffer_half_float")?q:H,minFilter:G,samples:r?4:0}));y.getDrawingBufferSize($),r?J.setSize($.x,$.y):J.setSize(Ie($.x),Ie($.y));const a=y.getRenderTarget();y.setRenderTarget(J),y.getClearColor(C),P=y.getClearAlpha(),P<1&&y.setClearColor(16777215,.5);y.clear();const o=y.toneMapping;y.toneMapping=0,je(e,n,i),ce.updateMultisampleRenderTarget(J),ce.updateRenderTargetMipmap(J);let l=!1;for(let c=0,h=t.length;c<h;c++){const e=t[c],s=e.object,r=e.geometry,a=e.material,o=e.group;if(2===a.side&&s.layers.test(i.layers)){const e=a.side;a.side=1,a.needsUpdate=!0,qe(s,n,i,r,a,o),a.side=e,a.needsUpdate=!0,l=!0}}!0===l&&(ce.updateMultisampleRenderTarget(J),ce.updateRenderTargetMipmap(J));y.setRenderTarget(a),y.setClearColor(C,P),y.toneMapping=o}(s,r,t,n),i&&ae.viewport(T.copy(i)),s.length>0&&je(s,t,n),r.length>0&&je(r,t,n),a.length>0&&je(a,t,n),ae.buffers.depth.setTest(!0),ae.buffers.depth.setMask(!0),ae.buffers.color.setMask(!0),ae.setPolygonOffset(!1)}function je(e,t,n){const i=!0===t.isScene?t.overrideMaterial:null;for(let s=0,r=e.length;s<r;s++){const r=e[s],a=r.object,o=r.geometry,l=null===i?r.material:i,c=r.group;a.layers.test(n.layers)&&qe(a,t,n,o,l,c)}}function qe(e,t,n,i,s,r){e.onBeforeRender(y,t,n,i,s,r),e.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,e.matrixWorld),e.normalMatrix.getNormalMatrix(e.modelViewMatrix),s.onBeforeRender(y,t,n,i,e,r),!0===s.transparent&&2===s.side&&!1===s.forceSinglePass?(s.side=1,s.needsUpdate=!0,y.renderBufferDirect(n,t,i,s,e,r),s.side=0,s.needsUpdate=!0,y.renderBufferDirect(n,t,i,s,e,r),s.side=2):y.renderBufferDirect(n,t,i,s,e,r),e.onAfterRender(y,t,n,i,s,r)}function Ye(e,t,n){!0!==t.isScene&&(t=ee);const i=le.get(e),s=g.state.lights,r=g.state.shadowsArray,a=s.state.version,o=fe.getParameters(e,s.state,r,t,n),l=fe.getProgramCacheKey(o);let c=i.programs;i.environment=e.isMeshStandardMaterial?t.environment:null,i.fog=t.fog,i.envMap=(e.isMeshStandardMaterial?de:he).get(e.envMap||i.environment),i.envMapRotation=null!==i.environment&&null===e.envMap?t.environmentRotation:e.envMapRotation,void 0===c&&(e.addEventListener("dispose",Oe),c=new Map,i.programs=c);let h=c.get(l);if(void 0!==h){if(i.currentProgram===h&&i.lightsStateVersion===a)return Je(e,o),h}else o.uniforms=fe.getUniforms(e),e.onBuild(n,o,y),e.onBeforeCompile(o,y),h=fe.acquireProgram(o,l),c.set(l,h),i.uniforms=o.uniforms;const d=i.uniforms;return(e.isShaderMaterial||e.isRawShaderMaterial)&&!0!==e.clipping||(d.clippingPlanes=ye.uniform),Je(e,o),i.needsLights=function(e){return e.isMeshLambertMaterial||e.isMeshToonMaterial||e.isMeshPhongMaterial||e.isMeshStandardMaterial||e.isShadowMaterial||e.isShaderMaterial&&!0===e.lights}(e),i.lightsStateVersion=a,i.needsLights&&(d.ambientLightColor.value=s.state.ambient,d.lightProbe.value=s.state.probe,d.directionalLights.value=s.state.directional,d.directionalLightShadows.value=s.state.directionalShadow,d.spotLights.value=s.state.spot,d.spotLightShadows.value=s.state.spotShadow,d.rectAreaLights.value=s.state.rectArea,d.ltc_1.value=s.state.rectAreaLTC1,d.ltc_2.value=s.state.rectAreaLTC2,d.pointLights.value=s.state.point,d.pointLightShadows.value=s.state.pointShadow,d.hemisphereLights.value=s.state.hemi,d.directionalShadowMap.value=s.state.directionalShadowMap,d.directionalShadowMatrix.value=s.state.directionalShadowMatrix,d.spotShadowMap.value=s.state.spotShadowMap,d.spotLightMatrix.value=s.state.spotLightMatrix,d.spotLightMap.value=s.state.spotLightMap,d.pointShadowMap.value=s.state.pointShadowMap,d.pointShadowMatrix.value=s.state.pointShadowMatrix),i.currentProgram=h,i.uniformsList=null,h}function Ke(e){if(null===e.uniformsList){const t=e.currentProgram.getUniforms();e.uniformsList=Rr.seqWithValue(t.seq,e.uniforms)}return e.uniformsList}function Je(e,t){const n=le.get(e);n.outputColorSpace=t.outputColorSpace,n.batching=t.batching,n.instancing=t.instancing,n.instancingColor=t.instancingColor,n.instancingMorph=t.instancingMorph,n.skinning=t.skinning,n.morphTargets=t.morphTargets,n.morphNormals=t.morphNormals,n.morphColors=t.morphColors,n.morphTargetsCount=t.morphTargetsCount,n.numClippingPlanes=t.numClippingPlanes,n.numIntersection=t.numClipIntersection,n.vertexAlphas=t.vertexAlphas,n.vertexTangents=t.vertexTangents,n.toneMapping=t.toneMapping}Ve.setAnimationLoop((function(e){ke&&ke(e)})),"undefined"!=typeof self&&Ve.setContext(self),this.setAnimationLoop=function(e){ke=e,Le.setAnimationLoop(e),null===e?Ve.stop():Ve.start()},Le.addEventListener("sessionstart",Be),Le.addEventListener("sessionend",Ge),this.render=function(e,t){if(void 0!==t&&!0!==t.isCamera)return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");if(!0===x)return;!0===e.matrixWorldAutoUpdate&&e.updateMatrixWorld(),null===t.parent&&!0===t.matrixWorldAutoUpdate&&t.updateMatrixWorld(),!0===Le.enabled&&!0===Le.isPresenting&&(!0===Le.cameraAutoUpdate&&Le.updateCamera(t),t=Le.getCamera()),!0===e.isScene&&e.onBeforeRender(y,e,t,E),g=_e.get(e,_.length),g.init(),_.push(g),Z.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),k.setFromProjectionMatrix(Z),W=this.localClippingEnabled,B=ye.init(this.clippingPlanes,W),f=ve.get(e,v.length),f.init(),v.push(f),We(e,t,0,y.sortObjects),f.finish(),!0===y.sortObjects&&f.sort(D,N),this.info.render.frame++,!0===B&&ye.beginShadows();const n=g.state.shadowsArray;if(xe.render(n,e,t),!0===B&&ye.endShadows(),!0===this.info.autoReset&&this.info.reset(),!1!==Le.enabled&&!1!==Le.isPresenting&&!1!==Le.hasDepthSensing()||Me.render(f,e),g.setupLights(y._useLegacyLights),t.isArrayCamera){const n=t.cameras;for(let t=0,i=n.length;t<i;t++){const i=n[t];Xe(f,e,i,i.viewport)}}else Xe(f,e,t);null!==E&&(ce.updateMultisampleRenderTarget(E),ce.updateRenderTargetMipmap(E)),!0===e.isScene&&e.onAfterRender(y,e,t),Te.resetDefaultState(),w=-1,b=null,_.pop(),g=_.length>0?_[_.length-1]:null,v.pop(),f=v.length>0?v[v.length-1]:null},this.getActiveCubeFace=function(){return M},this.getActiveMipmapLevel=function(){return S},this.getRenderTarget=function(){return E},this.setRenderTargetTextures=function(e,t,n){le.get(e.texture).__webglTexture=t,le.get(e.depthTexture).__webglTexture=n;const i=le.get(e);i.__hasExternalTextures=!0,i.__autoAllocateDepthBuffer=void 0===n,i.__autoAllocateDepthBuffer||!0===ne.has("WEBGL_multisampled_render_to_texture")&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),i.__useRenderToTexture=!1)},this.setRenderTargetFramebuffer=function(e,t){const n=le.get(e);n.__webglFramebuffer=t,n.__useDefaultFramebuffer=void 0===t},this.setRenderTarget=function(e,t=0,n=0){E=e,M=t,S=n;let i=!0,s=null,r=!1,a=!1;if(e){const o=le.get(e);void 0!==o.__useDefaultFramebuffer?(ae.bindFramebuffer(Re.FRAMEBUFFER,null),i=!1):void 0===o.__webglFramebuffer?ce.setupRenderTarget(e):o.__hasExternalTextures&&ce.rebindTextures(e,le.get(e.texture).__webglTexture,le.get(e.depthTexture).__webglTexture);const l=e.texture;(l.isData3DTexture||l.isDataArrayTexture||l.isCompressedArrayTexture)&&(a=!0);const c=le.get(e).__webglFramebuffer;e.isWebGLCubeRenderTarget?(s=Array.isArray(c[t])?c[t][n]:c[t],r=!0):s=ie.isWebGL2&&e.samples>0&&!1===ce.useMultisampledRTT(e)?le.get(e).__webglMultisampledFramebuffer:Array.isArray(c)?c[n]:c,T.copy(e.viewport),A.copy(e.scissor),R=e.scissorTest}else T.copy(O).multiplyScalar(I).floor(),A.copy(F).multiplyScalar(I).floor(),R=z;if(ae.bindFramebuffer(Re.FRAMEBUFFER,s)&&ie.drawBuffers&&i&&ae.drawBuffers(e,s),ae.viewport(T),ae.scissor(A),ae.setScissorTest(R),r){const i=le.get(e.texture);Re.framebufferTexture2D(Re.FRAMEBUFFER,Re.COLOR_ATTACHMENT0,Re.TEXTURE_CUBE_MAP_POSITIVE_X+t,i.__webglTexture,n)}else if(a){const i=le.get(e.texture),s=t||0;Re.framebufferTextureLayer(Re.FRAMEBUFFER,Re.COLOR_ATTACHMENT0,i.__webglTexture,n||0,s)}w=-1},this.readRenderTargetPixels=function(e,t,n,i,s,r,a){if(!e||!e.isWebGLRenderTarget)return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let o=le.get(e).__webglFramebuffer;if(e.isWebGLCubeRenderTarget&&void 0!==a&&(o=o[a]),o){ae.bindFramebuffer(Re.FRAMEBUFFER,o);try{const a=e.texture,o=a.format,l=a.type;if(o!==K&&be.convert(o)!==Re.getParameter(Re.IMPLEMENTATION_COLOR_READ_FORMAT))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");const c=l===q&&(ne.has("EXT_color_buffer_half_float")||ie.isWebGL2&&ne.has("EXT_color_buffer_float"));if(!(l===H||be.convert(l)===Re.getParameter(Re.IMPLEMENTATION_COLOR_READ_TYPE)||l===j&&(ie.isWebGL2||ne.has("OES_texture_float")||ne.has("WEBGL_color_buffer_float"))||c))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");t>=0&&t<=e.width-i&&n>=0&&n<=e.height-s&&Re.readPixels(t,n,i,s,be.convert(o),be.convert(l),r)}finally{const e=null!==E?le.get(E).__webglFramebuffer:null;ae.bindFramebuffer(Re.FRAMEBUFFER,e)}}},this.copyFramebufferToTexture=function(e,t,n=0){const i=Math.pow(2,-n),s=Math.floor(t.image.width*i),r=Math.floor(t.image.height*i);ce.setTexture2D(t,0),Re.copyTexSubImage2D(Re.TEXTURE_2D,n,0,0,e.x,e.y,s,r),ae.unbindTexture()},this.copyTextureToTexture=function(e,t,n,i=0){const s=t.image.width,r=t.image.height,a=be.convert(n.format),o=be.convert(n.type);ce.setTexture2D(n,0),Re.pixelStorei(Re.UNPACK_FLIP_Y_WEBGL,n.flipY),Re.pixelStorei(Re.UNPACK_PREMULTIPLY_ALPHA_WEBGL,n.premultiplyAlpha),Re.pixelStorei(Re.UNPACK_ALIGNMENT,n.unpackAlignment),t.isDataTexture?Re.texSubImage2D(Re.TEXTURE_2D,i,e.x,e.y,s,r,a,o,t.image.data):t.isCompressedTexture?Re.compressedTexSubImage2D(Re.TEXTURE_2D,i,e.x,e.y,t.mipmaps[0].width,t.mipmaps[0].height,a,t.mipmaps[0].data):Re.texSubImage2D(Re.TEXTURE_2D,i,e.x,e.y,a,o,t.image),0===i&&n.generateMipmaps&&Re.generateMipmap(Re.TEXTURE_2D),ae.unbindTexture()},this.copyTextureToTexture3D=function(e,t,n,i,s=0){if(y.isWebGL1Renderer)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");const r=Math.round(e.max.x-e.min.x),a=Math.round(e.max.y-e.min.y),o=e.max.z-e.min.z+1,l=be.convert(i.format),c=be.convert(i.type);let h;if(i.isData3DTexture)ce.setTexture3D(i,0),h=Re.TEXTURE_3D;else{if(!i.isDataArrayTexture&&!i.isCompressedArrayTexture)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");ce.setTexture2DArray(i,0),h=Re.TEXTURE_2D_ARRAY}Re.pixelStorei(Re.UNPACK_FLIP_Y_WEBGL,i.flipY),Re.pixelStorei(Re.UNPACK_PREMULTIPLY_ALPHA_WEBGL,i.premultiplyAlpha),Re.pixelStorei(Re.UNPACK_ALIGNMENT,i.unpackAlignment);const d=Re.getParameter(Re.UNPACK_ROW_LENGTH),u=Re.getParameter(Re.UNPACK_IMAGE_HEIGHT),p=Re.getParameter(Re.UNPACK_SKIP_PIXELS),m=Re.getParameter(Re.UNPACK_SKIP_ROWS),f=Re.getParameter(Re.UNPACK_SKIP_IMAGES),g=n.isCompressedTexture?n.mipmaps[s]:n.image;Re.pixelStorei(Re.UNPACK_ROW_LENGTH,g.width),Re.pixelStorei(Re.UNPACK_IMAGE_HEIGHT,g.height),Re.pixelStorei(Re.UNPACK_SKIP_PIXELS,e.min.x),Re.pixelStorei(Re.UNPACK_SKIP_ROWS,e.min.y),Re.pixelStorei(Re.UNPACK_SKIP_IMAGES,e.min.z),n.isDataTexture||n.isData3DTexture?Re.texSubImage3D(h,s,t.x,t.y,t.z,r,a,o,l,c,g.data):i.isCompressedArrayTexture?Re.compressedTexSubImage3D(h,s,t.x,t.y,t.z,r,a,o,l,g.data):Re.texSubImage3D(h,s,t.x,t.y,t.z,r,a,o,l,c,g),Re.pixelStorei(Re.UNPACK_ROW_LENGTH,d),Re.pixelStorei(Re.UNPACK_IMAGE_HEIGHT,u),Re.pixelStorei(Re.UNPACK_SKIP_PIXELS,p),Re.pixelStorei(Re.UNPACK_SKIP_ROWS,m),Re.pixelStorei(Re.UNPACK_SKIP_IMAGES,f),0===s&&i.generateMipmaps&&Re.generateMipmap(h),ae.unbindTexture()},this.initTexture=function(e){e.isCubeTexture?ce.setTextureCube(e,0):e.isData3DTexture?ce.setTexture3D(e,0):e.isDataArrayTexture||e.isCompressedArrayTexture?ce.setTexture2DArray(e,0):ce.setTexture2D(e,0),ae.unbindTexture()},this.resetState=function(){M=0,S=0,E=null,ae.reset(),Te.reset()},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return Ee}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(e){this._outputColorSpace=e;const t=this.getContext();t.drawingBufferColorSpace=e===ae?"display-p3":"srgb",t.unpackColorSpace=Ye.workingColorSpace===oe?"display-p3":"srgb"}get useLegacyLights(){return console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."),this._useLegacyLights}set useLegacyLights(e){console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."),this._useLegacyLights=e}}(class extends Ea{}).prototype.isWebGL1Renderer=!0;class wa{constructor(e,t=25e-5){this.isFogExp2=!0,this.name="",this.color=new Pn(e),this.density=t}clone(){return new wa(this.color,this.density)}toJSON(){return{type:"FogExp2",name:this.name,color:this.color.getHex(),density:this.density}}}class ba extends mn{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.backgroundRotation=new Jt,this.environmentRotation=new Jt,this.overrideMaterial=null,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(e,t){return super.copy(e,t),null!==e.background&&(this.background=e.background.clone()),null!==e.environment&&(this.environment=e.environment.clone()),null!==e.fog&&(this.fog=e.fog.clone()),this.backgroundBlurriness=e.backgroundBlurriness,this.backgroundIntensity=e.backgroundIntensity,this.backgroundRotation.copy(e.backgroundRotation),this.environmentRotation.copy(e.environmentRotation),null!==e.overrideMaterial&&(this.overrideMaterial=e.overrideMaterial.clone()),this.matrixAutoUpdate=e.matrixAutoUpdate,this}toJSON(e){const t=super.toJSON(e);return null!==this.fog&&(t.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(t.object.backgroundBlurriness=this.backgroundBlurriness),1!==this.backgroundIntensity&&(t.object.backgroundIntensity=this.backgroundIntensity),t.object.backgroundRotation=this.backgroundRotation.toArray(),t.object.environmentRotation=this.environmentRotation.toArray(),t}}class Ta extends In{constructor(e){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new Pn(16777215),this.map=null,this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this.fog=e.fog,this}}const Aa=new ht,Ra=new ht,Ca=new Bt,Pa=new kt,La=new Lt;class Ua extends mn{constructor(e=new Yn,t=new Ta){super(),this.isLine=!0,this.type="Line",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}computeLineDistances(){const e=this.geometry;if(null===e.index){const t=e.attributes.position,n=[0];for(let e=1,i=t.count;e<i;e++)Aa.fromBufferAttribute(t,e-1),Ra.fromBufferAttribute(t,e),n[e]=n[e-1],n[e]+=Aa.distanceTo(Ra);e.setAttribute("lineDistance",new Bn(n,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(e,t){const n=this.geometry,i=this.matrixWorld,s=e.params.Line.threshold,r=n.drawRange;if(null===n.boundingSphere&&n.computeBoundingSphere(),La.copy(n.boundingSphere),La.applyMatrix4(i),La.radius+=s,!1===e.ray.intersectsSphere(La))return;Ca.copy(i).invert(),Pa.copy(e.ray).applyMatrix4(Ca);const a=s/((this.scale.x+this.scale.y+this.scale.z)/3),o=a*a,l=new ht,c=new ht,h=new ht,d=new ht,u=this.isLineSegments?2:1,p=n.index,m=n.attributes.position;if(null!==p){for(let n=Math.max(0,r.start),i=Math.min(p.count,r.start+r.count)-1;n<i;n+=u){const i=p.getX(n),s=p.getX(n+1);l.fromBufferAttribute(m,i),c.fromBufferAttribute(m,s);if(Pa.distanceSqToSegment(l,c,d,h)>o)continue;d.applyMatrix4(this.matrixWorld);const r=e.ray.origin.distanceTo(d);r<e.near||r>e.far||t.push({distance:r,point:h.clone().applyMatrix4(this.matrixWorld),index:n,face:null,faceIndex:null,object:this})}}else{for(let n=Math.max(0,r.start),i=Math.min(m.count,r.start+r.count)-1;n<i;n+=u){l.fromBufferAttribute(m,n),c.fromBufferAttribute(m,n+1);if(Pa.distanceSqToSegment(l,c,d,h)>o)continue;d.applyMatrix4(this.matrixWorld);const i=e.ray.origin.distanceTo(d);i<e.near||i>e.far||t.push({distance:i,point:h.clone().applyMatrix4(this.matrixWorld),index:n,face:null,faceIndex:null,object:this})}}}updateMorphTargets(){const e=this.geometry.morphAttributes,t=Object.keys(e);if(t.length>0){const n=e[t[0]];if(void 0!==n){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,t=n.length;e<t;e++){const t=n[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[t]=e}}}}}const Ia=new ht,Da=new ht;class Na extends Ua{constructor(e,t){super(e,t),this.isLineSegments=!0,this.type="LineSegments"}computeLineDistances(){const e=this.geometry;if(null===e.index){const t=e.attributes.position,n=[];for(let e=0,i=t.count;e<i;e+=2)Ia.fromBufferAttribute(t,e),Da.fromBufferAttribute(t,e+1),n[e]=0===e?0:n[e-1],n[e+1]=n[e]+Ia.distanceTo(Da);e.setAttribute("lineDistance",new Bn(n,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}}class Oa extends In{constructor(e){super(),this.isPointsMaterial=!0,this.type="PointsMaterial",this.color=new Pn(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.size=e.size,this.sizeAttenuation=e.sizeAttenuation,this.fog=e.fog,this}}const Fa=new Bt,za=new kt,ka=new Lt,Ba=new ht;class Ga extends mn{constructor(e=new Yn,t=new Oa){super(),this.isPoints=!0,this.type="Points",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}raycast(e,t){const n=this.geometry,i=this.matrixWorld,s=e.params.Points.threshold,r=n.drawRange;if(null===n.boundingSphere&&n.computeBoundingSphere(),ka.copy(n.boundingSphere),ka.applyMatrix4(i),ka.radius+=s,!1===e.ray.intersectsSphere(ka))return;Fa.copy(i).invert(),za.copy(e.ray).applyMatrix4(Fa);const a=s/((this.scale.x+this.scale.y+this.scale.z)/3),o=a*a,l=n.index,c=n.attributes.position;if(null!==l){for(let n=Math.max(0,r.start),s=Math.min(l.count,r.start+r.count);n<s;n++){const s=l.getX(n);Ba.fromBufferAttribute(c,s),Ha(Ba,s,o,i,e,t,this)}}else{for(let n=Math.max(0,r.start),s=Math.min(c.count,r.start+r.count);n<s;n++)Ba.fromBufferAttribute(c,n),Ha(Ba,n,o,i,e,t,this)}}updateMorphTargets(){const e=this.geometry.morphAttributes,t=Object.keys(e);if(t.length>0){const n=e[t[0]];if(void 0!==n){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,t=n.length;e<t;e++){const t=n[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[t]=e}}}}}function Ha(e,t,n,i,s,r,a){const o=za.distanceSqToPoint(e);if(o<n){const n=new ht;za.closestPointToPoint(e,n),n.applyMatrix4(i);const l=s.ray.origin.distanceTo(n);if(l<s.near||l>s.far)return;r.push({distance:l,distanceToRay:Math.sqrt(o),point:n,index:t,face:null,object:a})}}class Va{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(e,t){const n=this.getUtoTmapping(e);return this.getPoint(n,t)}getPoints(e=5){const t=[];for(let n=0;n<=e;n++)t.push(this.getPoint(n/e));return t}getSpacedPoints(e=5){const t=[];for(let n=0;n<=e;n++)t.push(this.getPointAt(n/e));return t}getLength(){const e=this.getLengths();return e[e.length-1]}getLengths(e=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===e+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const t=[];let n,i=this.getPoint(0),s=0;t.push(0);for(let r=1;r<=e;r++)n=this.getPoint(r/e),s+=n.distanceTo(i),t.push(s),i=n;return this.cacheArcLengths=t,t}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(e,t){const n=this.getLengths();let i=0;const s=n.length;let r;r=t||e*n[s-1];let a,o=0,l=s-1;for(;o<=l;)if(i=Math.floor(o+(l-o)/2),a=n[i]-r,a<0)o=i+1;else{if(!(a>0)){l=i;break}l=i-1}if(i=l,n[i]===r)return i/(s-1);const c=n[i];return(i+(r-c)/(n[i+1]-c))/(s-1)}getTangent(e,t){const n=1e-4;let i=e-n,s=e+n;i<0&&(i=0),s>1&&(s=1);const r=this.getPoint(i),a=this.getPoint(s),o=t||(r.isVector2?new Fe:new ht);return o.copy(a).sub(r).normalize(),o}getTangentAt(e,t){const n=this.getUtoTmapping(e);return this.getTangent(n,t)}computeFrenetFrames(e,t){const n=new ht,i=[],s=[],r=[],a=new ht,o=new Bt;for(let u=0;u<=e;u++){const t=u/e;i[u]=this.getTangentAt(t,new ht)}s[0]=new ht,r[0]=new ht;let l=Number.MAX_VALUE;const c=Math.abs(i[0].x),h=Math.abs(i[0].y),d=Math.abs(i[0].z);c<=l&&(l=c,n.set(1,0,0)),h<=l&&(l=h,n.set(0,1,0)),d<=l&&n.set(0,0,1),a.crossVectors(i[0],n).normalize(),s[0].crossVectors(i[0],a),r[0].crossVectors(i[0],s[0]);for(let u=1;u<=e;u++){if(s[u]=s[u-1].clone(),r[u]=r[u-1].clone(),a.crossVectors(i[u-1],i[u]),a.length()>Number.EPSILON){a.normalize();const e=Math.acos(Pe(i[u-1].dot(i[u]),-1,1));s[u].applyMatrix4(o.makeRotationAxis(a,e))}r[u].crossVectors(i[u],s[u])}if(!0===t){let t=Math.acos(Pe(s[0].dot(s[e]),-1,1));t/=e,i[0].dot(a.crossVectors(s[0],s[e]))>0&&(t=-t);for(let n=1;n<=e;n++)s[n].applyMatrix4(o.makeRotationAxis(i[n],t*n)),r[n].crossVectors(i[n],s[n])}return{tangents:i,normals:s,binormals:r}}clone(){return(new this.constructor).copy(this)}copy(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}toJSON(){const e={metadata:{version:4.6,type:"Curve",generator:"Curve.toJSON"}};return e.arcLengthDivisions=this.arcLengthDivisions,e.type=this.type,e}fromJSON(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}}class Wa extends Va{constructor(e=0,t=0,n=1,i=1,s=0,r=2*Math.PI,a=!1,o=0){super(),this.isEllipseCurve=!0,this.type="EllipseCurve",this.aX=e,this.aY=t,this.xRadius=n,this.yRadius=i,this.aStartAngle=s,this.aEndAngle=r,this.aClockwise=a,this.aRotation=o}getPoint(e,t=new Fe){const n=t,i=2*Math.PI;let s=this.aEndAngle-this.aStartAngle;const r=Math.abs(s)<Number.EPSILON;for(;s<0;)s+=i;for(;s>i;)s-=i;s<Number.EPSILON&&(s=r?0:i),!0!==this.aClockwise||r||(s===i?s=-i:s-=i);const a=this.aStartAngle+e*s;let o=this.aX+this.xRadius*Math.cos(a),l=this.aY+this.yRadius*Math.sin(a);if(0!==this.aRotation){const e=Math.cos(this.aRotation),t=Math.sin(this.aRotation),n=o-this.aX,i=l-this.aY;o=n*e-i*t+this.aX,l=n*t+i*e+this.aY}return n.set(o,l)}copy(e){return super.copy(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}toJSON(){const e=super.toJSON();return e.aX=this.aX,e.aY=this.aY,e.xRadius=this.xRadius,e.yRadius=this.yRadius,e.aStartAngle=this.aStartAngle,e.aEndAngle=this.aEndAngle,e.aClockwise=this.aClockwise,e.aRotation=this.aRotation,e}fromJSON(e){return super.fromJSON(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}}function Xa(){let e=0,t=0,n=0,i=0;function s(s,r,a,o){e=s,t=a,n=-3*s+3*r-2*a-o,i=2*s-2*r+a+o}return{initCatmullRom:function(e,t,n,i,r){s(t,n,r*(n-e),r*(i-t))},initNonuniformCatmullRom:function(e,t,n,i,r,a,o){let l=(t-e)/r-(n-e)/(r+a)+(n-t)/a,c=(n-t)/a-(i-t)/(a+o)+(i-n)/o;l*=a,c*=a,s(t,n,l,c)},calc:function(s){const r=s*s;return e+t*s+n*r+i*(r*s)}}}const ja=new ht,qa=new Xa,Ya=new Xa,Ka=new Xa;function Ja(e,t,n,i,s){const r=.5*(i-t),a=.5*(s-n),o=e*e;return(2*n-2*i+r+a)*(e*o)+(-3*n+3*i-2*r-a)*o+r*e+n}function Za(e,t,n,i){return function(e,t){const n=1-e;return n*n*t}(e,t)+function(e,t){return 2*(1-e)*e*t}(e,n)+function(e,t){return e*e*t}(e,i)}function $a(e,t,n,i,s){return function(e,t){const n=1-e;return n*n*n*t}(e,t)+function(e,t){const n=1-e;return 3*n*n*e*t}(e,n)+function(e,t){return 3*(1-e)*e*e*t}(e,i)+function(e,t){return e*e*e*t}(e,s)}class Qa extends Va{constructor(e=new Fe,t=new Fe,n=new Fe,i=new Fe){super(),this.isCubicBezierCurve=!0,this.type="CubicBezierCurve",this.v0=e,this.v1=t,this.v2=n,this.v3=i}getPoint(e,t=new Fe){const n=t,i=this.v0,s=this.v1,r=this.v2,a=this.v3;return n.set($a(e,i.x,s.x,r.x,a.x),$a(e,i.y,s.y,r.y,a.y)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}}class eo extends Va{constructor(e=new Fe,t=new Fe){super(),this.isLineCurve=!0,this.type="LineCurve",this.v1=e,this.v2=t}getPoint(e,t=new Fe){const n=t;return 1===e?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(e).add(this.v1)),n}getPointAt(e,t){return this.getPoint(e,t)}getTangent(e,t=new Fe){return t.subVectors(this.v2,this.v1).normalize()}getTangentAt(e,t){return this.getTangent(e,t)}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class to extends Va{constructor(e=new Fe,t=new Fe,n=new Fe){super(),this.isQuadraticBezierCurve=!0,this.type="QuadraticBezierCurve",this.v0=e,this.v1=t,this.v2=n}getPoint(e,t=new Fe){const n=t,i=this.v0,s=this.v1,r=this.v2;return n.set(Za(e,i.x,s.x,r.x),Za(e,i.y,s.y,r.y)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class no extends Va{constructor(e=[]){super(),this.isSplineCurve=!0,this.type="SplineCurve",this.points=e}getPoint(e,t=new Fe){const n=t,i=this.points,s=(i.length-1)*e,r=Math.floor(s),a=s-r,o=i[0===r?r:r-1],l=i[r],c=i[r>i.length-2?i.length-1:r+1],h=i[r>i.length-3?i.length-1:r+2];return n.set(Ja(a,o.x,l.x,c.x,h.x),Ja(a,o.y,l.y,c.y,h.y)),n}copy(e){super.copy(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const n=e.points[t];this.points.push(n.clone())}return this}toJSON(){const e=super.toJSON();e.points=[];for(let t=0,n=this.points.length;t<n;t++){const n=this.points[t];e.points.push(n.toArray())}return e}fromJSON(e){super.fromJSON(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const n=e.points[t];this.points.push((new Fe).fromArray(n))}return this}}var io=Object.freeze({__proto__:null,ArcCurve:class extends Wa{constructor(e,t,n,i,s,r){super(e,t,n,n,i,s,r),this.isArcCurve=!0,this.type="ArcCurve"}},CatmullRomCurve3:class extends Va{constructor(e=[],t=!1,n="centripetal",i=.5){super(),this.isCatmullRomCurve3=!0,this.type="CatmullRomCurve3",this.points=e,this.closed=t,this.curveType=n,this.tension=i}getPoint(e,t=new ht){const n=t,i=this.points,s=i.length,r=(s-(this.closed?0:1))*e;let a,o,l=Math.floor(r),c=r-l;this.closed?l+=l>0?0:(Math.floor(Math.abs(l)/s)+1)*s:0===c&&l===s-1&&(l=s-2,c=1),this.closed||l>0?a=i[(l-1)%s]:(ja.subVectors(i[0],i[1]).add(i[0]),a=ja);const h=i[l%s],d=i[(l+1)%s];if(this.closed||l+2<s?o=i[(l+2)%s]:(ja.subVectors(i[s-1],i[s-2]).add(i[s-1]),o=ja),"centripetal"===this.curveType||"chordal"===this.curveType){const e="chordal"===this.curveType?.5:.25;let t=Math.pow(a.distanceToSquared(h),e),n=Math.pow(h.distanceToSquared(d),e),i=Math.pow(d.distanceToSquared(o),e);n<1e-4&&(n=1),t<1e-4&&(t=n),i<1e-4&&(i=n),qa.initNonuniformCatmullRom(a.x,h.x,d.x,o.x,t,n,i),Ya.initNonuniformCatmullRom(a.y,h.y,d.y,o.y,t,n,i),Ka.initNonuniformCatmullRom(a.z,h.z,d.z,o.z,t,n,i)}else"catmullrom"===this.curveType&&(qa.initCatmullRom(a.x,h.x,d.x,o.x,this.tension),Ya.initCatmullRom(a.y,h.y,d.y,o.y,this.tension),Ka.initCatmullRom(a.z,h.z,d.z,o.z,this.tension));return n.set(qa.calc(c),Ya.calc(c),Ka.calc(c)),n}copy(e){super.copy(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const n=e.points[t];this.points.push(n.clone())}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}toJSON(){const e=super.toJSON();e.points=[];for(let t=0,n=this.points.length;t<n;t++){const n=this.points[t];e.points.push(n.toArray())}return e.closed=this.closed,e.curveType=this.curveType,e.tension=this.tension,e}fromJSON(e){super.fromJSON(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const n=e.points[t];this.points.push((new ht).fromArray(n))}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}},CubicBezierCurve:Qa,CubicBezierCurve3:class extends Va{constructor(e=new ht,t=new ht,n=new ht,i=new ht){super(),this.isCubicBezierCurve3=!0,this.type="CubicBezierCurve3",this.v0=e,this.v1=t,this.v2=n,this.v3=i}getPoint(e,t=new ht){const n=t,i=this.v0,s=this.v1,r=this.v2,a=this.v3;return n.set($a(e,i.x,s.x,r.x,a.x),$a(e,i.y,s.y,r.y,a.y),$a(e,i.z,s.z,r.z,a.z)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}},EllipseCurve:Wa,LineCurve:eo,LineCurve3:class extends Va{constructor(e=new ht,t=new ht){super(),this.isLineCurve3=!0,this.type="LineCurve3",this.v1=e,this.v2=t}getPoint(e,t=new ht){const n=t;return 1===e?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(e).add(this.v1)),n}getPointAt(e,t){return this.getPoint(e,t)}getTangent(e,t=new ht){return t.subVectors(this.v2,this.v1).normalize()}getTangentAt(e,t){return this.getTangent(e,t)}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}},QuadraticBezierCurve:to,QuadraticBezierCurve3:class extends Va{constructor(e=new ht,t=new ht,n=new ht){super(),this.isQuadraticBezierCurve3=!0,this.type="QuadraticBezierCurve3",this.v0=e,this.v1=t,this.v2=n}getPoint(e,t=new ht){const n=t,i=this.v0,s=this.v1,r=this.v2;return n.set(Za(e,i.x,s.x,r.x),Za(e,i.y,s.y,r.y),Za(e,i.z,s.z,r.z)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}},SplineCurve:no});class so extends Va{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(e){this.curves.push(e)}closePath(){const e=this.curves[0].getPoint(0),t=this.curves[this.curves.length-1].getPoint(1);if(!e.equals(t)){const n=!0===e.isVector2?"LineCurve":"LineCurve3";this.curves.push(new io[n](t,e))}return this}getPoint(e,t){const n=e*this.getLength(),i=this.getCurveLengths();let s=0;for(;s<i.length;){if(i[s]>=n){const e=i[s]-n,r=this.curves[s],a=r.getLength(),o=0===a?0:1-e/a;return r.getPointAt(o,t)}s++}return null}getLength(){const e=this.getCurveLengths();return e[e.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const e=[];let t=0;for(let n=0,i=this.curves.length;n<i;n++)t+=this.curves[n].getLength(),e.push(t);return this.cacheLengths=e,e}getSpacedPoints(e=40){const t=[];for(let n=0;n<=e;n++)t.push(this.getPoint(n/e));return this.autoClose&&t.push(t[0]),t}getPoints(e=12){const t=[];let n;for(let i=0,s=this.curves;i<s.length;i++){const r=s[i],a=r.isEllipseCurve?2*e:r.isLineCurve||r.isLineCurve3?1:r.isSplineCurve?e*r.points.length:e,o=r.getPoints(a);for(let e=0;e<o.length;e++){const i=o[e];n&&n.equals(i)||(t.push(i),n=i)}}return this.autoClose&&t.length>1&&!t[t.length-1].equals(t[0])&&t.push(t[0]),t}copy(e){super.copy(e),this.curves=[];for(let t=0,n=e.curves.length;t<n;t++){const n=e.curves[t];this.curves.push(n.clone())}return this.autoClose=e.autoClose,this}toJSON(){const e=super.toJSON();e.autoClose=this.autoClose,e.curves=[];for(let t=0,n=this.curves.length;t<n;t++){const n=this.curves[t];e.curves.push(n.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.autoClose=e.autoClose,this.curves=[];for(let t=0,n=e.curves.length;t<n;t++){const n=e.curves[t];this.curves.push((new io[n.type]).fromJSON(n))}return this}}class ro extends so{constructor(e){super(),this.type="Path",this.currentPoint=new Fe,e&&this.setFromPoints(e)}setFromPoints(e){this.moveTo(e[0].x,e[0].y);for(let t=1,n=e.length;t<n;t++)this.lineTo(e[t].x,e[t].y);return this}moveTo(e,t){return this.currentPoint.set(e,t),this}lineTo(e,t){const n=new eo(this.currentPoint.clone(),new Fe(e,t));return this.curves.push(n),this.currentPoint.set(e,t),this}quadraticCurveTo(e,t,n,i){const s=new to(this.currentPoint.clone(),new Fe(e,t),new Fe(n,i));return this.curves.push(s),this.currentPoint.set(n,i),this}bezierCurveTo(e,t,n,i,s,r){const a=new Qa(this.currentPoint.clone(),new Fe(e,t),new Fe(n,i),new Fe(s,r));return this.curves.push(a),this.currentPoint.set(s,r),this}splineThru(e){const t=[this.currentPoint.clone()].concat(e),n=new no(t);return this.curves.push(n),this.currentPoint.copy(e[e.length-1]),this}arc(e,t,n,i,s,r){const a=this.currentPoint.x,o=this.currentPoint.y;return this.absarc(e+a,t+o,n,i,s,r),this}absarc(e,t,n,i,s,r){return this.absellipse(e,t,n,n,i,s,r),this}ellipse(e,t,n,i,s,r,a,o){const l=this.currentPoint.x,c=this.currentPoint.y;return this.absellipse(e+l,t+c,n,i,s,r,a,o),this}absellipse(e,t,n,i,s,r,a,o){const l=new Wa(e,t,n,i,s,r,a,o);if(this.curves.length>0){const e=l.getPoint(0);e.equals(this.currentPoint)||this.lineTo(e.x,e.y)}this.curves.push(l);const c=l.getPoint(1);return this.currentPoint.copy(c),this}copy(e){return super.copy(e),this.currentPoint.copy(e.currentPoint),this}toJSON(){const e=super.toJSON();return e.currentPoint=this.currentPoint.toArray(),e}fromJSON(e){return super.fromJSON(e),this.currentPoint.fromArray(e.currentPoint),this}}class ao extends Yn{constructor(e=[new Fe(0,-.5),new Fe(.5,0),new Fe(0,.5)],t=12,n=0,i=2*Math.PI){super(),this.type="LatheGeometry",this.parameters={points:e,segments:t,phiStart:n,phiLength:i},t=Math.floor(t),i=Pe(i,0,2*Math.PI);const s=[],r=[],a=[],o=[],l=[],c=1/t,h=new ht,d=new Fe,u=new ht,p=new ht,m=new ht;let f=0,g=0;for(let v=0;v<=e.length-1;v++)switch(v){case 0:f=e[v+1].x-e[v].x,g=e[v+1].y-e[v].y,u.x=1*g,u.y=-f,u.z=0*g,m.copy(u),u.normalize(),o.push(u.x,u.y,u.z);break;case e.length-1:o.push(m.x,m.y,m.z);break;default:f=e[v+1].x-e[v].x,g=e[v+1].y-e[v].y,u.x=1*g,u.y=-f,u.z=0*g,p.copy(u),u.x+=m.x,u.y+=m.y,u.z+=m.z,u.normalize(),o.push(u.x,u.y,u.z),m.copy(p)}for(let v=0;v<=t;v++){const s=n+v*c*i,u=Math.sin(s),p=Math.cos(s);for(let n=0;n<=e.length-1;n++){h.x=e[n].x*u,h.y=e[n].y,h.z=e[n].x*p,r.push(h.x,h.y,h.z),d.x=v/t,d.y=n/(e.length-1),a.push(d.x,d.y);const i=o[3*n+0]*u,s=o[3*n+1],c=o[3*n+0]*p;l.push(i,s,c)}}for(let v=0;v<t;v++)for(let t=0;t<e.length-1;t++){const n=t+v*e.length,i=n,r=n+e.length,a=n+e.length+1,o=n+1;s.push(i,r,o),s.push(a,o,r)}this.setIndex(s),this.setAttribute("position",new Bn(r,3)),this.setAttribute("uv",new Bn(a,2)),this.setAttribute("normal",new Bn(l,3))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new ao(e.points,e.segments,e.phiStart,e.phiLength)}}class oo extends ao{constructor(e=1,t=1,n=4,i=8){const s=new ro;s.absarc(0,-t/2,e,1.5*Math.PI,0),s.absarc(0,t/2,e,0,.5*Math.PI),super(s.getPoints(n),i),this.type="CapsuleGeometry",this.parameters={radius:e,length:t,capSegments:n,radialSegments:i}}static fromJSON(e){return new oo(e.radius,e.length,e.capSegments,e.radialSegments)}}class lo extends Yn{constructor(e=1,t=1,n=1,i=32,s=1,r=!1,a=0,o=2*Math.PI){super(),this.type="CylinderGeometry",this.parameters={radiusTop:e,radiusBottom:t,height:n,radialSegments:i,heightSegments:s,openEnded:r,thetaStart:a,thetaLength:o};const l=this;i=Math.floor(i),s=Math.floor(s);const c=[],h=[],d=[],u=[];let p=0;const m=[],f=n/2;let g=0;function v(n){const s=p,r=new Fe,m=new ht;let v=0;const _=!0===n?e:t,y=!0===n?1:-1;for(let e=1;e<=i;e++)h.push(0,f*y,0),d.push(0,y,0),u.push(.5,.5),p++;const x=p;for(let e=0;e<=i;e++){const t=e/i*o+a,n=Math.cos(t),s=Math.sin(t);m.x=_*s,m.y=f*y,m.z=_*n,h.push(m.x,m.y,m.z),d.push(0,y,0),r.x=.5*n+.5,r.y=.5*s*y+.5,u.push(r.x,r.y),p++}for(let e=0;e<i;e++){const t=s+e,i=x+e;!0===n?c.push(i,i+1,t):c.push(i+1,i,t),v+=3}l.addGroup(g,v,!0===n?1:2),g+=v}!function(){const r=new ht,v=new ht;let _=0;const y=(t-e)/n;for(let l=0;l<=s;l++){const c=[],g=l/s,_=g*(t-e)+e;for(let e=0;e<=i;e++){const t=e/i,s=t*o+a,l=Math.sin(s),m=Math.cos(s);v.x=_*l,v.y=-g*n+f,v.z=_*m,h.push(v.x,v.y,v.z),r.set(l,y,m).normalize(),d.push(r.x,r.y,r.z),u.push(t,1-g),c.push(p++)}m.push(c)}for(let e=0;e<i;e++)for(let t=0;t<s;t++){const n=m[t][e],i=m[t+1][e],s=m[t+1][e+1],r=m[t][e+1];c.push(n,i,r),c.push(i,s,r),_+=6}l.addGroup(g,_,0),g+=_}(),!1===r&&(e>0&&v(!0),t>0&&v(!1)),this.setIndex(c),this.setAttribute("position",new Bn(h,3)),this.setAttribute("normal",new Bn(d,3)),this.setAttribute("uv",new Bn(u,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new lo(e.radiusTop,e.radiusBottom,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}class co extends Yn{constructor(e=[],t=[],n=1,i=0){super(),this.type="PolyhedronGeometry",this.parameters={vertices:e,indices:t,radius:n,detail:i};const s=[],r=[];function a(e,t,n,i){const s=i+1,r=[];for(let a=0;a<=s;a++){r[a]=[];const i=e.clone().lerp(n,a/s),o=t.clone().lerp(n,a/s),l=s-a;for(let e=0;e<=l;e++)r[a][e]=0===e&&a===s?i:i.clone().lerp(o,e/l)}for(let a=0;a<s;a++)for(let e=0;e<2*(s-a)-1;e++){const t=Math.floor(e/2);e%2==0?(o(r[a][t+1]),o(r[a+1][t]),o(r[a][t])):(o(r[a][t+1]),o(r[a+1][t+1]),o(r[a+1][t]))}}function o(e){s.push(e.x,e.y,e.z)}function l(t,n){const i=3*t;n.x=e[i+0],n.y=e[i+1],n.z=e[i+2]}function c(e,t,n,i){i<0&&1===e.x&&(r[t]=e.x-1),0===n.x&&0===n.z&&(r[t]=i/2/Math.PI+.5)}function h(e){return Math.atan2(e.z,-e.x)}!function(e){const n=new ht,i=new ht,s=new ht;for(let r=0;r<t.length;r+=3)l(t[r+0],n),l(t[r+1],i),l(t[r+2],s),a(n,i,s,e)}(i),function(e){const t=new ht;for(let n=0;n<s.length;n+=3)t.x=s[n+0],t.y=s[n+1],t.z=s[n+2],t.normalize().multiplyScalar(e),s[n+0]=t.x,s[n+1]=t.y,s[n+2]=t.z}(n),function(){const e=new ht;for(let n=0;n<s.length;n+=3){e.x=s[n+0],e.y=s[n+1],e.z=s[n+2];const i=h(e)/2/Math.PI+.5,a=(t=e,Math.atan2(-t.y,Math.sqrt(t.x*t.x+t.z*t.z))/Math.PI+.5);r.push(i,1-a)}var t;(function(){const e=new ht,t=new ht,n=new ht,i=new ht,a=new Fe,o=new Fe,l=new Fe;for(let d=0,u=0;d<s.length;d+=9,u+=6){e.set(s[d+0],s[d+1],s[d+2]),t.set(s[d+3],s[d+4],s[d+5]),n.set(s[d+6],s[d+7],s[d+8]),a.set(r[u+0],r[u+1]),o.set(r[u+2],r[u+3]),l.set(r[u+4],r[u+5]),i.copy(e).add(t).add(n).divideScalar(3);const p=h(i);c(a,u+0,e,p),c(o,u+2,t,p),c(l,u+4,n,p)}})(),function(){for(let e=0;e<r.length;e+=6){const t=r[e+0],n=r[e+2],i=r[e+4],s=Math.max(t,n,i),a=Math.min(t,n,i);s>.9&&a<.1&&(t<.2&&(r[e+0]+=1),n<.2&&(r[e+2]+=1),i<.2&&(r[e+4]+=1))}}()}(),this.setAttribute("position",new Bn(s,3)),this.setAttribute("normal",new Bn(s.slice(),3)),this.setAttribute("uv",new Bn(r,2)),0===i?this.computeVertexNormals():this.normalizeNormals()}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new co(e.vertices,e.indices,e.radius,e.details)}}class ho extends co{constructor(e=1,t=0){super([1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],e,t),this.type="OctahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new ho(e.radius,e.detail)}}class uo extends Yn{constructor(e=.5,t=1,n=32,i=1,s=0,r=2*Math.PI){super(),this.type="RingGeometry",this.parameters={innerRadius:e,outerRadius:t,thetaSegments:n,phiSegments:i,thetaStart:s,thetaLength:r},n=Math.max(3,n);const a=[],o=[],l=[],c=[];let h=e;const d=(t-e)/(i=Math.max(1,i)),u=new ht,p=new Fe;for(let m=0;m<=i;m++){for(let e=0;e<=n;e++){const i=s+e/n*r;u.x=h*Math.cos(i),u.y=h*Math.sin(i),o.push(u.x,u.y,u.z),l.push(0,0,1),p.x=(u.x/t+1)/2,p.y=(u.y/t+1)/2,c.push(p.x,p.y)}h+=d}for(let m=0;m<i;m++){const e=m*(n+1);for(let t=0;t<n;t++){const i=t+e,s=i,r=i+n+1,o=i+n+2,l=i+1;a.push(s,r,l),a.push(r,o,l)}}this.setIndex(a),this.setAttribute("position",new Bn(o,3)),this.setAttribute("normal",new Bn(l,3)),this.setAttribute("uv",new Bn(c,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new uo(e.innerRadius,e.outerRadius,e.thetaSegments,e.phiSegments,e.thetaStart,e.thetaLength)}}class po extends Yn{constructor(e=1,t=32,n=16,i=0,s=2*Math.PI,r=0,a=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:n,phiStart:i,phiLength:s,thetaStart:r,thetaLength:a},t=Math.max(3,Math.floor(t)),n=Math.max(2,Math.floor(n));const o=Math.min(r+a,Math.PI);let l=0;const c=[],h=new ht,d=new ht,u=[],p=[],m=[],f=[];for(let g=0;g<=n;g++){const u=[],v=g/n;let _=0;0===g&&0===r?_=.5/t:g===n&&o===Math.PI&&(_=-.5/t);for(let n=0;n<=t;n++){const o=n/t;h.x=-e*Math.cos(i+o*s)*Math.sin(r+v*a),h.y=e*Math.cos(r+v*a),h.z=e*Math.sin(i+o*s)*Math.sin(r+v*a),p.push(h.x,h.y,h.z),d.copy(h).normalize(),m.push(d.x,d.y,d.z),f.push(o+_,1-v),u.push(l++)}c.push(u)}for(let g=0;g<n;g++)for(let e=0;e<t;e++){const t=c[g][e+1],i=c[g][e],s=c[g+1][e],a=c[g+1][e+1];(0!==g||r>0)&&u.push(t,i,a),(g!==n-1||o<Math.PI)&&u.push(i,s,a)}this.setIndex(u),this.setAttribute("position",new Bn(p,3)),this.setAttribute("normal",new Bn(m,3)),this.setAttribute("uv",new Bn(f,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new po(e.radius,e.widthSegments,e.heightSegments,e.phiStart,e.phiLength,e.thetaStart,e.thetaLength)}}class mo extends Yn{constructor(e=1,t=.4,n=12,i=48,s=2*Math.PI){super(),this.type="TorusGeometry",this.parameters={radius:e,tube:t,radialSegments:n,tubularSegments:i,arc:s},n=Math.floor(n),i=Math.floor(i);const r=[],a=[],o=[],l=[],c=new ht,h=new ht,d=new ht;for(let u=0;u<=n;u++)for(let r=0;r<=i;r++){const p=r/i*s,m=u/n*Math.PI*2;h.x=(e+t*Math.cos(m))*Math.cos(p),h.y=(e+t*Math.cos(m))*Math.sin(p),h.z=t*Math.sin(m),a.push(h.x,h.y,h.z),c.x=e*Math.cos(p),c.y=e*Math.sin(p),d.subVectors(h,c).normalize(),o.push(d.x,d.y,d.z),l.push(r/i),l.push(u/n)}for(let u=1;u<=n;u++)for(let e=1;e<=i;e++){const t=(i+1)*u+e-1,n=(i+1)*(u-1)+e-1,s=(i+1)*(u-1)+e,a=(i+1)*u+e;r.push(t,n,a),r.push(n,s,a)}this.setIndex(r),this.setAttribute("position",new Bn(a,3)),this.setAttribute("normal",new Bn(o,3)),this.setAttribute("uv",new Bn(l,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new mo(e.radius,e.tube,e.radialSegments,e.tubularSegments,e.arc)}}class fo extends In{constructor(e){super(),this.isMeshStandardMaterial=!0,this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new Pn(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Pn(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new Fe(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Jt,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.defines={STANDARD:""},this.color.copy(e.color),this.roughness=e.roughness,this.metalness=e.metalness,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.roughnessMap=e.roughnessMap,this.metalnessMap=e.metalnessMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.envMapIntensity=e.envMapIntensity,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class go extends In{constructor(e){super(),this.isMeshPhongMaterial=!0,this.type="MeshPhongMaterial",this.color=new Pn(16777215),this.specular=new Pn(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Pn(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new Fe(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Jt,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.specular.copy(e.specular),this.shininess=e.shininess,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}const vo={enabled:!1,files:{},add:function(e,t){!1!==this.enabled&&(this.files[e]=t)},get:function(e){if(!1!==this.enabled)return this.files[e]},remove:function(e){delete this.files[e]},clear:function(){this.files={}}};class _o{constructor(e,t,n){const i=this;let s,r=!1,a=0,o=0;const l=[];this.onStart=void 0,this.onLoad=e,this.onProgress=t,this.onError=n,this.itemStart=function(e){o++,!1===r&&void 0!==i.onStart&&i.onStart(e,a,o),r=!0},this.itemEnd=function(e){a++,void 0!==i.onProgress&&i.onProgress(e,a,o),a===o&&(r=!1,void 0!==i.onLoad&&i.onLoad())},this.itemError=function(e){void 0!==i.onError&&i.onError(e)},this.resolveURL=function(e){return s?s(e):e},this.setURLModifier=function(e){return s=e,this},this.addHandler=function(e,t){return l.push(e,t),this},this.removeHandler=function(e){const t=l.indexOf(e);return-1!==t&&l.splice(t,2),this},this.getHandler=function(e){for(let t=0,n=l.length;t<n;t+=2){const n=l[t],i=l[t+1];if(n.global&&(n.lastIndex=0),n.test(e))return i}return null}}}const yo=new _o;class xo{constructor(e){this.manager=void 0!==e?e:yo,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(e,t){const n=this;return new Promise((function(i,s){n.load(e,i,t,s)}))}parse(){}setCrossOrigin(e){return this.crossOrigin=e,this}setWithCredentials(e){return this.withCredentials=e,this}setPath(e){return this.path=e,this}setResourcePath(e){return this.resourcePath=e,this}setRequestHeader(e){return this.requestHeader=e,this}}xo.DEFAULT_MATERIAL_NAME="__DEFAULT";class Mo extends xo{constructor(e){super(e)}load(e,t,n,i){void 0!==this.path&&(e=this.path+e),e=this.manager.resolveURL(e);const s=this,r=vo.get(e);if(void 0!==r)return s.manager.itemStart(e),setTimeout((function(){t&&t(r),s.manager.itemEnd(e)}),0),r;const a=Ge("img");function o(){c(),vo.add(e,this),t&&t(this),s.manager.itemEnd(e)}function l(t){c(),i&&i(t),s.manager.itemError(e),s.manager.itemEnd(e)}function c(){a.removeEventListener("load",o,!1),a.removeEventListener("error",l,!1)}return a.addEventListener("load",o,!1),a.addEventListener("error",l,!1),"data:"!==e.slice(0,5)&&void 0!==this.crossOrigin&&(a.crossOrigin=this.crossOrigin),s.manager.itemStart(e),a.src=e,a}}class So extends xo{constructor(e){super(e)}load(e,t,n,i){const s=new it,r=new Mo(this.manager);return r.setCrossOrigin(this.crossOrigin),r.setPath(this.path),r.load(e,(function(e){s.image=e,s.needsUpdate=!0,void 0!==t&&t(s)}),n,i),s}}class Eo extends mn{constructor(e,t=1){super(),this.isLight=!0,this.type="Light",this.color=new Pn(e),this.intensity=t}dispose(){}copy(e,t){return super.copy(e,t),this.color.copy(e.color),this.intensity=e.intensity,this}toJSON(e){const t=super.toJSON(e);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,void 0!==this.groundColor&&(t.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(t.object.distance=this.distance),void 0!==this.angle&&(t.object.angle=this.angle),void 0!==this.decay&&(t.object.decay=this.decay),void 0!==this.penumbra&&(t.object.penumbra=this.penumbra),void 0!==this.shadow&&(t.object.shadow=this.shadow.toJSON()),t}}class wo extends Eo{constructor(e,t,n){super(e,n),this.isHemisphereLight=!0,this.type="HemisphereLight",this.position.copy(mn.DEFAULT_UP),this.updateMatrix(),this.groundColor=new Pn(t)}copy(e,t){return super.copy(e,t),this.groundColor.copy(e.groundColor),this}}const bo=new Bt,To=new ht,Ao=new ht;class Ro{constructor(e){this.camera=e,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new Fe(512,512),this.map=null,this.mapPass=null,this.matrix=new Bt,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new Ni,this._frameExtents=new Fe(1,1),this._viewportCount=1,this._viewports=[new st(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(e){const t=this.camera,n=this.matrix;To.setFromMatrixPosition(e.matrixWorld),t.position.copy(To),Ao.setFromMatrixPosition(e.target.matrixWorld),t.lookAt(Ao),t.updateMatrixWorld(),bo.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),this._frustum.setFromProjectionMatrix(bo),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(bo)}getViewport(e){return this._viewports[e]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(e){return this.camera=e.camera.clone(),this.bias=e.bias,this.radius=e.radius,this.mapSize.copy(e.mapSize),this}clone(){return(new this.constructor).copy(this)}toJSON(){const e={};return 0!==this.bias&&(e.bias=this.bias),0!==this.normalBias&&(e.normalBias=this.normalBias),1!==this.radius&&(e.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(e.mapSize=this.mapSize.toArray()),e.camera=this.camera.toJSON(!1).object,delete e.camera.matrix,e}}class Co extends Ro{constructor(){super(new wi(50,1,.5,500)),this.isSpotLightShadow=!0,this.focus=1}updateMatrices(e){const t=this.camera,n=2*Re*e.angle*this.focus,i=this.mapSize.width/this.mapSize.height,s=e.distance||t.far;n===t.fov&&i===t.aspect&&s===t.far||(t.fov=n,t.aspect=i,t.far=s,t.updateProjectionMatrix()),super.updateMatrices(e)}copy(e){return super.copy(e),this.focus=e.focus,this}}class Po extends Eo{constructor(e,t,n=0,i=Math.PI/3,s=0,r=2){super(e,t),this.isSpotLight=!0,this.type="SpotLight",this.position.copy(mn.DEFAULT_UP),this.updateMatrix(),this.target=new mn,this.distance=n,this.angle=i,this.penumbra=s,this.decay=r,this.map=null,this.shadow=new Co}get power(){return this.intensity*Math.PI}set power(e){this.intensity=e/Math.PI}dispose(){this.shadow.dispose()}copy(e,t){return super.copy(e,t),this.distance=e.distance,this.angle=e.angle,this.penumbra=e.penumbra,this.decay=e.decay,this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}const Lo=new Bt,Uo=new ht,Io=new ht;class Do extends Ro{constructor(){super(new wi(90,1,.5,500)),this.isPointLightShadow=!0,this._frameExtents=new Fe(4,2),this._viewportCount=6,this._viewports=[new st(2,1,1,1),new st(0,1,1,1),new st(3,1,1,1),new st(1,1,1,1),new st(3,0,1,1),new st(1,0,1,1)],this._cubeDirections=[new ht(1,0,0),new ht(-1,0,0),new ht(0,0,1),new ht(0,0,-1),new ht(0,1,0),new ht(0,-1,0)],this._cubeUps=[new ht(0,1,0),new ht(0,1,0),new ht(0,1,0),new ht(0,1,0),new ht(0,0,1),new ht(0,0,-1)]}updateMatrices(e,t=0){const n=this.camera,i=this.matrix,s=e.distance||n.far;s!==n.far&&(n.far=s,n.updateProjectionMatrix()),Uo.setFromMatrixPosition(e.matrixWorld),n.position.copy(Uo),Io.copy(n.position),Io.add(this._cubeDirections[t]),n.up.copy(this._cubeUps[t]),n.lookAt(Io),n.updateMatrixWorld(),i.makeTranslation(-Uo.x,-Uo.y,-Uo.z),Lo.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Lo)}}class No extends Eo{constructor(e,t,n=0,i=2){super(e,t),this.isPointLight=!0,this.type="PointLight",this.distance=n,this.decay=i,this.shadow=new Do}get power(){return 4*this.intensity*Math.PI}set power(e){this.intensity=e/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(e,t){return super.copy(e,t),this.distance=e.distance,this.decay=e.decay,this.shadow=e.shadow.clone(),this}}class Oo extends Ro{constructor(){super(new Zi(-5,5,5,-5,.5,500)),this.isDirectionalLightShadow=!0}}class Fo extends Eo{constructor(e,t){super(e,t),this.isDirectionalLight=!0,this.type="DirectionalLight",this.position.copy(mn.DEFAULT_UP),this.updateMatrix(),this.target=new mn,this.shadow=new Oo}dispose(){this.shadow.dispose()}copy(e){return super.copy(e),this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}class zo extends Eo{constructor(e,t){super(e,t),this.isAmbientLight=!0,this.type="AmbientLight"}}class ko{constructor(e=1,t=0,n=0){return this.radius=e,this.phi=t,this.theta=n,this}set(e,t,n){return this.radius=e,this.phi=t,this.theta=n,this}copy(e){return this.radius=e.radius,this.phi=e.phi,this.theta=e.theta,this}makeSafe(){const e=1e-6;return this.phi=Math.max(e,Math.min(Math.PI-e,this.phi)),this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,n){return this.radius=Math.sqrt(e*e+t*t+n*n),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e,n),this.phi=Math.acos(Pe(t/this.radius,-1,1))),this}clone(){return(new this.constructor).copy(this)}}class Bo extends Na{constructor(e=10,t=10,n=4473924,i=8947848){n=new Pn(n),i=new Pn(i);const s=t/2,r=e/t,a=e/2,o=[],l=[];for(let h=0,d=0,u=-a;h<=t;h++,u+=r){o.push(-a,0,u,a,0,u),o.push(u,0,-a,u,0,a);const e=h===s?n:i;e.toArray(l,d),d+=3,e.toArray(l,d),d+=3,e.toArray(l,d),d+=3,e.toArray(l,d),d+=3}const c=new Yn;c.setAttribute("position",new Bn(o,3)),c.setAttribute("color",new Bn(l,3));super(c,new Ta({vertexColors:!0,toneMapped:!1})),this.type="GridHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}}"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:t}})),"undefined"!=typeof window&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=t);const Go={type:"change"},Ho={type:"start"},Vo={type:"end"},Wo=new kt,Xo=new Ui,jo=Math.cos(70*Oe);class qo extends be{constructor(e,t){super(),this.object=e,this.domElement=t,this.domElement.style.touchAction="none",this.enabled=!0,this.target=new ht,this.cursor=new ht,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minTargetRadius=0,this.maxTargetRadius=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.zoomToCursor=!1,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.mouseButtons={LEFT:n,MIDDLE:i,RIGHT:s},this.touches={ONE:r,TWO:o},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this.getPolarAngle=function(){return p.phi},this.getAzimuthalAngle=function(){return p.theta},this.getDistance=function(){return this.object.position.distanceTo(this.target)},this.listenToKeyEvents=function(e){e.addEventListener("keydown",ne),this._domElementKeyEvents=e},this.stopListenToKeyEvents=function(){this._domElementKeyEvents.removeEventListener("keydown",ne),this._domElementKeyEvents=null},this.saveState=function(){c.target0.copy(c.target),c.position0.copy(c.object.position),c.zoom0=c.object.zoom},this.reset=function(){c.target.copy(c.target0),c.object.position.copy(c.position0),c.object.zoom=c.zoom0,c.object.updateProjectionMatrix(),c.dispatchEvent(Go),c.update(),d=h.NONE},this.update=function(){const t=new ht,n=(new ct).setFromUnitVectors(e.up,new ht(0,1,0)),i=n.clone().invert(),s=new ht,r=new ct,a=new ht,o=2*Math.PI;return function(l=null){const v=c.object.position;t.copy(v).sub(c.target),t.applyQuaternion(n),p.setFromVector3(t),c.autoRotate&&d===h.NONE&&I(function(e){return null!==e?2*Math.PI/60*c.autoRotateSpeed*e:2*Math.PI/60/60*c.autoRotateSpeed}(l)),c.enableDamping?(p.theta+=m.theta*c.dampingFactor,p.phi+=m.phi*c.dampingFactor):(p.theta+=m.theta,p.phi+=m.phi);let _=c.minAzimuthAngle,y=c.maxAzimuthAngle;isFinite(_)&&isFinite(y)&&(_<-Math.PI?_+=o:_>Math.PI&&(_-=o),y<-Math.PI?y+=o:y>Math.PI&&(y-=o),p.theta=_<=y?Math.max(_,Math.min(y,p.theta)):p.theta>(_+y)/2?Math.max(_,p.theta):Math.min(y,p.theta)),p.phi=Math.max(c.minPolarAngle,Math.min(c.maxPolarAngle,p.phi)),p.makeSafe(),!0===c.enableDamping?c.target.addScaledVector(g,c.dampingFactor):c.target.add(g),c.target.sub(c.cursor),c.target.clampLength(c.minTargetRadius,c.maxTargetRadius),c.target.add(c.cursor);let x=!1;if(c.zoomToCursor&&R||c.object.isOrthographicCamera)p.radius=G(p.radius);else{const e=p.radius;p.radius=G(p.radius*f),x=e!=p.radius}if(t.setFromSpherical(p),t.applyQuaternion(i),v.copy(c.target).add(t),c.object.lookAt(c.target),!0===c.enableDamping?(m.theta*=1-c.dampingFactor,m.phi*=1-c.dampingFactor,g.multiplyScalar(1-c.dampingFactor)):(m.set(0,0,0),g.set(0,0,0)),c.zoomToCursor&&R){let n=null;if(c.object.isPerspectiveCamera){const e=t.length();n=G(e*f);const i=e-n;c.object.position.addScaledVector(T,i),c.object.updateMatrixWorld(),x=!!i}else if(c.object.isOrthographicCamera){const e=new ht(A.x,A.y,0);e.unproject(c.object);const i=c.object.zoom;c.object.zoom=Math.max(c.minZoom,Math.min(c.maxZoom,c.object.zoom/f)),c.object.updateProjectionMatrix(),x=i!==c.object.zoom;const s=new ht(A.x,A.y,0);s.unproject(c.object),c.object.position.sub(s).add(e),c.object.updateMatrixWorld(),n=t.length()}else console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled."),c.zoomToCursor=!1;null!==n&&(this.screenSpacePanning?c.target.set(0,0,-1).transformDirection(c.object.matrix).multiplyScalar(n).add(c.object.position):(Wo.origin.copy(c.object.position),Wo.direction.set(0,0,-1).transformDirection(c.object.matrix),Math.abs(c.object.up.dot(Wo.direction))<jo?e.lookAt(c.target):(Xo.setFromNormalAndCoplanarPoint(c.object.up,c.target),Wo.intersectPlane(Xo,c.target))))}else if(c.object.isOrthographicCamera){const e=c.object.zoom;c.object.zoom=Math.max(c.minZoom,Math.min(c.maxZoom,c.object.zoom/f)),e!==c.object.zoom&&(c.object.updateProjectionMatrix(),x=!0)}return f=1,R=!1,!!(x||s.distanceToSquared(c.object.position)>u||8*(1-r.dot(c.object.quaternion))>u||a.distanceToSquared(c.target)>u)&&(c.dispatchEvent(Go),s.copy(c.object.position),r.copy(c.object.quaternion),a.copy(c.target),!0)}}(),this.dispose=function(){c.domElement.removeEventListener("contextmenu",se),c.domElement.removeEventListener("pointerdown",J),c.domElement.removeEventListener("pointercancel",$),c.domElement.removeEventListener("wheel",Q),c.domElement.removeEventListener("pointermove",Z),c.domElement.removeEventListener("pointerup",$);c.domElement.getRootNode().removeEventListener("keydown",ee,{capture:!0}),null!==c._domElementKeyEvents&&(c._domElementKeyEvents.removeEventListener("keydown",ne),c._domElementKeyEvents=null)};const c=this,h={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6};let d=h.NONE;const u=1e-6,p=new ko,m=new ko;let f=1;const g=new ht,v=new Fe,_=new Fe,y=new Fe,x=new Fe,M=new Fe,S=new Fe,E=new Fe,w=new Fe,b=new Fe,T=new ht,A=new Fe;let R=!1;const C=[],P={};let L=!1;function U(e){const t=Math.abs(.01*e);return Math.pow(.95,c.zoomSpeed*t)}function I(e){m.theta-=e}function D(e){m.phi-=e}const N=function(){const e=new ht;return function(t,n){e.setFromMatrixColumn(n,0),e.multiplyScalar(-t),g.add(e)}}(),O=function(){const e=new ht;return function(t,n){!0===c.screenSpacePanning?e.setFromMatrixColumn(n,1):(e.setFromMatrixColumn(n,0),e.crossVectors(c.object.up,e)),e.multiplyScalar(t),g.add(e)}}(),F=function(){const e=new ht;return function(t,n){const i=c.domElement;if(c.object.isPerspectiveCamera){const s=c.object.position;e.copy(s).sub(c.target);let r=e.length();r*=Math.tan(c.object.fov/2*Math.PI/180),N(2*t*r/i.clientHeight,c.object.matrix),O(2*n*r/i.clientHeight,c.object.matrix)}else c.object.isOrthographicCamera?(N(t*(c.object.right-c.object.left)/c.object.zoom/i.clientWidth,c.object.matrix),O(n*(c.object.top-c.object.bottom)/c.object.zoom/i.clientHeight,c.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),c.enablePan=!1)}}();function z(e){c.object.isPerspectiveCamera||c.object.isOrthographicCamera?f/=e:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),c.enableZoom=!1)}function k(e){c.object.isPerspectiveCamera||c.object.isOrthographicCamera?f*=e:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),c.enableZoom=!1)}function B(e,t){if(!c.zoomToCursor)return;R=!0;const n=c.domElement.getBoundingClientRect(),i=e-n.left,s=t-n.top,r=n.width,a=n.height;A.x=i/r*2-1,A.y=-s/a*2+1,T.set(A.x,A.y,1).unproject(c.object).sub(c.object.position).normalize()}function G(e){return Math.max(c.minDistance,Math.min(c.maxDistance,e))}function H(e){v.set(e.clientX,e.clientY)}function V(e){x.set(e.clientX,e.clientY)}function W(e){if(1===C.length)v.set(e.pageX,e.pageY);else{const t=ae(e),n=.5*(e.pageX+t.x),i=.5*(e.pageY+t.y);v.set(n,i)}}function X(e){if(1===C.length)x.set(e.pageX,e.pageY);else{const t=ae(e),n=.5*(e.pageX+t.x),i=.5*(e.pageY+t.y);x.set(n,i)}}function j(e){const t=ae(e),n=e.pageX-t.x,i=e.pageY-t.y,s=Math.sqrt(n*n+i*i);E.set(0,s)}function q(e){if(1==C.length)_.set(e.pageX,e.pageY);else{const t=ae(e),n=.5*(e.pageX+t.x),i=.5*(e.pageY+t.y);_.set(n,i)}y.subVectors(_,v).multiplyScalar(c.rotateSpeed);const t=c.domElement;I(2*Math.PI*y.x/t.clientHeight),D(2*Math.PI*y.y/t.clientHeight),v.copy(_)}function Y(e){if(1===C.length)M.set(e.pageX,e.pageY);else{const t=ae(e),n=.5*(e.pageX+t.x),i=.5*(e.pageY+t.y);M.set(n,i)}S.subVectors(M,x).multiplyScalar(c.panSpeed),F(S.x,S.y),x.copy(M)}function K(e){const t=ae(e),n=e.pageX-t.x,i=e.pageY-t.y,s=Math.sqrt(n*n+i*i);w.set(0,s),b.set(0,Math.pow(w.y/E.y,c.zoomSpeed)),z(b.y),E.copy(w);B(.5*(e.pageX+t.x),.5*(e.pageY+t.y))}function J(e){!1!==c.enabled&&(0===C.length&&(c.domElement.setPointerCapture(e.pointerId),c.domElement.addEventListener("pointermove",Z),c.domElement.addEventListener("pointerup",$)),function(e){for(let t=0;t<C.length;t++)if(C[t]==e.pointerId)return!0;return!1}(e)||(function(e){C.push(e.pointerId)}(e),"touch"===e.pointerType?ie(e):function(e){let t;switch(e.button){case 0:t=c.mouseButtons.LEFT;break;case 1:t=c.mouseButtons.MIDDLE;break;case 2:t=c.mouseButtons.RIGHT;break;default:t=-1}switch(t){case i:if(!1===c.enableZoom)return;!function(e){B(e.clientX,e.clientX),E.set(e.clientX,e.clientY)}(e),d=h.DOLLY;break;case n:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===c.enablePan)return;V(e),d=h.PAN}else{if(!1===c.enableRotate)return;H(e),d=h.ROTATE}break;case s:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===c.enableRotate)return;H(e),d=h.ROTATE}else{if(!1===c.enablePan)return;V(e),d=h.PAN}break;default:d=h.NONE}d!==h.NONE&&c.dispatchEvent(Ho)}(e)))}function Z(e){!1!==c.enabled&&("touch"===e.pointerType?function(e){switch(re(e),d){case h.TOUCH_ROTATE:if(!1===c.enableRotate)return;q(e),c.update();break;case h.TOUCH_PAN:if(!1===c.enablePan)return;Y(e),c.update();break;case h.TOUCH_DOLLY_PAN:if(!1===c.enableZoom&&!1===c.enablePan)return;!function(e){c.enableZoom&&K(e),c.enablePan&&Y(e)}(e),c.update();break;case h.TOUCH_DOLLY_ROTATE:if(!1===c.enableZoom&&!1===c.enableRotate)return;!function(e){c.enableZoom&&K(e),c.enableRotate&&q(e)}(e),c.update();break;default:d=h.NONE}}(e):function(e){switch(d){case h.ROTATE:if(!1===c.enableRotate)return;!function(e){_.set(e.clientX,e.clientY),y.subVectors(_,v).multiplyScalar(c.rotateSpeed);const t=c.domElement;I(2*Math.PI*y.x/t.clientHeight),D(2*Math.PI*y.y/t.clientHeight),v.copy(_),c.update()}(e);break;case h.DOLLY:if(!1===c.enableZoom)return;!function(e){w.set(e.clientX,e.clientY),b.subVectors(w,E),b.y>0?z(U(b.y)):b.y<0&&k(U(b.y)),E.copy(w),c.update()}(e);break;case h.PAN:if(!1===c.enablePan)return;!function(e){M.set(e.clientX,e.clientY),S.subVectors(M,x).multiplyScalar(c.panSpeed),F(S.x,S.y),x.copy(M),c.update()}(e)}}(e))}function $(e){switch(function(e){delete P[e.pointerId];for(let t=0;t<C.length;t++)if(C[t]==e.pointerId)return void C.splice(t,1)}(e),C.length){case 0:c.domElement.releasePointerCapture(e.pointerId),c.domElement.removeEventListener("pointermove",Z),c.domElement.removeEventListener("pointerup",$),c.dispatchEvent(Vo),d=h.NONE;break;case 1:const t=C[0],n=P[t];ie({pointerId:t,pageX:n.x,pageY:n.y})}}function Q(e){!1!==c.enabled&&!1!==c.enableZoom&&d===h.NONE&&(e.preventDefault(),c.dispatchEvent(Ho),function(e){B(e.clientX,e.clientY),e.deltaY<0?k(U(e.deltaY)):e.deltaY>0&&z(U(e.deltaY)),c.update()}(function(e){const t=e.deltaMode,n={clientX:e.clientX,clientY:e.clientY,deltaY:e.deltaY};switch(t){case 1:n.deltaY*=16;break;case 2:n.deltaY*=100}e.ctrlKey&&!L&&(n.deltaY*=10);return n}(e)),c.dispatchEvent(Vo))}function ee(e){if("Control"===e.key){L=!0;c.domElement.getRootNode().addEventListener("keyup",te,{passive:!0,capture:!0})}}function te(e){if("Control"===e.key){L=!1;c.domElement.getRootNode().removeEventListener("keyup",te,{passive:!0,capture:!0})}}function ne(e){!1!==c.enabled&&!1!==c.enablePan&&function(e){let t=!1;switch(e.code){case c.keys.UP:e.ctrlKey||e.metaKey||e.shiftKey?D(2*Math.PI*c.rotateSpeed/c.domElement.clientHeight):F(0,c.keyPanSpeed),t=!0;break;case c.keys.BOTTOM:e.ctrlKey||e.metaKey||e.shiftKey?D(-2*Math.PI*c.rotateSpeed/c.domElement.clientHeight):F(0,-c.keyPanSpeed),t=!0;break;case c.keys.LEFT:e.ctrlKey||e.metaKey||e.shiftKey?I(2*Math.PI*c.rotateSpeed/c.domElement.clientHeight):F(c.keyPanSpeed,0),t=!0;break;case c.keys.RIGHT:e.ctrlKey||e.metaKey||e.shiftKey?I(-2*Math.PI*c.rotateSpeed/c.domElement.clientHeight):F(-c.keyPanSpeed,0),t=!0}t&&(e.preventDefault(),c.update())}(e)}function ie(e){switch(re(e),C.length){case 1:switch(c.touches.ONE){case r:if(!1===c.enableRotate)return;W(e),d=h.TOUCH_ROTATE;break;case a:if(!1===c.enablePan)return;X(e),d=h.TOUCH_PAN;break;default:d=h.NONE}break;case 2:switch(c.touches.TWO){case o:if(!1===c.enableZoom&&!1===c.enablePan)return;!function(e){c.enableZoom&&j(e),c.enablePan&&X(e)}(e),d=h.TOUCH_DOLLY_PAN;break;case l:if(!1===c.enableZoom&&!1===c.enableRotate)return;!function(e){c.enableZoom&&j(e),c.enableRotate&&W(e)}(e),d=h.TOUCH_DOLLY_ROTATE;break;default:d=h.NONE}break;default:d=h.NONE}d!==h.NONE&&c.dispatchEvent(Ho)}function se(e){!1!==c.enabled&&e.preventDefault()}function re(e){let t=P[e.pointerId];void 0===t&&(t=new Fe,P[e.pointerId]=t),t.set(e.pageX,e.pageY)}function ae(e){const t=e.pointerId===C[0]?C[1]:C[0];return P[t]}c.domElement.addEventListener("contextmenu",se),c.domElement.addEventListener("pointerdown",J),c.domElement.addEventListener("pointercancel",$),c.domElement.addEventListener("wheel",Q,{passive:!1});c.domElement.getRootNode().addEventListener("keydown",ee,{passive:!0,capture:!0}),this.update()}}class Yo{constructor(e){if(!e||!e.camera)throw new Error("Game and camera must be initialized");this.game=e,this.camera=e.camera,this.target=null,this.offset=new ht(0,15,20),this.currentPosition=new ht,this.currentLookAt=new ht,this.smoothFactor=.1,this.defaultPosition=new ht(0,15,20),this.defaultLookAt=new ht(0,0,0),this.settings={followSpeed:2,rotationSpeed:1,zoomSpeed:1,minZoom:10,maxZoom:50,shakeMagnitude:.5,tiltRange:{min:.3,max:1.2}},this.shake={active:!1,duration:0,intensity:0,trauma:0},this.currentPosition.copy(this.camera.position),this.currentLookAt.set(0,0,0),this.update=this.update.bind(this),this.setTarget=this.setTarget.bind(this),this.cleanup=this.cleanup.bind(this),this.reset=this.reset.bind(this),e.renderer?this.setupControls():console.warn("Renderer not initialized, skipping OrbitControls setup")}setupControls(){try{this.orbitControls=new qo(this.camera,this.game.renderer.domElement),this.orbitControls.enableDamping=!0,this.orbitControls.dampingFactor=.05,this.orbitControls.screenSpacePanning=!1,this.orbitControls.minDistance=this.settings.minZoom,this.orbitControls.maxDistance=this.settings.maxZoom,this.orbitControls.maxPolarAngle=Math.PI/2,this.orbitControls.enabled=!1}catch(e){console.warn("Error setting up OrbitControls:",e)}}update(e){if(this.camera&&this.target)try{const t=this.target.position.clone().add(this.offset);this.currentPosition.lerp(t,e*this.settings.followSpeed),this.currentLookAt.lerp(this.target.position,e*this.settings.followSpeed),this.camera.position.copy(this.currentPosition),this.camera.lookAt(this.currentLookAt),Math.random()<.01&&console.log("Camera: Updated position",{cameraPosition:this.camera.position.clone(),targetPosition:this.target.position.clone(),offset:this.offset.clone(),currentLookAt:this.currentLookAt.clone()}),this.orbitControls&&this.orbitControls.enabled&&this.orbitControls.update(),this.shake.active&&this.updateShake(e)}catch(t){console.error("Error in camera update:",t)}}updateShake(e){if(this.shake.trauma<=0)return void(this.shake.active=!1);const t=new ht((Math.random()-.5)*this.shake.intensity*this.settings.shakeMagnitude,(Math.random()-.5)*this.shake.intensity*this.settings.shakeMagnitude,(Math.random()-.5)*this.shake.intensity*this.settings.shakeMagnitude);this.camera.position.add(t),this.shake.trauma=Math.max(0,this.shake.trauma-2*e)}setTarget(e){e&&(this.target=e,this.currentPosition.copy(e.position).add(this.offset),this.currentLookAt.copy(e.position),this.camera.position.copy(this.currentPosition),this.camera.lookAt(this.currentLookAt),console.log("Camera: Set new target",{targetPosition:e.position.clone(),cameraPosition:this.camera.position.clone(),offset:this.offset.clone()}))}cleanup(){this.orbitControls&&(this.orbitControls.dispose(),this.orbitControls=null)}reset(){this.camera.position.copy(this.defaultPosition),this.currentLookAt.copy(this.defaultLookAt),this.camera.lookAt(this.defaultLookAt),console.log("Camera: Reset to default position",{position:this.camera.position.clone(),lookAt:this.currentLookAt.clone()})}}class Ko{constructor(e,t){this.game=e,this.speed=15,this.direction=new ht(1,0,0),this.nextDirection=this.direction.clone(),this.segments=[],this.segmentSpacing=1.67,this.isGhost=!1,this.isInvincible=!1,this.pointMultiplier=1,this.hasRainbowTrail=!1,this.hasMagnet=!1,this.worldSize=100,this.initialized=!1,this.initializationFrames=180,this.movementEnabled=!1,this.collisionChecksEnabled=!1,this.score=0,this.group=new ma,this.game.scene.add(this.group),this.createHead(t);for(let n=0;n<5;n++){const e=t.clone().sub(this.direction.clone().multiplyScalar(this.segmentSpacing*(n+1)));this.addSegmentAtPosition(e)}this.positionHistory=[];for(let n=0;n<10;n++)this.positionHistory.push(t.clone());this.createTrail(),this.setupInput(),console.log("Snake: Initialized",{headPosition:this.head.position.clone(),segmentSpacing:this.segmentSpacing,initialSegments:this.segments.length,segmentPositions:this.segments.map((e=>e.position.clone())),frameCount:this.game.frameCount}),setTimeout((()=>{this.movementEnabled=!0,console.log("Snake: Movement enabled",{frameCount:this.game.frameCount,headPosition:this.head.position.clone(),segmentPositions:this.segments.map((e=>e.position.clone()))})}),4e3)}createHead(e){const t=new po(.8,32,32);this.material=new go({color:4120753,emissive:4120753,emissiveIntensity:.4,shininess:50,transparent:!0,opacity:.9});const n=new po(1,32,32),i=new go({color:4120753,emissive:4120753,emissiveIntensity:.5,transparent:!0,opacity:.3,side:1});this.head=new ui(t,this.material),this.headGlow=new ui(n,i),this.head.position.copy(e),this.headGlow.position.copy(e),this.collisionRadius=.9,this.group.add(this.head),this.group.add(this.headGlow)}createTrail(){const e=new Yn,t=[],n=[];for(let s=0;s<50;s++)t.push(0,0,0),n.push(.24,.88,.69);e.setAttribute("position",new Bn(t,3)),e.setAttribute("color",new Bn(n,3));const i=new Ta({vertexColors:!0,transparent:!0,opacity:.5,linewidth:1});this.trail=new Ua(e,i),this.game.scene.add(this.trail),this.trailPoints=[];for(let s=0;s<50;s++)this.trailPoints.push(this.head.position.clone())}updateTrail(){this.trailPoints.push(this.head.position.clone()),this.trailPoints.shift();const e=this.trail.geometry.attributes.position.array;for(let t=0;t<this.trailPoints.length;t++){const n=this.trailPoints[t];e[3*t]=n.x,e[3*t+1]=n.y,e[3*t+2]=n.z}this.trail.geometry.attributes.position.needsUpdate=!0}addSegmentAtPosition(e){const t=new po(.7,16,16),n=new go({color:4120753,emissive:4120753,emissiveIntensity:.2}),i=new ui(t,n);i.position.copy(e),i.castShadow=!0,i.receiveShadow=!0,this.segments.push(i),this.group.add(i),console.log("Snake: Added segment",{index:this.segments.length-1,position:e.clone(),headPosition:this.head.position.clone(),direction:this.direction.clone(),spacing:this.segmentSpacing})}addSegment(){let e;if(0===this.segments.length)e=this.head.position.clone().sub(this.direction.clone().multiplyScalar(this.segmentSpacing));else{e=this.segments[this.segments.length-1].position.clone().sub(this.direction.clone().multiplyScalar(this.segmentSpacing))}this.addSegmentAtPosition(e)}setGhostMode(e){this.isGhost=e;const t=e?.5:1,n=e?.8:.2;this.head.material.transparent=e,this.head.material.opacity=t,this.head.material.emissiveIntensity=n,this.segments.forEach((i=>{i.material.transparent=e,i.material.opacity=t,i.material.emissiveIntensity=n})),e?this.addGhostTrail():this.removeGhostTrail(),console.log("Snake: Ghost mode "+(e?"enabled":"disabled"),{opacity:t,emissiveIntensity:n,segmentCount:this.segments.length,hasGhostTrail:!!this.ghostTrails})}setTimeScale(e){this.timeScale=e,console.log("Snake: Time scale set to",e)}setMagnetMode(e){this.magnetMode=e,this.magnetRadius=e?15:0,this.magnetStrength=e?2:0;const t=new Pn(e?16711935:4120753),n=e?.8:.2;this.head.material.emissive=t,this.head.material.emissiveIntensity=n,this.segments.forEach((e=>{e.material.emissive=t,e.material.emissiveIntensity=n})),console.log("Snake: Magnet mode "+(e?"enabled":"disabled"),{magnetMode:this.magnetMode,magnetRadius:this.magnetRadius,magnetStrength:this.magnetStrength})}setInvulnerable(e){this.isInvulnerable=e;const t=new Pn(e?16776960:4120753),n=e?.8:.2;this.head.material.emissive=t,this.head.material.emissiveIntensity=n,this.headGlow.material.emissive=t,this.headGlow.material.emissiveIntensity=n,this.segments.forEach((e=>{e.material.emissive=t,e.material.emissiveIntensity=n})),console.log("Snake: Invulnerability "+(e?"enabled":"disabled"),{color:t.getHexString(),emissiveIntensity:n,segmentCount:this.segments.length})}addGhostTrail(){const e=new po(.4,8,8),t=new go({color:4120753,transparent:!0,opacity:.3,emissive:4120753,emissiveIntensity:.3});this.ghostTrails=[];for(let n=0;n<5;n++){const n=new ui(e,t);n.position.copy(this.head.position),this.game.scene.add(n),this.ghostTrails.push(n)}}removeGhostTrail(){this.ghostTrails&&(this.ghostTrails.forEach((e=>{this.game.scene.remove(e),e.geometry.dispose(),e.material.dispose()})),this.ghostTrails=null)}setDirection(e){const t=e.clone();-1!==this.direction.dot(t)?(this.nextDirection=t,this.game&&this.head&&this.game.onSnakeTurn(this.head.position),console.log("Snake: Direction changed",{oldDirection:this.direction.clone(),newDirection:this.nextDirection.clone(),headPosition:this.head?this.head.position.clone():null})):console.log("Snake: Prevented 180-degree turn",{currentDirection:this.direction.clone(),attemptedDirection:t.clone()})}checkObstacleCollision(){if(!this.game.gameManager.obstacleSystem)return!1;const e=this.head.position,t=this.game.gameManager.obstacleSystem.isNearMovingObstacle(e),n=t?.8:.6;return!!this.game.gameManager.obstacleSystem.checkCollisions({position:e,radius:n})&&(console.log("Snake: Obstacle collision detected",{headPosition:e.clone(),collisionRadius:n,isMovingObstacle:t}),this.game.gameManager.gameOver(),!0)}update(e){if(!this.game.isRunning||this.game.gameManager.isGameOver||!this.movementEnabled)return;const t=e*(this.timeScale||1);if(this.movementTimer+=t,this.movementTimer>=this.movementInterval&&(this.move(),this.movementTimer=0),this.collisionChecksEnabled&&this.checkCollisions(),this.trailEffect&&this.trailEffect.update(t),this.isGhostMode&&this.updateGhostTrail(t),this.magnetMode&&this.updateMagnetEffect(t),this.updateTrail(),this.headGlow){this.headGlow.position.copy(this.head.position);const e=1+.1*Math.sin(.003*performance.now());this.headGlow.scale.set(e,e,e)}if(!this.initialized&&this.game.frameCount>this.initializationFrames&&(this.initialized=!0,this.collisionChecksEnabled=!0,console.log("Snake: Initialization complete",{frameCount:this.game.frameCount,headPosition:this.head.position.clone(),segmentPositions:this.segments.map((e=>e.position.clone())),collisionChecksEnabled:this.collisionChecksEnabled})),this.nextDirection){const e=this.direction.clone();this.direction.copy(this.nextDirection),!e.equals(this.direction)&&this.game&&this.head&&this.game.onSnakeTurn(this.head.position)}const n=this.segments.map((e=>e.position.clone())),i=this.head.position.clone();this.head.position.add(this.direction.clone().multiplyScalar(this.speed*t));for(let s=0;s<this.segments.length;s++){const e=this.segments[s];if(0===s){const t=i.clone();e.position.lerp(t,.5)}else{const t=n[s-1].clone();e.position.lerp(t,.5)}}}checkWallCollision(e){if(this.isGhost)return!1;const t=e||this.head.position,n=this.worldSize/2,i=Math.abs(t.x)>n,s=Math.abs(t.z)>n;return!(!i&&!s)&&(console.log("Snake: Wall collision detected",{position:t.clone(),currentPosition:this.head.position.clone(),xCollision:i,zCollision:s,worldSize:this.worldSize,boundary:n,x:t.x,z:t.z}),this.game.gameManager.gameOver(),!0)}checkPelletCollisions(){var e;if(!this.game.gameManager||!this.game.gameManager.pellets)return void console.log("Snake: Pellet collision check skipped - missing gameManager or pellets",{hasGameManager:!!this.game.gameManager,hasPellets:null==(e=this.game.gameManager)?void 0:e.pellets,isInitialized:this.initialized,movementEnabled:this.movementEnabled,collisionChecksEnabled:this.collisionChecksEnabled});const t=this.game.gameManager.pellets;for(let n=t.length-1;n>=0;n--){const e=t[n];if(!e||!e.mesh||e.isCollected)continue;const i=this.head.position.distanceTo(e.mesh.position),s=this.collisionRadius+e.radius;console.log("Snake: Checking pellet distance",{distance:i,threshold:s,headPosition:this.head.position.clone(),pelletPosition:e.mesh.position.clone()}),i<s&&(console.log("Snake: Pellet collision detected",{distance:i,threshold:s,headPosition:this.head.position.clone(),pelletPosition:e.mesh.position.clone()}),this.game.gameManager.collectPellet(e))}}checkPowerUpCollisions(){var e,t;if(!this.game.gameManager||!this.game.gameManager.powerUps)return void console.log("Snake: Power-up collision check skipped - missing gameManager or powerUps",{hasGameManager:!!this.game.gameManager,hasPowerUps:null==(e=this.game.gameManager)?void 0:e.powerUps,isInitialized:this.initialized,movementEnabled:this.movementEnabled,collisionChecksEnabled:this.collisionChecksEnabled});const n=Array.from(this.game.gameManager.powerUps);console.log("Snake: Checking power-up collisions",{powerUpCount:n.length,headPosition:this.head.position.clone(),isInitialized:this.initialized,movementEnabled:this.movementEnabled,collisionChecksEnabled:this.collisionChecksEnabled,powerUpPositions:n.map((e=>e.position.clone()))});for(const i of n){if(!i||!i.position){console.log("Snake: Invalid power-up found",{powerUp:i});continue}const e=this.head.position.distanceTo(i.position),n=2;console.log("Snake: Checking power-up distance",{distance:e,threshold:n,powerUpType:i.type,headPosition:this.head.position.clone(),powerUpPosition:i.position.clone(),powerUpMesh:!!i.mesh,powerUpMeshVisible:null==(t=i.mesh)?void 0:t.visible}),e<n&&(console.log("Snake: Power-up collision detected",{distance:e,threshold:n,powerUpType:i.type,headPosition:this.head.position.clone(),powerUpPosition:i.position.clone()}),this.game.gameManager.collectPowerUp(i))}}cleanup(){for(this.removeGhostTrail();this.segments.length>0;){const e=this.segments.pop();this.group.remove(e),e.geometry&&e.geometry.dispose(),e.material&&e.material.dispose()}this.head&&(this.group.remove(this.head),this.head.geometry&&this.head.geometry.dispose(),this.head.material&&this.head.material.dispose()),this.group&&this.game.scene&&this.game.scene.remove(this.group),this.segments=[],this.head=null,this.group=null,console.log("Snake: Cleanup complete",{sceneChildren:this.game.scene.children.length,hasGroup:!!this.group,segmentsLength:this.segments.length})}checkCollisions(){if(this.initialized&&this.movementEnabled&&this.collisionChecksEnabled){if(this.checkPelletCollisions(),this.checkPowerUpCollisions(),!this.isInvulnerable&&!this.isGhost&&(this.isGhost||!this.checkWallCollision()))if(this.isInvulnerable||this.isGhost||!this.game.gameManager.obstacleSystem||!this.checkObstacleCollision()){if(!this.isInvulnerable&&!this.isGhost){const e=.4*this.segmentSpacing;for(let t=4;t<this.segments.length;t++){const n=this.segments[t],i=this.head.position.distanceTo(n.position);if(i<e)return console.log("Snake: Self collision detected",{distance:i,threshold:e,segmentIndex:t,headPosition:this.head.position.clone(),segmentPosition:n.position.clone(),isInvulnerable:this.isInvulnerable,isGhost:this.isGhost}),void this.game.gameManager.gameOver()}}}else this.game.gameManager.gameOver()}else console.log("Snake: Collision checks skipped",{isInitialized:this.initialized,movementEnabled:this.movementEnabled,collisionChecksEnabled:this.collisionChecksEnabled,frameCount:this.game.frameCount})}setupInput(){window.addEventListener("keydown",(e=>{if(!this.movementEnabled)return;let t;switch(e.key.toLowerCase()){case"arrowup":case"w":t=new ht(0,0,-1);break;case"arrowdown":case"s":t=new ht(0,0,1);break;case"arrowleft":case"a":t=new ht(-1,0,0);break;case"arrowright":case"d":t=new ht(1,0,0);break;default:return}t&&this.setDirection(t)}))}updateMagnetEffect(e){if(!this.magnetMode||!this.game.gameManager)return;const t=this.game.gameManager.pellets;if(!t||!t.length)return;const n=this.head.position;t.forEach((t=>{if(!t||!t.mesh)return;const i=t.mesh.position,s=i.distanceTo(n);if(s<this.magnetRadius){const t=(new ht).subVectors(n,i).normalize(),r=this.magnetStrength*(1-s/this.magnetRadius)*e*60;i.add(t.multiplyScalar(r)),console.log("Snake: Attracting pellet",{distance:s,attractionStrength:r,pelletPosition:i.clone(),headPosition:n.clone()})}}))}}class Jo{constructor(e,t,n="normal"){this.game=e,this.type=n,this.velocity=new ht,this.radius=.3,this.isCollected=!1,this.isSpecial="normal"!==n,this.position=t||new ht(40*(Math.random()-.5),.5,40*(Math.random()-.5)),this.createMesh(),this.game.scene.add(this.mesh),this.game.scene.add(this.glow),this.initialY=this.position.y,this.hoverOffset=Math.random()*Math.PI*2,this.hoverSpeed=1.5+.5*Math.random(),this.rotationSpeed=2*(Math.random()-.5)}createMesh(){const e=new po(this.radius,24,24),t="normal"===this.type?16426765:14776794,n=new go({color:t,emissive:t,emissiveIntensity:.5,shininess:50,transparent:!0,opacity:.9});this.mesh=new ui(e,n),this.mesh.position.copy(this.position),this.mesh.castShadow=!0,this.mesh.receiveShadow=!0;const i=new po(this.radius+.1,24,24),s=new go({color:t,emissive:t,emissiveIntensity:.4,transparent:!0,opacity:.3,side:1});this.glow=new ui(i,s),this.glow.position.copy(this.position)}collect(){this.isCollected||(this.isCollected=!0,this.cleanup())}update(e){if(this.isCollected)return;const t=.001*performance.now(),n=this.initialY+.1*Math.sin(t*this.hoverSpeed+this.hoverOffset);this.position.y=n,this.mesh.position.y=n,this.glow.position.y=n,this.mesh.rotation.y+=this.rotationSpeed*e,this.glow.rotation.y=this.mesh.rotation.y;const i=1+.1*Math.sin(2*t);this.glow.scale.set(i,i,i),this.velocity.lengthSq()>0&&(this.position.add(this.velocity.clone().multiplyScalar(e)),this.mesh.position.copy(this.position),this.glow.position.copy(this.position))}cleanup(){this.mesh&&(this.game.scene.remove(this.mesh),this.mesh.geometry&&this.mesh.geometry.dispose(),this.mesh.material&&this.mesh.material.dispose()),this.glow&&(this.game.scene.remove(this.glow),this.glow.geometry&&this.glow.geometry.dispose(),this.glow.material&&this.glow.material.dispose())}}const Zo=class e{constructor(e){this.game=e,this.powerUps=[],this.isActive=!1,this.activePowerUps=new Map,this.magnetRadius=15,this.timeSlowFactor=.5,this.magnetActive=!1,this.start()}start(){this.isActive=!0,console.log("PowerUpSystem: Started")}cleanup(){this.isActive=!1;for(const[e]of this.activePowerUps)this.deactivatePowerUp(e);this.activePowerUps.clear()}activatePowerUp(t,n=null){console.log("PowerUpSystem: Activating power-up",{type:t,hasSnake:!!this.game.snake,hasTargetSnake:!!n,activePowerUps:Array.from(this.activePowerUps.keys())});const i=n||this.game.snake;if(!i)return void console.error("PowerUpSystem: Cannot activate power-up - no snake found");const s=e.Types[t];if(!s)return void console.error("PowerUpSystem: Invalid power-up type",{type:t,availableTypes:Object.keys(e.Types)});const r=`${s.id}_${i===this.game.snake?"player":"bot"}`;this.activePowerUps.has(r)&&this.deactivatePowerUp(r);try{console.log("PowerUpSystem: Applying effect",{type:s.id,snake:i===this.game.snake?"player":"bot",hasEffect:"function"==typeof s.effect});const e=s.effect(i);this.activePowerUps.set(r,{type:s,cleanup:e,timer:setTimeout((()=>{this.deactivatePowerUp(r)}),s.duration),startTime:performance.now()}),this.showPowerUpEffect(t,i),this.game.events&&this.game.events.emit("powerup:acquired",{type:s.id,duration:s.duration}),console.log("PowerUpSystem: Power-up activated",{type:s.id,duration:s.duration,snake:i===this.game.snake?"player":"bot",activePowerUps:Array.from(this.activePowerUps.keys())})}catch(a){console.error("PowerUpSystem: Error activating power-up",{type:t,error:a.message,stack:a.stack})}}deactivatePowerUp(e){const t=this.activePowerUps.get(e);if(t){console.log("PowerUpSystem: Deactivating power-up",{typeId:e});try{t.timer&&clearTimeout(t.timer),t.cleanup&&"function"==typeof t.cleanup&&(console.log("PowerUpSystem: Calling cleanup for",{typeId:e}),t.cleanup()),this.activePowerUps.delete(e),console.log("PowerUpSystem: Power-up deactivated",{typeId:e,activePowerUps:Array.from(this.activePowerUps.keys())})}catch(n){console.error("PowerUpSystem: Error deactivating power-up",{typeId:e,error:n.message,stack:n.stack})}}}showPowerUpEffect(t,n){const i=e.Types[t];if(!i||!n||!n.head)return;const s=new po(2,32,32),r=new go({color:i.color,transparent:!0,opacity:.5,emissive:i.color,emissiveIntensity:.5}),a=new ui(s,r);n.head.add(a);const o=performance.now(),l=()=>{const e=(performance.now()-o)/1e3;e<1?(a.scale.setScalar(1+e),a.material.opacity=.5*(1-e),requestAnimationFrame(l)):(a.parent&&a.parent.remove(a),a.geometry.dispose(),r.dispose())};l()}update(e){if(this.isActive)for(const[t,n]of this.activePowerUps){if(!n.startTime)continue;performance.now()-n.startTime>=n.type.duration&&(console.log(`PowerUpSystem: Power-up ${t} expired`),this.deactivatePowerUp(t))}}};var $o;((t,n,i)=>{n in t?e(t,n,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[n]=i})(Zo,"symbol"!=typeof($o="Types")?$o+"":$o,{ghost:{id:"ghost",name:"Ghost Mode",icon:"👻",color:8421504,duration:8e3,effect:e=>(console.log("PowerUpSystem: Applying ghost effect to snake",{snake:e===e.game.snake?"player":"bot",hasGhostMode:"function"==typeof e.setGhostMode}),e.setGhostMode(!0),()=>e.setGhostMode(!1))},timeSlow:{id:"timeSlow",name:"Time Warp",icon:"⌛",color:65535,duration:1e4,effect:e=>(console.log("PowerUpSystem: Applying time slow effect to snake",{snake:e===e.game.snake?"player":"bot",hasTimeScale:"function"==typeof e.setTimeScale}),e.setTimeScale(.5),()=>e.setTimeScale(1))},magnet:{id:"magnet",name:"Pellet Magnet",icon:"🧲",color:16711935,duration:15e3,effect:e=>(console.log("PowerUpSystem: Applying magnet effect to snake",{snake:e===e.game.snake?"player":"bot",hasMagnetMode:"function"==typeof e.setMagnetMode}),e.setMagnetMode(!0),()=>e.setMagnetMode(!1))},shield:{id:"shield",name:"Shield",icon:"🛡️",color:16776960,duration:12e3,effect:e=>(console.log("PowerUpSystem: Applying shield effect to snake",{snake:e===e.game.snake?"player":"bot",hasInvulnerable:"function"==typeof e.setInvulnerable}),e.setInvulnerable(!0),()=>e.setInvulnerable(!1))}});let Qo=Zo;class el{constructor(e,t){this.game=e,this.type=t,this.position=new ht,this.mesh=null,this.glow=null,this.createMesh()}createMesh(){const e=Qo.Types[this.type];if(!e)return void console.error("PowerUp: Invalid power-up type",{type:this.type,availableTypes:Object.keys(Qo.Types)});const t=new ho(.5,0),n=new go({color:e.color,emissive:e.color,emissiveIntensity:.8,transparent:!0,opacity:1,shininess:100});this.mesh=new ui(t,n),this.mesh.castShadow=!0,this.mesh.receiveShadow=!0,this.mesh.visible=!0;const i=new ho(.6,0),s=new Dn({color:e.color,transparent:!0,opacity:.5,side:1}),r=new ui(i,s);this.mesh.add(r),this.floatOffset=Math.random()*Math.PI*2,this.game&&this.game.scene?(this.game.scene.add(this.mesh),console.log("PowerUp: Added mesh to scene",{type:this.type,powerUpType:e.id,position:this.position.clone(),hasMesh:!!this.mesh,meshVisible:this.mesh.visible,color:e.color,scene:this.game.scene})):console.error("PowerUp: Failed to add mesh to scene - game or scene not found")}setPosition(e){this.position.copy(e),this.mesh&&this.mesh.position.copy(e)}update(e){this.mesh&&(this.floatOffset+=2*e,this.mesh.position.y=this.position.y+.2*Math.sin(this.floatOffset),this.mesh.rotation.y+=2*e,this.mesh.rotation.z+=e)}cleanup(){if(this.mesh){if(this.game&&this.game.scene&&this.game.scene.remove(this.mesh),this.mesh.geometry&&this.mesh.geometry.dispose(),this.mesh.material&&this.mesh.material.dispose(),this.mesh.children.length>0){const e=this.mesh.children[0];e.geometry&&e.geometry.dispose(),e.material&&e.material.dispose()}this.mesh=null,this.glow=null}}collect(){this.game.scene.remove(this.mesh),this.mesh.geometry.dispose(),this.mesh.material.dispose(),this.mesh.children[0].geometry.dispose(),this.mesh.children[0].material.dispose()}applyEffect(e){switch(this.type){case"speed":e.speed*=1.5,setTimeout((()=>{e.speed/=1.5}),this.duration);break;case"size":for(let t=0;t<3;t++)e.grow();break;case"ghost":e.segments.forEach((e=>{e.material.transparent=!0,e.material.opacity=.3})),setTimeout((()=>{e.segments.forEach((e=>{e.material.transparent=!1,e.material.opacity=1}))}),this.duration);break;case"magnet":e.magnetActive=!0,setTimeout((()=>{e.magnetActive=!1}),this.duration);break;case"shield":e.isInvulnerable=!0,setTimeout((()=>{e.isInvulnerable=!1}),this.duration)}}}class tl{constructor(e){this.game=e,this.obstacles=new Set,this.patterns=this.createPatterns(),this.currentDifficulty=1}start(){console.log("ObstacleSystem: Starting"),this.cleanup(),this.initialize()}createPatterns(){return{wall:{create:e=>this.createWall(e),spacing:4},spinner:{create:e=>this.createSpinner(e),spacing:6},moving:{create:e=>this.createMovingObstacle(e),spacing:5}}}initialize(){this.createInitialObstacles()}createInitialObstacles(){for(let e=-45;e<=45;e+=4)this.createWall(new ht(e,0,-45)),this.createWall(new ht(e,0,45));for(let e=-45;e<=45;e+=4)this.createWall(new ht(-45,0,e)),this.createWall(new ht(45,0,e));for(let e=0;e<5;e++)this.createRandomObstacleWithSafeZone(0)}createWall(e){const t=new mi(2,4,2),n=new fo({color:8421504,roughness:.7,metalness:.3}),i=new ui(t,n);i.position.copy(e),i.position.y=2,i.castShadow=!0,i.receiveShadow=!0,this.game.scene.add(i);const s={mesh:i,type:"wall",position:i.position.clone(),radius:1.5,update:null};this.obstacles.add(s),console.log("ObstacleSystem: Created wall obstacle",{position:s.position.clone(),radius:s.radius,size:new ht(2,4,2)})}createSpinner(e){const t=new mi(6,1,1),n=new fo({color:16711680,roughness:.5,metalness:.5}),i=new ui(t,n);i.position.copy(e),i.position.y=2,i.castShadow=!0,this.game.scene.add(i);const s={mesh:i,type:"spinner",position:i.position.clone(),radius:4,update:e=>{i.rotation.y+=2*e,s.position.copy(i.position)}};this.obstacles.add(s),console.log("ObstacleSystem: Created spinner obstacle",{position:s.position.clone(),radius:s.radius})}createMovingObstacle(e){const t=new po(1),n=new fo({color:65280,roughness:.3,metalness:.7}),i=new ui(t,n);i.position.copy(e),i.position.y=1,i.castShadow=!0;const s=e.clone();let r=0;this.game.scene.add(i);const a={mesh:i,type:"moving",isMoving:!0,position:i.position.clone(),radius:1.5,update:e=>{r+=e,i.position.x=s.x+4*Math.sin(r),i.position.z=s.z+4*Math.cos(r),a.position.copy(i.position)}};this.obstacles.add(a),console.log("ObstacleSystem: Created moving obstacle",{position:a.position.clone(),radius:a.radius,isMoving:a.isMoving})}createRandomObstacleWithSafeZone(e){const t=Object.keys(this.patterns),n=t[Math.floor(Math.random()*t.length)],i=this.patterns[n],s=new ht(80*(Math.random()-.5),0,80*(Math.random()-.5));i.create(s)}update(e){this.obstacles.forEach((t=>{t.update&&t.update(e)}))}checkCollisions(e){let t,n=.8;if(e instanceof ht)t=e;else{if(!e||!e.position)return console.error("ObstacleSystem: Invalid target for collision check"),!1;t=e.position,n=e.radius||n}for(const i of this.obstacles){if(!i||!i.mesh)continue;const e=i.mesh.position,s=i.size||1,r=t.distanceTo(e),a=n+s;if(r<a)return console.log("ObstacleSystem: Collision detected",{distance:r,minDistance:a,targetPosition:t.clone(),targetRadius:n,obstaclePosition:e.clone(),obstacleRadius:s,obstacleType:i.type}),!0}return!1}increaseDifficulty(e){this.currentDifficulty+=.01*e,Math.random()<.001*this.currentDifficulty&&this.createRandomObstacleWithSafeZone(10)}reset(){this.obstacles.forEach((e=>{this.game.scene.remove(e.mesh),e.mesh.geometry&&e.mesh.geometry.dispose(),e.mesh.material&&e.mesh.material.dispose()})),this.obstacles.clear(),this.currentDifficulty=1,this.createInitialObstacles()}cleanup(){this.reset()}isNearMovingObstacle(e){if(!e||!this.obstacles)return!1;for(const t of this.obstacles){if("moving"===!t.type&&!t.isMoving)continue;const n=e.distanceTo(t.position);if(n<4)return console.log("ObstacleSystem: Near moving obstacle",{distance:n,position:e.clone(),obstaclePosition:t.position.clone(),obstacleType:t.type}),!0}return!1}}class nl extends Ko{constructor(e,t){super(e,t),this.targetPellet=null,this.updateInterval=30,this.lastUpdate=0,this.color=16711680,this.avoidanceRadius=12,this.viewDistance=60,this.wallAvoidanceDistance=25,this.wallAvoidanceStrength=25,this.obstacleAvoidanceStrength=8,this.lastPelletSwitchTime=0,this.interceptPoint=null,this.speed=13,this.baseSpeed=13,this.segmentSpacing=1.2,this.wanderAngle=0,this.wanderRadius=2,this.isGhostMode=!1,this.isMagnetMode=!1,this.isInvulnerable=!1,this.timeScale=1,this.lastPlayerPosition=null,this.playerVelocity=new ht,this.lastPelletScan=0,this.pelletScanInterval=100,this.nearbyPellets=[],this.lastDirectionChange=0,this.directionChangeInterval=500,this.currentMovementDirection=new ht(1,0,0),this.initBot(),this.movementEnabled=!0,this.isAlive=!0,this.collisionChecksEnabled=!0,this.isInitialized=!0;const n=new ht(0,0,0);this.direction=(new ht).subVectors(n,this.head.position).normalize(),this.nextDirection=this.direction.clone(),this.head.position.y=.5,this.headGlow.position.y=.5,this.positionHistory=[this.head.position.clone()];for(let i=0;i<this.segments.length;i++){const e=this.segments[i],t=this.segmentSpacing*(i+1),n=this.direction.clone(),s=(new ht).subVectors(this.head.position,n.multiplyScalar(t));e.position.copy(s),e.position.y=.5}this.removeInputListeners()}initBot(){this.material.color.setHex(this.color),this.material.emissive.setHex(3342336),this.material.transparent=!0,this.material.opacity=.9}setupInput(){}removeInputListeners(){["keydown","keyup","mousemove"].forEach((e=>{window.removeEventListener(e,this._handleInput)}))}setDirection(e){if(!this.movementEnabled||!this.isAlive)return;const t=performance.now();t-this.lastDirectionChange<this.directionChangeInterval||(this.nextDirection.copy(e).normalize(),this.direction.copy(this.nextDirection),this.lastDirectionChange=t)}update(e){if(!this.isInitialized)return;const t=e*(this.timeScale||1);if(this.ghostTrails&&this.ghostTrails.length>0&&this.ghostTrails.forEach(((e,t)=>{const n=.1*t,i=this.positionHistory[Math.floor(10*n)]||this.head.position;e.position.lerp(i,.3)})),this.isMagnetMode&&this.updateMagnetEffect(t),this.game.snake){const e=this.game.snake.head.position.clone();this.lastPlayerPosition&&(this.playerVelocity=e.clone().sub(this.lastPlayerPosition).multiplyScalar(1/t)),this.lastPlayerPosition=e}const n=performance.now();n-this.lastUpdate>this.updateInterval&&(this.updateAI(),this.lastUpdate=n),n-this.lastPelletScan>this.pelletScanInterval&&(this.scanForPellets(),this.lastPelletScan=n),this.move(t),this.collisionChecksEnabled&&this.checkCollisions(),this.checkPelletCollection()}updateMagnetEffect(e){if(!this.isMagnetMode||!this.game.gameManager)return;const t=this.game.gameManager.pellets;if(!t||!t.length)return;const n=this.head.position;t.forEach((t=>{if(!t||!t.mesh)return;const i=t.mesh.position,s=i.distanceTo(n);if(s<15){const t=(new ht).subVectors(n,i).normalize(),r=2*(1-s/15)*e*60;i.add(t.multiplyScalar(r)),console.log("Bot: Attracting pellet",{distance:s,attractionStrength:r,pelletPosition:i.clone(),headPosition:n.clone()})}}))}scanForPellets(){if(!this.game.gameManager)return;this.nearbyPellets=[],this.game.gameManager.pellets.forEach((e=>{if(!e.mesh)return;this.head.position.distanceTo(e.mesh.position)<=this.viewDistance&&this.nearbyPellets.push({...e,type:"normal"})})),this.game.gameManager.powerUps.forEach((e=>{if(!e.mesh)return;const t=this.head.position.distanceTo(e.mesh.position);t<=this.viewDistance&&(this.nearbyPellets.push({mesh:e.mesh,position:e.mesh.position,type:"powerUp"}),console.log("Bot: Found power-up in range",{distance:t,position:e.mesh.position.clone(),botPosition:this.head.position.clone()}))})),this.nearbyPellets.sort(((e,t)=>{const n=this.calculatePelletScore(e);return this.calculatePelletScore(t)-n}));const e=this.nearbyPellets.filter((e=>"powerUp"===e.type));e.length>0&&console.log("Bot: Power-ups in range",{count:e.length,positions:e.map((e=>e.mesh.position.clone())),botPosition:this.head.position.clone()})}calculatePelletScore(e){if(!e.mesh)return-1/0;const t=this.head.position.distanceTo(e.mesh.position);let n=1e3/(t+1);if("powerUp"===e.type?(n*=5,n+=5e3):"bonus"===e.type&&(n*=2,n+=1e3),this.game.snake){const i=this.game.snake.head.position.distanceTo(e.mesh.position);i<t?"powerUp"===e.type?t-i<50&&(n*=4,n+=6e3):"bonus"===e.type?t-i<15&&(n*=1.3,n+=600):t-i<10&&(n*=.5,n+=50):n+=(i-t)*("powerUp"===e.type?500:40)}return"powerUp"===e.type&&console.log("Bot: Power-up score calculation",{distance:t,score:n,position:this.head.position.clone(),powerUpPosition:e.mesh.position.clone(),playerDistance:this.game.snake?this.game.snake.head.position.distanceTo(e.mesh.position):null}),n}predictInterceptionPoint(e){if(!this.game.snake||!this.playerVelocity)return null;const t=this.game.snake.head.position,n=this.game.snake.speed||12,i=this.head.position,s=e.clone(),r=s.clone().sub(t).length()/n,a=s.clone().sub(i).length()/this.speed;if(a<.9*r)return s;return t.clone().add(this.playerVelocity.clone().multiplyScalar(a)).clone().add(this.playerVelocity.clone().normalize().multiplyScalar(2))}move(e){if(!this.movementEnabled)return;this.head.position.clone();const t=this.direction.clone().multiplyScalar(this.speed*e);this.head.position.add(t);const n=(this.game.worldSize||45)/2;this.head.position.x=Math.max(1-n,Math.min(n-1,this.head.position.x)),this.head.position.z=Math.max(1-n,Math.min(n-1,this.head.position.z)),this.head.position.y=.5,this.headGlow.position.copy(this.head.position),this.positionHistory.unshift(this.head.position.clone());const i=Math.max(2*(this.segments.length+1),10);for(;this.positionHistory.length>i;)this.positionHistory.pop();const s=this.segmentSpacing;let r=0;for(let a=0;a<this.segments.length;a++){const e=this.segments[a];r+=s;let t=null,i=r;if(0===a){const e=this.direction.clone().normalize();t=this.head.position.clone().sub(e.multiplyScalar(s))}else for(let n=0;n<this.positionHistory.length-1;n++){const e=this.positionHistory[n],s=this.positionHistory[n+1],r=e.distanceTo(s);if(i<=r){const n=i/r;t=(new ht).lerpVectors(e,s,n);break}i-=r}if(!t&&this.positionHistory.length>0&&(t=this.positionHistory[this.positionHistory.length-1].clone()),t){const n=0===a?.5:.3*(1-a/this.segments.length*.5);e.position.lerp(t,n),e.position.y=.5}e.position.x=Math.max(1-n,Math.min(n-1,e.position.x)),e.position.z=Math.max(1-n,Math.min(n-1,e.position.z))}this.trail&&this.updateTrail()}updateAI(){if(!this.game.gameManager)return;this.scanForPellets(),this.targetPellet&&this.game.gameManager.pellets.includes(this.targetPellet)||(this.targetPellet=this.findBestPellet(),this.interceptPoint=null);let e=new ht;if(this.targetPellet&&this.targetPellet.mesh){const t=this.targetPellet.mesh.position;if(e.subVectors(t,this.head.position).normalize(),"powerUp"===this.targetPellet.type){this.head.position.distanceTo(t)<15?(this.wallAvoidanceStrength=10,this.speed=15):(this.wallAvoidanceStrength=25,this.speed=13)}else if("bonus"===this.targetPellet.type){this.head.position.distanceTo(t)<10?(this.wallAvoidanceStrength=15,this.speed=14):(this.wallAvoidanceStrength=25,this.speed=13)}}else e.copy(this.currentMovementDirection),this.speed=13,this.wallAvoidanceStrength=25;const t=(this.game.worldSize||45)/2,n=this.head.position;n.x>t-5&&this.currentMovementDirection.x>0?this.currentMovementDirection.set(0,0,1):n.x<5-t&&this.currentMovementDirection.x<0?this.currentMovementDirection.set(0,0,-1):n.z>t-5&&this.currentMovementDirection.z>0?this.currentMovementDirection.set(-1,0,0):n.z<5-t&&this.currentMovementDirection.z<0&&this.currentMovementDirection.set(1,0,0),this.setDirection(this.targetPellet?e:this.currentMovementDirection)}calculateCenterForce(){const e=new ht(0,0,0),t=(new ht).subVectors(e,this.head.position),n=t.length(),i=Math.min(1,n/20);return t.normalize().multiplyScalar(i)}calculateObstacleAvoidance(){const e=new ht,t=this.findNearbyObstacles(),n=this.head.position.clone().add(this.direction.clone().multiplyScalar(5));for(const i of t){const t=(new ht).subVectors(i.position,this.head.position),s=t.length();if(s<1.5*this.avoidanceRadius){const n=Math.pow(1/s,2)*this.obstacleAvoidanceStrength,i=new ht(-t.z,0,t.x).normalize();e.add(t.normalize().multiplyScalar(n)),e.add(i.multiplyScalar(.8*n))}const r=(new ht).subVectors(i.position,n),a=r.length();if(a<2*this.avoidanceRadius){const t=Math.pow(1/a,2)*this.obstacleAvoidanceStrength*.7;e.add(r.normalize().multiplyScalar(-t))}}return e}calculateWallAvoidance(){const e=new ht,t=(this.game.worldSize||45)/2,n=this.head.position,i=t-1-n.x,s=t-1+n.x,r=t-1-n.z,a=t-1+n.z,o=(e,t)=>{if(e<this.wallAvoidanceDistance){return Math.pow((this.wallAvoidanceDistance-e)/this.wallAvoidanceDistance,2)*this.wallAvoidanceStrength}return 0};if(e.x-=o(i),e.x+=o(s),e.z-=o(r),e.z+=o(a),this.isNearWall(4)&&e.multiplyScalar(2),this.isNearWall(2)){e.multiplyScalar(3);const t=this.direction.clone(),n=new ht(-t.z,0,t.x);e.add(n.multiplyScalar(this.wallAvoidanceStrength))}return e}isNearWall(e){const t=(this.game.worldSize||45)/2,n=this.head.position;return Math.abs(n.x)>t-2-e||Math.abs(n.z)>t-2-e}getEmergencyTurnDirection(){const e=(this.game.worldSize||45)/2,t=this.head.position,n=e-t.x,i=e+t.x,s=e-t.z,r=e+t.z,a=Math.min(n,i,s,r);return a===n?-1:a===i?1:a===s?Math.sign(t.x):-Math.sign(t.x)}findBestPellet(){return this.nearbyPellets.length>0?this.nearbyPellets[0]:null}canReachBefore(e,t){if(!this.game.snake)return!0;const n=this.head.position.distanceTo(e),i=this.game.snake.speed||12;return n/this.speed<t/i}findAlternativePath(e){const t=2*Math.PI/8;for(let n=0;n<8;n++){const i=n*t,s=new ht(5*Math.cos(i),0,5*Math.sin(i)),r=e.clone().add(s);if(this.isPathClear(r)&&this.isPathClear(e,r))return r}return null}isGoodTacticalPosition(e){if(!this.game.snake)return!0;const t=this.game.snake.head.position,n=e.distanceTo(t);if(n>8&&n<20)return!0;let i=0;for(const s of this.nearbyPellets){if(!s.mesh||s.mesh.position===e)continue;const n=s.mesh.position.distanceTo(t);s.mesh.position.distanceTo(e)<n&&i++}return i>=2}getDistanceToNearestWall(e){const t=(this.game.worldSize||45)/2,n=t-e.x,i=t+e.x,s=t-e.z,r=t+e.z;return Math.min(n,i,s,r)}isPathClear(e){const t=(new ht).subVectors(e,this.head.position).normalize(),n=this.head.position.distanceTo(e),i=this.findNearbyObstacles();for(const s of i){const e=(new ht).subVectors(s.position,this.head.position),i=e.dot(t);if(i>0&&i<n){if(e.sub(t.multiplyScalar(i)).length()<2)return!1}}return!0}calculatePlayerAvoidance(){const e=new ht;if(!this.game.snake)return e;const t=this.game.snake.head.position,n=(new ht).subVectors(this.head.position,t),i=n.length();if(i<15){const t=Math.pow(15/i,3);e.add(n.normalize().multiplyScalar(t));const s=new ht(-n.z,0,n.x).normalize();e.add(s.multiplyScalar(.5*t))}for(const s of this.game.snake.segments){const t=(new ht).subVectors(this.head.position,s.position),n=t.length();if(n<12){const i=Math.pow(12/n,2);e.add(t.normalize().multiplyScalar(i))}}if(this.game.snake.direction){const n=t.clone().add(this.game.snake.direction.clone().multiplyScalar(5)),i=(new ht).subVectors(this.head.position,n),s=i.length();if(s<15){const t=Math.pow(15/s,2);e.add(i.normalize().multiplyScalar(t))}}return e}isNearObstacle(e){const t=this.findNearbyObstacles();for(const n of t)if(n.distance<e)return!0;return!1}findNearbyObstacles(){const e=[];if(this.game.gameManager.obstacleSystem)for(const t of this.game.gameManager.obstacleSystem.obstacles){if(!t.mesh)continue;const n=this.head.position.distanceTo(t.mesh.position);n<this.viewDistance&&e.push({position:t.mesh.position,distance:n})}if(this.game.snake&&this.game.snake!==this)for(const t of this.game.snake.segments){const n=this.head.position.distanceTo(t.position);n<this.viewDistance&&e.push({position:t.position,distance:n})}return e}onCollision(){this.die()}turn(e){const t=new Bt;t.makeRotationY(.1*e),this.nextDirection.applyMatrix4(t),this.nextDirection.normalize(),this.direction.copy(this.nextDirection);const n=Math.atan2(this.direction.x,this.direction.z);this.head.rotation.y=n}calculateWanderForce(){this.wanderAngle+=.1*(Math.random()-.5);const e=new ht;e.x=Math.cos(this.wanderAngle)*(.5*this.wanderRadius),e.z=Math.sin(this.wanderAngle)*(.5*this.wanderRadius);const t=Math.random()*Math.PI*2,n=new ht(.3*Math.cos(t),0,.3*Math.sin(t));return e.add(n),e.normalize()}checkCollisions(){if(this.collisionChecksEnabled){if(this.game.gameManager&&this.game.gameManager.obstacleSystem){const e=this.head.position,t=1.2;this.game.gameManager.obstacleSystem.checkCollisions({position:e,radius:t})&&(console.log("Bot: Obstacle collision detected",{position:e,radius:t}),this.game.createParticleEffect&&this.game.createParticleEffect(e,16711680,20,{scale:.2,lifetime:.5,velocityScale:2}),this.game.audioManager&&this.game.audioManager.play("collision"),this.performEmergencyAvoidance())}this.checkPlayerCollision()}}checkPlayerCollision(){if(!this.game.snake||!this.collisionChecksEnabled)return;const e=this.head.position,t=this.game.snake.head.position,n=e.distanceTo(t);if(n<2.4&&this.game.snake.direction){const i=this.game.snake.direction.clone().normalize(),s=(new ht).subVectors(e,t).normalize(),r=i.dot(s);r>.3&&(console.log("Bot: Player collision detected",{distance:n,dotProduct:r,positions:{bot:e,player:t}}),this.game.snake.die&&this.game.snake.die(),this.game.createParticleEffect&&this.game.createParticleEffect(t,16711680,30,{scale:.3,lifetime:1,velocityScale:3}),this.game.audioManager&&this.game.audioManager.play("collision"))}for(const i of this.game.snake.segments)e.distanceTo(i.position)<2.16&&(console.log("Bot: Player segment collision detected",{distance:e.distanceTo(i.position),positions:{bot:e,segment:i.position}}),this.game.snake.die&&this.game.snake.die(),this.game.createParticleEffect&&this.game.createParticleEffect(i.position,16711680,25,{scale:.25,lifetime:.8,velocityScale:2.5}),this.game.audioManager&&this.game.audioManager.play("collision"))}performEmergencyAvoidance(){this.head.position.clone();const e=this.direction.clone(),t=new ht(-e.z,0,e.x).normalize(),n=new ht(e.z,0,-e.x).normalize(),i=this.checkSpaceInDirection(t),s=this.checkSpaceInDirection(n),r=this.checkSpaceInDirection(e.multiplyScalar(-1));i>s&&i>r?this.direction.copy(t):s>i&&s>r?this.direction.copy(n):this.direction.copy(e.multiplyScalar(-1)),this.nextDirection.copy(this.direction)}checkSpaceInDirection(e){const t=this.head.position.clone(),n=t.clone().add(e.multiplyScalar(10));let i=10;const s=this.findNearbyObstacles();for(const l of s){const n=l.position.clone().sub(t),s=n.dot(e);if(s>0&&s<10){n.sub(e.multiplyScalar(s)).length()<2&&(i=Math.min(i,s))}}const r=(this.game.worldSize||45)/2,a=n.x,o=n.z;if(Math.abs(a)>r-2){const e=r-2-Math.abs(t.x);i=Math.min(i,e)}if(Math.abs(o)>r-2){const e=r-2-Math.abs(t.z);i=Math.min(i,e)}return i}checkPelletCollection(){if(!this.game.gameManager)return;const e=this.isMagnetMode?6:2;this.game.gameManager.pellets.forEach((t=>{if(!t.mesh)return;const n=this.head.position.distanceTo(t.mesh.position);n<e&&(console.log("Bot: Collecting regular pellet",{distance:n,collectionRadius:e,isMagnetMode:this.isMagnetMode,position:t.mesh.position.clone()}),this.collectPellet(t))})),this.game.gameManager.powerUps.forEach((e=>{if(!e.mesh)return;const t=this.head.position.distanceTo(e.mesh.position),n=this.isMagnetMode?8:4;t<n&&(console.log("Bot: Collecting power-up",{distance:t,powerUpCollectionRadius:n,isMagnetMode:this.isMagnetMode,type:e.type,position:e.mesh.position.clone()}),this.game.gameManager.collectPowerUp(e))}))}collectPellet(e){var t;if(this.isAlive){if(this.game.gameManager){let t=10;Object.keys(Qo.Types).includes(e.type)?(t=100,this.game.gameManager.powerUpSystem?(console.log("Bot: Activating power-up through GameManager",{type:e.type,hasGameManager:!!this.game.gameManager,hasPowerUpSystem:!!this.game.gameManager.powerUpSystem}),this.game.gameManager.powerUpSystem.activatePowerUp(e.type,this)):console.error("Bot: PowerUpSystem not found in GameManager")):"bonus"===e.type&&(t=50),this.game.gameManager.addScore&&this.game.gameManager.addScore(t)}if(this.addSegment(),this.game.audioManager&&(Object.keys(Qo.Types).includes(e.type)?this.game.audioManager.play("powerUpCollect"):"bonus"===e.type?this.game.audioManager.play("bonusCollect"):this.game.audioManager.play("pelletCollect")),this.game.createParticleEffect){let n=16766720,i=15,s=.1;if(Object.keys(Qo.Types).includes(e.type)){n=(null==(t=Qo.Types[e.type])?void 0:t.color)||65280,i=25,s=.15}else"bonus"===e.type&&(n=16711935,i=20,s=.12);this.game.createParticleEffect(e.mesh.position,n,i,{scale:s,lifetime:.5,velocityScale:2})}this.game.gameManager&&this.game.gameManager.removePellet(e),this.targetPellet=null}}addSegment(){const e=new ui(new po(.5,16,16),this.material.clone()),t=this.segments[this.segments.length-1],n=t?t.position:this.head.position,i=this.direction.clone().normalize();e.position.copy(n).sub(i.multiplyScalar(this.segmentSpacing)),e.position.y=.5,this.game.scene.add(e),this.segments.push(e);const s=this.positionHistory[this.positionHistory.length-1];s&&this.positionHistory.push(s.clone()),this.trail&&"function"==typeof this.trail.updateSegmentCount&&this.trail.updateSegmentCount(this.segments.length),this.segmentSpacing=Math.max(.8,1-.005*this.segments.length)}setGhostMode(e){console.log("Bot: Ghost mode",e),this.isGhostMode=e,e?(this.head.material.transparent=!0,this.head.material.opacity=.5,this.headGlow.material.transparent=!0,this.headGlow.material.opacity=.3,this.segments.forEach((e=>{e.material.transparent=!0,e.material.opacity=.5})),this.addGhostTrail()):(this.head.material.transparent=!1,this.head.material.opacity=1,this.headGlow.material.transparent=!1,this.headGlow.material.opacity=.3,this.segments.forEach((e=>{e.material.transparent=!1,e.material.opacity=1})),this.removeGhostTrail())}setTimeScale(e){console.log("Bot: Time scale",e),this.timeScale=e,this.speed=this.baseSpeed*e,this.updateInterval=30/e,this.pelletScanInterval=100/e,this.directionChangeInterval=500/e}setMagnetMode(e){if(console.log("Bot: Magnet mode",e),this.isMagnetMode=e,e){this.viewDistance=90,this.speed=1.2*this.baseSpeed;const e=new Pn(16711935);this.head.material.emissive=e,this.head.material.emissiveIntensity=.8,this.headGlow.material.emissive=e,this.headGlow.material.emissiveIntensity=.5,this.segments.forEach((t=>{t.material.emissive=e,t.material.emissiveIntensity=.6}))}else{this.viewDistance=60,this.speed=this.baseSpeed;const e=new Pn(16711680);this.head.material.emissive=e,this.head.material.emissiveIntensity=.4,this.headGlow.material.emissive=e,this.headGlow.material.emissiveIntensity=.3,this.segments.forEach((t=>{t.material.emissive=e,t.material.emissiveIntensity=.2}))}}setInvulnerable(e){if(console.log("Bot: Invulnerable mode",e),this.isInvulnerable=e,e){const e=new Pn(16776960);this.head.material.emissive=e,this.head.material.emissiveIntensity=.8,this.headGlow.material.emissive=e,this.headGlow.material.emissiveIntensity=.5,this.segments.forEach((t=>{t.material.emissive=e,t.material.emissiveIntensity=.6}))}else{const e=new Pn(16711680);this.head.material.emissive=e,this.head.material.emissiveIntensity=.4,this.headGlow.material.emissive=e,this.headGlow.material.emissiveIntensity=.3,this.segments.forEach((t=>{t.material.emissive=e,t.material.emissiveIntensity=.2}))}}addGhostTrail(){const e=new po(.4,8,8),t=new go({color:16711680,transparent:!0,opacity:.3,emissive:16711680,emissiveIntensity:.3});this.ghostTrails=[];for(let n=0;n<5;n++){const n=new ui(e,t);n.position.copy(this.head.position),this.game.scene.add(n),this.ghostTrails.push(n)}}removeGhostTrail(){this.ghostTrails&&(this.ghostTrails.forEach((e=>{this.game.scene.remove(e),e.geometry&&e.geometry.dispose(),e.material&&e.material.dispose()})),this.ghostTrails=[])}cleanup(){this.removeGhostTrail(),super.cleanup()}}class il{constructor(e){this.game=e,this.isRunning=!1,this.isGameOver=!1,this.collisionChecksEnabled=!1,this.pellets=[],this.powerUps=new Set,this.powerUpSystem=new Qo(e),this.obstacleSystem=new tl(e),this.settings={maxPellets:20,powerUpChance:.1,powerUpTypes:Object.keys(Qo.Types),spawnInterval:1e3,difficultyIncrease:.1},this.startDelay=1e3,this.startTime=0,this.lastSpawnTime=0,this.score=0,this.highScores=this.loadHighScores(),this.multiplier=1,this.combo=0,this.lastPelletTime=0,this.comboTimeout=null,this.updateScoreboard(),this.setupEventListeners(),this.comboSettings={comboTimeout:3e3,basePoints:10,comboMultipliers:[1,1.5,2,3,5],comboThresholds:[0,3,5,8,10],maxComboLevel:4},this.currentCombo=0,this.comboTimer=null,this.botSnake=null,this.botStartDelay=2e3}setupRenderer(){try{this.renderer=new Ea({antialias:!0,powerPreference:"high-performance"}),this.renderer.setSize(window.innerWidth,window.innerHeight),this.renderer.setPixelRatio(Math.min(window.devicePixelRatio,2)),this.renderer.shadowMap.enabled=!0,this.renderer.shadowMap.type=2,document.body.appendChild(this.renderer.domElement)}catch(e){console.error("Error setting up renderer:",e)}}setupLights(){this.ambientLight=new zo(4210752),this.scene.add(this.ambientLight),this.directionalLight=new Fo(16777215,1),this.directionalLight.position.set(1,1,1),this.directionalLight.castShadow=!0,this.directionalLight.shadow.mapSize.width=2048,this.directionalLight.shadow.mapSize.height=2048,this.scene.add(this.directionalLight),this.hemisphereLight=new wo(16777147,526368,1),this.scene.add(this.hemisphereLight)}setupEventListeners(){window.addEventListener("keydown",(e=>{"r"===e.key&&this.game.restart(),"p"===e.key&&this.togglePause()}))}start(){console.log("GameManager: Starting game"),this.isRunning=!0,this.isGameOver=!1,this.score=0,this.pellets=[],this.powerUps.clear(),this.totalPellets=0,this.pelletSpawnInterval=2,this.lastPelletSpawnTime=0,this.collisionChecksEnabled=!1,this.obstacleSystem.start(),this.powerUpSystem.start(),this.spawnInitialPellets(),this.spawnInitialPowerUps(),setTimeout((()=>{this.spawnBotSnake()}),this.botStartDelay),setTimeout((()=>{this.collisionChecksEnabled=!0,console.log("GameManager: Enabling collision checks")}),this.startDelay)}stop(){console.log("GameManager: Stopping game"),this.isRunning=!1,this.isGameOver=!1,this.collisionChecksEnabled=!1,this.powerUpSystem&&this.powerUpSystem.cleanup(),this.obstacleSystem&&this.obstacleSystem.cleanup(),this.cleanup()}spawnInitialPellets(){for(let e=0;e<5;e++)this.spawnPellet()}spawnInitialPowerUps(){for(let e=0;e<2;e++)this.spawnPowerUp()}spawnBotSnake(){const e=Math.random()*Math.PI*2,t=new ht(15*Math.cos(e),.5,15*Math.sin(e));this.botSnake=new nl(this.game,t),console.log("GameManager: Bot snake spawned",{position:t.clone(),angle:e})}update(e){this.isRunning&&(this.powerUpSystem.update(e),this.obstacleSystem.update(e),this.botSnake&&this.botSnake.isAlive&&this.botSnake.update(e),this.handleSpawning(),this.collisionChecksEnabled&&this.checkCollisions())}checkCollisions(){this.collisionChecksEnabled&&(this.game.snake&&this.game.snake.checkCollisions(),this.botSnake&&this.botSnake.isAlive&&(this.botSnake.checkCollisions(),this.game.snake&&this.game.snake.isAlive&&this.checkSnakeCollision(this.game.snake,this.botSnake)))}checkSnakeCollision(e,t){if(!e||!t)return;if(e.head.position.distanceTo(t.head.position)<1)return e.die(),void t.die();for(const n of t.segments)if(e.head.position.distanceTo(n.position)<.8)return void e.die();for(const n of e.segments)if(t.head.position.distanceTo(n.position)<.8)return void t.die()}collectPellet(e){if(!e||!this.isRunning||!this.game.snake)return;const t=Date.now(),n=t-this.lastPelletTime;n<this.comboSettings.comboTimeout?this.currentCombo++:this.currentCombo=0;const i=this.getComboLevel(),s=this.comboSettings.comboMultipliers[i],r=e.isBonus?50:this.comboSettings.basePoints,a=Math.round(r*s);this.score+=a,this.showScorePopup(a,this.currentCombo,i),this.lastPelletTime=t,this.comboTimer&&clearTimeout(this.comboTimer),this.comboTimer=setTimeout((()=>{this.currentCombo>0&&(this.currentCombo=0,this.updateScoreboard())}),this.comboSettings.comboTimeout),this.removePellet(e),this.game.snake.addSegment(),this.spawnPellet(),this.updateScoreboard(),i>=2&&this.createComboEffect(this.game.snake.head.position,i),this.game.audioManager&&this.game.audioManager.play("eat"),console.log("GameManager: Pellet collected",{points:a,basePoints:r,multiplier:s,combo:this.currentCombo,comboLevel:i,timeSinceLastPellet:n,snakeLength:this.game.snake.segments.length})}getComboLevel(){for(let e=this.comboSettings.maxComboLevel;e>=0;e--)if(this.currentCombo>=this.comboSettings.comboThresholds[e])return e;return 0}showScorePopup(e,t,n){const i=document.createElement("div");i.className="score-popup";const s=["#ffffff","#00ff00","#00ffff","#ff00ff","#ff0000"];i.innerHTML=`\n            <span class="points">+${e}</span>\n            ${t>1?`<span class="combo">x${t}</span>`:""}\n        `;const r=this.game.snake.head.position,a=this.worldToScreen(r);i.style.cssText=`\n            position: fixed;\n            left: ${a.x}px;\n            top: ${a.y-50}px;\n            color: ${s[n]};\n            font-size: ${[24,28,32,36,40][n]}px;\n            text-shadow: 0 0 10px ${s[n]};\n            pointer-events: none;\n            z-index: 1000;\n            font-family: 'Press Start 2P', monospace;\n            text-align: center;\n        `,document.body.appendChild(i),requestAnimationFrame((()=>{i.style.transform="translateY(-100px) scale(1.2)",i.style.opacity="0"})),setTimeout((()=>i.remove()),1e3)}createComboEffect(e,t){const n=10+5*t;this.game.createParticleEffect(e,[65280,65535,16711935,16711680][t-1],n,{scale:.2+.1*t,lifetime:1+.2*t,velocityScale:2+t,verticalForce:2+t,emissive:!0});const i={pitch:1+.2*t,volume:.5+.1*t};this.game.audioManager.play("combo",i)}worldToScreen(e){const t=e.clone();return t.project(this.game.camera),{x:(t.x+1)*window.innerWidth/2,y:(1-t.y)*window.innerHeight/2}}collectPowerUp(e){if(!e||this.isGameOver)return void console.log("GameManager: Cannot collect power-up",{hasPowerUp:!!e,isGameOver:this.isGameOver});const t=e.mesh?e.mesh.position.clone():null,n=e.type;let i=null,s=1/0;if(this.game.snake){const t=this.game.snake.head.position.distanceTo(e.mesh.position);t<4&&(i=this.game.snake,s=t)}if(this.botSnake&&this.botSnake.isAlive){const t=this.botSnake.head.position.distanceTo(e.mesh.position);t<4&&t<s&&(i=this.botSnake,s=t)}if(i&&(console.log("GameManager: Collecting power-up",{type:n,position:t,snakeType:i===this.game.snake?"player":"bot",snakePosition:i.head.position.clone(),distance:s}),this.powerUpSystem?(console.log("GameManager: Activating power-up through PowerUpSystem",{type:n,powerUpSystem:!!this.powerUpSystem,snake:i===this.game.snake?"player":"bot"}),this.powerUpSystem.activatePowerUp(n,i)):console.error("GameManager: PowerUpSystem not found"),this.powerUps.delete(e),e.cleanup(),setTimeout((()=>{this.isRunning&&!this.isGameOver&&this.spawnPowerUp()}),2e3),this.game.audioManager&&this.game.audioManager.play("powerUp"),this.game.createParticleEffect&&t)){const e=Qo.Types[n],i=e?e.color:65280;this.game.createParticleEffect(t,i,30,{scale:.3,lifetime:1,velocityScale:3})}}spawnPellet(){const e=Math.random()<.2?"bonus":"normal",t=this.game.worldSize||45,n=new ht((Math.random()-.5)*t,.5,(Math.random()-.5)*t),i=new Jo(this.game,n,e);this.pellets.push(i),console.log("GameManager: Spawned new pellet",{type:e,position:n.clone(),totalPellets:this.pellets.length,worldSize:t})}spawnPowerUp(){var e,t;const n=this.settings.powerUpTypes[Math.floor(Math.random()*this.settings.powerUpTypes.length)],i=this.game.worldSize||45,s=i/2-5;let r,a=0;do{const e=Math.random()*Math.PI*2,t=10+Math.random()*(s-10);r=new ht(Math.cos(e)*t,.5,Math.sin(e)*t),a++}while(this.isPositionOccupied(r)&&a<10);const o=new el(this.game,n);o.setPosition(r),this.powerUps.add(o),console.log("GameManager: Spawned new power-up",{type:n,powerUpType:Qo.Types[n],position:r.clone(),totalPowerUps:this.powerUps.size,worldSize:i,distanceFromCenter:r.length(),collisionChecksEnabled:this.collisionChecksEnabled,isRunning:this.isRunning,isGameOver:this.isGameOver,snakePosition:null==(t=null==(e=this.game.snake)?void 0:e.head)?void 0:t.position})}isPositionOccupied(e){for(const t of this.powerUps)if(t.position.distanceTo(e)<5)return!0;return!!(this.game.snake&&this.game.snake.head&&e.distanceTo(this.game.snake.head.position)<5)}handleSpawning(){const e=Date.now();e-this.lastSpawnTime>this.settings.spawnInterval&&(this.pellets.length<this.settings.maxPellets&&(Math.random()<this.settings.powerUpChance?this.spawnPowerUp():this.spawnPellet()),this.lastSpawnTime=e)}updateDifficulty(e){this.settings.spawnInterval=Math.max(500,this.settings.spawnInterval-e*this.settings.difficultyIncrease),this.obstacleSystem.increaseDifficulty(e)}gameOver(){this.isGameOver||(console.log("GameManager: Game over triggered"),this.collisionChecksEnabled=!1,this.isGameOver=!0,this.isRunning=!1,this.botSnake&&(this.botSnake.cleanup(),this.botSnake=null),this.game.audioManager&&this.game.audioManager.play("gameOver"),this.game.handleGameOver?this.game.handleGameOver():console.error("GameManager: handleGameOver method not found on game instance"),this.highScores.push({score:this.score,date:(new Date).toISOString()}),this.highScores.sort(((e,t)=>t.score-e.score)),this.highScores=this.highScores.slice(0,10),this.saveHighScores(),this.updateScoreboard())}showGameOverScreen(){const e=document.createElement("div");e.className="game-over",e.style.cssText="\n            position: fixed;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            background: rgba(0, 0, 0, 0.8);\n            padding: 20px;\n            border-radius: 10px;\n            color: white;\n            font-family: 'Press Start 2P', monospace;\n            text-align: center;\n            z-index: 1000;\n        ";const t=Math.max(...this.highScores.map((e=>e.score)),0);e.innerHTML=`\n            <h1>Game Over</h1>\n            <p>Score: ${this.score}</p>\n            <p>High Score: ${t}</p>\n            <button style="\n                background: #3EE0B1;\n                border: none;\n                padding: 10px 20px;\n                border-radius: 5px;\n                color: black;\n                font-family: 'Press Start 2P', monospace;\n                cursor: pointer;\n                margin-top: 20px;\n            ">Play Again</button>\n        `;e.querySelector("button").onclick=()=>{document.body.removeChild(e),this.game.restart()},document.body.appendChild(e)}restart(){console.log("GameManager: Restarting game"),this.isRunning=!0,this.isGameOver=!1,this.collisionChecksEnabled=!1,this.startTime=performance.now(),this.settings.spawnInterval=1e3,this.cleanup(),this.powerUpSystem.start(),this.obstacleSystem.start(),this.spawnInitialPellets(),setTimeout((()=>{console.log("GameManager: Enabling collision checks"),this.collisionChecksEnabled=!0}),3e3),console.log("GameManager: Game restarted:",{isRunning:this.isRunning,pelletCount:this.pellets.length})}togglePause(){this.isRunning=!this.isRunning,this.isRunning&&(this.startTime=performance.now(),this.collisionChecksEnabled=!1)}cleanup(){console.log("GameManager: Cleaning up game objects"),this.pellets.forEach((e=>{e&&e.cleanup&&e.cleanup()})),this.pellets=[],this.powerUps.forEach((e=>{e&&e.collect&&e.collect()})),this.powerUps.clear(),this.obstacleSystem&&this.obstacleSystem.cleanup(),this.botSnake&&(this.botSnake.cleanup(),this.botSnake=null)}addDecorations(){for(let e=0;e<20;e++){const e=.5+1*Math.random(),t=new mi(e,e,e),n=new fo({color:6710886,roughness:.7,metalness:.3}),i=new ui(t,n);i.position.x=80*(Math.random()-.5),i.position.z=80*(Math.random()-.5),i.position.y=e/2,i.castShadow=!0,i.receiveShadow=!0,this.scene.add(i)}}loadHighScores(){const e=localStorage.getItem("highScores");return e?JSON.parse(e):[]}saveHighScores(){localStorage.setItem("highScores",JSON.stringify(this.highScores))}updateScoreboard(){const e=document.getElementById("scores-container");if(!e)return;const t=[...this.highScores].sort(((e,t)=>t.score-e.score)).slice(0,10),n=t.map(((e,t)=>`\n            <div class="score-entry${e.score===this.score?" current":""}">\n                <span class="rank">#${t+1}</span>\n                <span class="score">${e.score}</span>\n            </div>\n        `)).join("");t.some((e=>e.score===this.score))?e.innerHTML=n:e.innerHTML=n+`\n                <div class="score-entry current">\n                    <span class="rank">Current</span>\n                    <span class="score">${this.score}</span>\n                </div>\n            `}removePellet(e){const t=this.pellets.indexOf(e);t>-1&&this.pellets.splice(t,1),e.cleanup()}}class sl{constructor(e){this.game=e,this.score=0,this.highScore=localStorage.getItem("snakeHighScore")||0,this.activePowerUps=new Map,this.isGameOver=!1,this.audioStatus=document.createElement("div"),this.audioStatus.className="audio-status",this.audioStatus.innerHTML="🔇 Click to enable audio",document.body.appendChild(this.audioStatus),this.setupHUD()}setupHUD(){this.hudCanvas=document.createElement("canvas"),this.hudCanvas.style.position="fixed",this.hudCanvas.style.top="0",this.hudCanvas.style.left="0",this.hudCanvas.style.width="100%",this.hudCanvas.style.height="100%",this.hudCanvas.style.pointerEvents="none",document.body.appendChild(this.hudCanvas),this.ctx=this.hudCanvas.getContext("2d"),this.resize(),this.resize=this.resize.bind(this),window.addEventListener("resize",this.resize)}resize(){this.hudCanvas.width=window.innerWidth,this.hudCanvas.height=window.innerHeight}updateScore(e){this.score+=e,this.score>this.highScore&&(this.highScore=this.score,localStorage.setItem("snakeHighScore",this.highScore))}addPowerUp(e){const t=this.game.gameManager.powerUps.get(e);t&&this.activePowerUps.set(e,Date.now()+t.duration)}updatePowerUpDuration(e,t){this.activePowerUps.has(e)&&this.activePowerUps.set(e,Date.now()+t)}removePowerUp(e){this.activePowerUps.delete(e)}getPowerUpColor(e){return{"Speed Boost":"#3EE0B1","Ghost Mode":"#E179DA","Size Multiplier":"#FAA70D",Invincibility:"#3EE0B1","Point Multiplier":"#E179DA","Time Slow":"#FAA70D","Rainbow Trail":"#E179DA",Magnet:"#3EE0B1"}[e]||"#FFFFFF"}render(){this.ctx.clearRect(0,0,this.hudCanvas.width,this.hudCanvas.height),this.ctx.fillStyle="#FFFFFF",this.ctx.font='24px "One Little Font", Arial',this.ctx.textAlign="left",this.ctx.fillStyle="#3EE0B1",this.ctx.fillText(`Score: ${this.score}`,20,40),this.ctx.fillStyle="#FAA70D",this.ctx.fillText(`High Score: ${this.highScore}`,20,70);let e=100;this.ctx.font='18px "Canva Sans", Arial',this.activePowerUps.forEach(((t,n)=>{const i=Math.max(0,Math.ceil((t-Date.now())/1e3)),s=this.getPowerUpColor(n);this.ctx.fillStyle=s,this.ctx.beginPath(),this.ctx.arc(30,e+8,8,0,2*Math.PI),this.ctx.fill(),this.ctx.fillStyle="#FFFFFF",this.ctx.fillText(`${n} (${i}s)`,50,e+12);const r=this.game.gameManager.powerUps.get(n).duration,a=Math.max(0,Math.min(1,i/(r/1e3)));this.ctx.fillStyle="#333333",this.ctx.fillRect(50,e+16,100,4),this.ctx.fillStyle=s,this.ctx.fillRect(50,e+16,100*a,4),e+=30}))}update(){this.game.audioManager&&(this.game.audioManager.hasUserInteracted?this.game.audioManager.isMuted?(this.audioStatus.innerHTML="🔇 Audio muted",this.audioStatus.style.display="block"):this.audioStatus.style.display="none":this.audioStatus.style.display="block")}cleanup(){this.hudCanvas&&this.hudCanvas.parentNode&&this.hudCanvas.parentNode.removeChild(this.hudCanvas),window.removeEventListener("resize",this.resize),this.audioStatus&&this.audioStatus.remove()}showGameOver(){console.log("HUD: Showing game over screen"),this.reset();const e=document.createElement("div");e.className="game-over-overlay",e.style.cssText="\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: rgba(0, 0, 0, 0.7);\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            z-index: 1000;\n            pointer-events: auto;\n        ";const t=document.createElement("div");t.style.cssText="\n            background: rgba(0, 0, 0, 0.8);\n            padding: 30px;\n            border-radius: 15px;\n            color: white;\n            text-align: center;\n            font-family: 'One Little Font', Arial, sans-serif;\n            pointer-events: auto;\n        ";const n=document.createElement("h1");n.textContent="Game Over",n.style.cssText="\n            margin: 0 0 20px 0;\n            font-size: 36px;\n            font-family: 'One Little Font', Arial, sans-serif;\n            color: #E179DA;\n        ";const i=document.createElement("p");i.textContent=`Score: ${this.score}`,i.style.cssText="\n            font-size: 24px;\n            margin: 10px 0;\n            font-family: 'Canva Sans', Arial, sans-serif;\n            color: #3EE0B1;\n        ";const s=document.createElement("p");s.textContent=`High Score: ${this.highScore}`,s.style.cssText="\n            font-size: 24px;\n            margin: 10px 0;\n            font-family: 'Canva Sans', Arial, sans-serif;\n            color: #FAA70D;\n        ";const r=document.createElement("button");r.textContent="Play Again",r.style.cssText="\n            background: #3EE0B1;\n            color: black;\n            border: none;\n            padding: 10px 20px;\n            font-size: 18px;\n            font-family: 'Canva Sans', Arial, sans-serif;\n            border-radius: 25px;\n            cursor: pointer;\n            margin-top: 20px;\n            pointer-events: auto;\n            transition: background-color 0.3s;\n        ",r.onmouseover=()=>{r.style.background="#FAA70D"},r.onmouseout=()=>{r.style.background="#3EE0B1"},t.appendChild(n),t.appendChild(i),t.appendChild(s),t.appendChild(r),e.appendChild(t),document.body.appendChild(e),r.addEventListener("click",(()=>{console.log("HUD: Play Again clicked"),e.remove(),this.game&&this.game.restart()})),console.log("HUD: Game over screen shown")}reset(){console.log("HUD: Resetting"),this.score=0,this.activePowerUps.clear();const e=document.querySelector(".game-over-overlay");e&&(e.remove(),console.log("HUD: Removed game over overlay")),this.hudCanvas&&(this.hudCanvas.style.pointerEvents="none"),this.ctx&&this.ctx.clearRect(0,0,this.hudCanvas.width,this.hudCanvas.height),console.log("HUD: Reset complete")}}class rl{constructor(e){this.scene=e,this.currentWeather="sunny",this.weatherParticles=[],this.weatherGroup=new ma,this.scene.add(this.weatherGroup),this.weatherStates={sunny:{particleCount:0,particleSpeed:0,particleSize:0,color:16777215},rain:{particleCount:1e3,particleSpeed:.5,particleSize:.1,color:4474111},snow:{particleCount:500,particleSpeed:.2,particleSize:.2,color:16777215}},this.initializeWeather()}initializeWeather(){this.createWeatherParticles(),this.setWeather("sunny")}createWeatherParticles(){const e=new Yn,t=[],n=[],i=[];for(let r=0;r<1e3;r++)t.push(100*Math.random()-50,100*Math.random(),100*Math.random()-50),n.push(2*Math.random()-1,2*Math.random()-1,2*Math.random()-1),i.push(.5*Math.random());e.setAttribute("position",new Bn(t,3)),e.setAttribute("velocity",new Bn(n,3)),e.setAttribute("size",new Bn(i,1));const s=new Oa({size:.1,color:16777215,transparent:!0,opacity:.6});this.weatherParticles=new Ga(e,s),this.weatherGroup.add(this.weatherParticles)}setWeather(e){if(!this.weatherStates[e])return;this.currentWeather=e;const t=this.weatherStates[e];this.weatherParticles.material.color.setHex(t.color),this.weatherParticles.material.size=t.particleSize;const n=this.weatherParticles.geometry.attributes.position.array,i=this.weatherParticles.geometry.attributes.velocity.array;for(let s=0;s<n.length;s+=3)"rain"===e?(n[s+1]=50*Math.random()+50,i[s+1]=-t.particleSpeed):"snow"===e?(n[s+1]=50*Math.random()+50,i[s+1]=-t.particleSpeed,i[s]=.5*(Math.random()-.5),i[s+2]=.5*(Math.random()-.5)):(n[s+1]=100*Math.random(),i[s+1]=0);this.weatherParticles.geometry.attributes.position.needsUpdate=!0,this.weatherParticles.geometry.attributes.velocity.needsUpdate=!0}update(e){if("sunny"===this.currentWeather)return;const t=this.weatherParticles.geometry.attributes.position.array,n=this.weatherParticles.geometry.attributes.velocity.array;for(let i=0;i<t.length;i+=3)t[i]+=n[i]*e,t[i+1]+=n[i+1]*e,t[i+2]+=n[i+2]*e,t[i+1]<-10&&(t[i+1]=100,t[i]=100*Math.random()-50,t[i+2]=100*Math.random()-50);this.weatherParticles.geometry.attributes.position.needsUpdate=!0}}class al{constructor(){this.sounds=new Map,this.weatherSounds=new Map,this.currentWeather="sunny",this.isMuted=!1,this.volume=.5,this.hasUserInteracted=!1,this.soundBuffers=new Map,this.loadedSounds=new Set,this.totalSounds=0,this.loadedCount=0,this.loadingPromise=null,this.isInitialized=!1,console.log("AudioManager: Initializing");try{this.audioContext=new(window.AudioContext||window.webkitAudioContext),console.log("AudioManager: Audio context created, state:",this.audioContext.state),this.masterGain=this.audioContext.createGain(),this.masterGain.connect(this.audioContext.destination),this.masterGain.gain.value=this.volume,this.isInitialized=!0}catch(t){console.error("AudioManager: Failed to create audio context:",t),this.isInitialized=!1}this.createAudioStatusIndicator();const e=async()=>{console.log("AudioManager: Click/touch detected"),await this.enableAudio()};[document.body,window,document.documentElement,document.getElementById("game-container")||document.body].forEach((t=>{t.addEventListener("click",e,{once:!0}),t.addEventListener("touchstart",e,{once:!0})})),console.log("AudioManager: Event listeners added")}createAudioStatusIndicator(){const e=document.createElement("div");e.id="audio-status",e.style.cssText="\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            background: rgba(0, 0, 0, 0.7);\n            color: white;\n            padding: 10px 20px;\n            border-radius: 5px;\n            font-family: 'Press Start 2P', monospace;\n            font-size: 12px;\n            z-index: 1000;\n            cursor: pointer;\n            transition: opacity 0.3s;\n        ",e.textContent="🔇 Click to enable audio",e.onclick=()=>this.enableAudio(),document.body.appendChild(e),this.audioStatusIndicator=e}async initializeSounds(){return this.loadingPromise||(this.loadingPromise=new Promise((async(e,t)=>{try{console.log("AudioManager: Initializing sounds");const t={eat:["assets/audio/eat.mp3"],gameOver:["assets/audio/gameOver.mp3"],powerUp:["assets/audio/powerUp.mp3"],turn:["assets/audio/turn.mp3"],background:["assets/audio/background.mp3"],click:["assets/audio/click.mp3"]},n={rain:["assets/audio/rain.mp3"],snow:["assets/audio/snow.mp3"],wind:["assets/audio/wind.mp3"]};this.totalSounds=Object.keys(t).length+Object.keys(n).length;let i=0;const s=async(e,t)=>{try{console.log("AudioManager: Loading sound:",e);for(const s of t)try{const t=await this.loadSoundFile(s);if(t)return this.soundBuffers.set(e,t),this.loadedSounds.add(e),i++,this.loadedCount=i,this.updateLoadingProgress(),console.log("AudioManager: Successfully loaded sound:",e),!0}catch(n){console.warn(`AudioManager: Failed to load ${s}:`,n)}return!1}catch(n){return console.error("AudioManager: Error loading sound:",e,n),!1}},r=[...Object.entries(t).map((([e,t])=>s(e,t))),...Object.entries(n).map((([e,t])=>s(e,t)))];await Promise.all(r),console.log("AudioManager: Sound initialization complete. Loaded:",i,"of",this.totalSounds),e()}catch(n){console.error("AudioManager: Failed to initialize sounds:",n),e()}}))),this.loadingPromise}updateLoadingProgress(){const e=this.loadedCount/this.totalSounds*100,t=document.getElementById("loading-bar"),n=document.getElementById("loading-text");t&&(t.style.width=`${e}%`),n&&(n.textContent=`Loading resources... ${Math.round(e)}%`)}async loadSoundFile(e){try{const t=await fetch(e);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const n=await t.arrayBuffer();return await this.audioContext.decodeAudioData(n)}catch(t){return console.error("AudioManager: Error loading sound file:",e,t),null}}play(e,t=!1){if(!this.isInitialized||!this.hasUserInteracted||this.isMuted)return void console.log("AudioManager: Sound not played - conditions not met:",{isInitialized:this.isInitialized,hasUserInteracted:this.hasUserInteracted,isMuted:this.isMuted,soundName:e});if(!this.loadedSounds.has(e))return void console.warn("AudioManager: Sound not loaded yet:",e);const n=this.soundBuffers.get(e);if(n)try{const i=this.audioContext.createBufferSource();i.buffer=n,i.loop=t;const s=this.audioContext.createGain();s.gain.value="eat"===e?1.5*this.volume:this.volume,i.connect(s),s.connect(this.masterGain),i.start(0),console.log("AudioManager: Started playing sound:",e),t&&this.sounds.set(e,{source:i,gainNode:s}),i.onended=()=>{i.disconnect(),s.disconnect(),t&&this.sounds.delete(e)}}catch(i){console.error("AudioManager: Failed to play sound:",e,i)}else console.warn("AudioManager: Sound buffer not found:",e)}stop(e){const t=this.sounds.get(e);if(t)try{t.source.stop(),t.source.disconnect(),t.gainNode.disconnect(),this.sounds.delete(e)}catch(n){console.error("AudioManager: Error stopping sound:",e,n)}}setVolume(e){this.volume=Math.max(0,Math.min(1,e)),this.masterGain.gain.value=this.volume}async enableAudio(){if(console.log("AudioManager: enableAudio called, hasUserInteracted:",this.hasUserInteracted),!this.hasUserInteracted)if(this.hasUserInteracted=!0,this.audioStatusIndicator&&(this.audioStatusIndicator.textContent="🔊 Audio enabled",setTimeout((()=>{this.audioStatusIndicator.style.opacity="0",setTimeout((()=>{this.audioStatusIndicator.remove()}),300)}),2e3)),this.audioContext)if(console.log("AudioManager: Current audio context state:",this.audioContext.state),"suspended"===this.audioContext.state){console.log("AudioManager: Resuming audio context");try{await this.audioContext.resume(),console.log("AudioManager: Audio context resumed successfully, new state:",this.audioContext.state),await this.initializeSounds(),this.play("background",!0)}catch(e){console.error("AudioManager: Failed to resume audio context:",e)}}else console.log("AudioManager: Audio context already running, starting background music"),await this.initializeSounds(),this.play("background",!0);else console.error("AudioManager: No audio context available")}cleanup(){for(const[e,t]of this.sounds)this.stop(e);this.sounds.clear(),this.audioStatusIndicator&&this.audioStatusIndicator.remove(),this.audioContext&&this.audioContext.close()}async setWeather(e){console.log("AudioManager: Setting weather to:",e,{hasUserInteracted:this.hasUserInteracted,isMuted:this.isMuted,loadedSounds:Array.from(this.loadedSounds),availableBuffers:Array.from(this.soundBuffers.keys())}),this.audioContext&&"suspended"===this.audioContext.state&&(console.log("AudioManager: Resuming audio context for weather change"),await this.audioContext.resume());for(const[t,n]of this.weatherSounds.entries())n.source&&(console.log("AudioManager: Stopping previous weather sound:",t),n.source.stop(),n.source.disconnect(),this.weatherSounds.delete(t));if("sunny"!==e&&this.soundBuffers.has(e)){console.log("AudioManager: Playing weather sound:",e,{buffer:this.soundBuffers.get(e),audioContextState:this.audioContext.state});const t=this.soundBuffers.get(e),n=this.audioContext.createBufferSource();n.buffer=t,n.loop=!0;const i=this.audioContext.createGain();i.gain.value=.8*this.volume,n.connect(i),i.connect(this.masterGain),n.start(0),console.log("AudioManager: Started playing weather sound:",e,{volume:i.gain.value,masterVolume:this.masterGain.gain.value,audioContextState:this.audioContext.state}),this.weatherSounds.set(e,{source:n,gainNode:i})}else console.log("AudioManager: Weather sound not available:",e,{isSunny:"sunny"===e,hasBuffer:this.soundBuffers.has(e),loadedSounds:Array.from(this.loadedSounds),audioContextState:this.audioContext.state})}stopAllSounds(){for(const[e,t]of this.sounds.entries())t.source&&(t.source.stop(),t.source.disconnect(),this.sounds.delete(e));for(const[e,t]of this.weatherSounds.entries())t.source&&(t.source.stop(),t.source.disconnect(),this.weatherSounds.delete(e))}}class ol{constructor(e){this.game=e,this.scores=[],this.currentScore=0,this.element=null,this.scoresContainer=null,this.createScoreboard()}createScoreboard(){this.element=document.createElement("div"),this.element.className="scoreboard";const e=document.createElement("h2");e.textContent="High Scores",this.element.appendChild(e),this.scoresContainer=document.createElement("div"),this.scoresContainer.id="scores-container",this.element.appendChild(this.scoresContainer),document.body.appendChild(this.element)}updateScore(e){this.currentScore=e,this.updateDisplay()}addScore(e){this.scores.push(e),this.scores.sort(((e,t)=>t-e)),this.scores=this.scores.slice(0,10),this.updateDisplay(),localStorage.setItem("snakeHighScores",JSON.stringify(this.scores))}loadScores(){const e=localStorage.getItem("snakeHighScores");e&&(this.scores=JSON.parse(e),this.updateDisplay())}updateDisplay(){if(this.scoresContainer.innerHTML="",this.currentScore>0){const e=this.createScoreEntry(this.currentScore,this.getScoreRank(this.currentScore),!0);this.scoresContainer.appendChild(e)}this.scores.forEach(((e,t)=>{if(e!==this.currentScore||0===this.currentScore){const n=this.createScoreEntry(e,t+1,!1);this.scoresContainer.appendChild(n)}}))}createScoreEntry(e,t,n){const i=document.createElement("div");i.className="score-entry"+(n?" current":"");const s=document.createElement("span");s.className="rank",s.textContent=`#${t}`;const r=document.createElement("span");return r.className="score",r.textContent=e,i.appendChild(s),i.appendChild(r),i}getScoreRank(e){return this.scores.filter((t=>t>e)).length+1}reset(){this.currentScore=0,this.updateDisplay()}cleanup(){this.element&&this.element.parentNode&&this.element.parentNode.removeChild(this.element)}}class ll{constructor(e){this._loadingProgressCallback=e||(()=>{}),this.initializeCore(),this.updateLoadingProgress(10,"Initializing core components..."),this.audioManager=new al,this.initializeGame().catch((e=>{console.error("Game: Failed to initialize:",e),this.forceShowGame()})),this.lastTime=0,this.isRunning=!1,this.isGameOver=!1,this.lastPelletSpawnTime=0,this.pelletSpawnInterval=2,this.specialPelletChance=.2,this.frameCount=0,this.dayNightCycle=0,this.particles=[],this.snakeTrail=[],this.weatherChangeInterval=30,this.lastWeatherChange=0,this.inputManager={keys:new Set,directions:{ArrowUp:new ht(0,0,-1),ArrowDown:new ht(0,0,1),ArrowLeft:new ht(-1,0,0),ArrowRight:new ht(1,0,0)}}}forceShowGame(){console.log("Game: Force showing game");const e=document.getElementById("loading-screen"),t=document.getElementById("game-container");e?(e.classList.add("hidden"),console.log("Game: Added hidden class to loading screen")):console.warn("Game: Loading screen element not found"),t?(t.style.visibility="visible",console.log("Game: Made game container visible"),window.dispatchEvent(new Event("resize"))):console.warn("Game: Game container element not found"),this.isRunning||(console.log("Game: Starting game as it was not running"),this.start())}async initializeGame(){try{console.log("Game: Starting initialization sequence"),this.weatherSystem=new rl(this.scene),this.updateLoadingProgress(20,"Weather system initialized..."),await this.initializeSystems(),this.updateLoadingProgress(40,"Game systems initialized..."),await this.createBasicScene(),this.updateLoadingProgress(60,"Scene created...");const e=Promise.race([this.audioManager.initializeSounds(),new Promise(((e,t)=>setTimeout((()=>t(new Error("Audio initialization timeout"))),5e3)))]).catch((e=>(console.warn("Game: Audio initialization timed out or failed:",e),null)));await e,console.log("Game: Audio initialization complete"),this.updateLoadingProgress(80,"Audio initialized..."),this.updateLoadingProgress(100,"Ready!"),console.log("Game: All systems initialized, showing instructions"),await this.showInstructions(),console.log("Game: Initialization sequence complete")}catch(e){console.error("Game: Failed to initialize:",e),this.updateLoadingProgress(0,"Error initializing game. Please refresh the page.")}}async showInstructions(){return new Promise((e=>{const t=document.getElementById("loading-progress"),n=document.getElementById("loading-text"),i=document.getElementById("instructions"),s=document.getElementById("start-button");t&&(t.style.display="none"),n&&(n.textContent="Ready!"),i&&(i.style.display="block",console.log("Game: Showing instructions panel")),s&&(s.onclick=()=>{console.log("Game: Start button clicked"),i&&(i.style.display="none"),this.forceShowGame(),this.start(),e()})}))}initializeCore(){this.setupScene(),this.setupRenderer(),this.setupCamera(),this.setupLights(),this.createBasicScene(),this.setupInput(),this.hud=new sl(this),this.scoreboard=new ol(this),this.scoreboard.loadScores()}initializeSystems(){this.gameManager=new il(this),this.powerUpSystem=new Qo(this),this.obstacleSystem=new tl(this),this.obstacleSystem.start();const e=new ht(0,.5,0);this.snake=new Ko(this,e),this.cameraController&&this.cameraController.setTarget(this.snake.head),this.gameManager.start();const t=this.handleResize.bind(this);window.addEventListener("resize",t),this._boundHandleResize=t}cleanup(){this.isRunning=!1,this._boundHandleResize&&(window.removeEventListener("resize",this._boundHandleResize),this._boundHandleResize=null),this.hud&&this.hud.cleanup(),this.scoreboard&&this.scoreboard.cleanup(),this.obstacleSystem&&this.obstacleSystem.cleanup(),this.scene&&this.scene.traverse((e=>{e.geometry&&e.geometry.dispose(),e.material&&(Array.isArray(e.material)?e.material.forEach((e=>e.dispose())):e.material.dispose())})),this.cameraController&&this.cameraController.cleanup(),this.renderer&&(this.renderer.dispose(),this.renderer.domElement.remove()),this.gameManager&&this.gameManager.cleanup(),this.audioManager&&this.audioManager.cleanup()}setupRenderer(){try{this.renderer=new Ea({antialias:!0,powerPreference:"high-performance",alpha:!1}),this.renderer.setClearColor(0),this.renderer.setSize(window.innerWidth,window.innerHeight),this.renderer.setPixelRatio(Math.min(window.devicePixelRatio,2)),this.renderer.shadowMap.enabled=!0,this.renderer.shadowMap.type=2;const e=document.querySelector("canvas");e&&e.remove();const t=document.getElementById("game-container");t?t.appendChild(this.renderer.domElement):document.body.appendChild(this.renderer.domElement),console.log("Game: Renderer initialized",{width:window.innerWidth,height:window.innerHeight,pixelRatio:this.renderer.getPixelRatio(),shadowsEnabled:this.renderer.shadowMap.enabled})}catch(e){throw console.error("Error setting up renderer:",e),e}}setupScene(){this.scene=new ba,this.scene.background=new Pn(9127187),this.scene.fog=new wa(9127187,.01),console.log("Game: Scene initialized")}setupCamera(){this.camera=new wi(75,window.innerWidth/window.innerHeight,.1,1e3),this.camera.position.set(0,15,20),this.camera.lookAt(0,0,0);try{this.cameraController=new Yo(this)}catch(e){console.warn("Error initializing camera controller:",e),this.camera.position.set(0,30,30),this.camera.lookAt(0,0,0)}}setupLights(){this.ambientLight=new zo(16770229,.4),this.scene.add(this.ambientLight),this.directionalLight=new Fo(16770229,1),this.directionalLight.position.set(50,50,50),this.directionalLight.castShadow=!0,this.directionalLight.shadow.mapSize.width=2048,this.directionalLight.shadow.mapSize.height=2048,this.directionalLight.shadow.camera.near=.5,this.directionalLight.shadow.camera.far=500,this.directionalLight.shadow.bias=-1e-4,this.scene.add(this.directionalLight),this.hemisphereLight=new wo(16115411,4863784,.6),this.scene.add(this.hemisphereLight);[[-80,0,-80],[80,0,-80],[-80,0,80],[80,0,80]].forEach((e=>{const t=new Po(16770229,1);t.position.set(e[0],15,e[2]),t.target.position.set(e[0],0,e[2]),t.angle=Math.PI/6,t.penumbra=.3,t.decay=1.5,t.distance=30,t.castShadow=!0,this.scene.add(t),this.scene.add(t.target)}))}setupInput(){window.addEventListener("keydown",(e=>{if(["ArrowUp","ArrowDown","ArrowLeft","ArrowRight","w","a","s","d"].includes(e.key)){e.preventDefault();const t=this.inputManager.directions[e.key];t&&this.snake&&(console.log("Game: Key pressed",{key:e.key,direction:t.clone(),currentSnakeDirection:this.snake.direction?this.snake.direction.clone():null,snakePosition:this.snake.head.position.clone()}),this.snake.setDirection(t))}}))}createBasicScene(){const e=new zi(100,100),t=new So,n=new fo({color:16777215,roughness:.7,metalness:.3,envMapIntensity:1,side:2,transparent:!0});this.ground=new ui(e,n),this.ground.rotation.x=-Math.PI/2,this.ground.position.y=.01,this.ground.receiveShadow=!0,this.scene.add(this.ground);const i=new zi(30,30);console.log("Loading aiai texture for ground"),t.load("assets/img/aiai_header.png",(e=>{console.log("Successfully loaded aiai texture"),e.flipY=!0;const t=new fo({map:e,transparent:!0,opacity:.8,depthWrite:!0,roughness:.5,metalness:.1,side:2}),n=new ui(i,t);n.rotation.x=-Math.PI/2,n.rotation.z=-Math.PI,n.position.y=.02,n.position.z=0,n.position.x=0,n.receiveShadow=!0,this.scene.add(n),console.log("Added logo to scene")}),(e=>{console.log("Texture loading progress:",e.loaded/e.total*100+"%")}),(e=>{console.error("Error loading aiai texture:",e)}));const s=new Bo(100,20,14737632,15790320);s.material.opacity=.2,s.material.transparent=!0,s.position.y=.02,this.scene.add(s),this.createCoffeeShopEnvironment(),this.addDecorations()}createCoffeeShopEnvironment(){this.createWalls();const e=new zi(100,100),t=new fo({color:9127187,roughness:.8,metalness:.2}),n=new ui(e,t);n.rotation.x=-Math.PI/2,n.position.y=0,this.scene.add(n),this.addFurniture(),this.addKiosk(),this.addNPCs(),this.addCoffeeShopProps(),this.createPictureFrames()}createWalls(){}async createPictureFrames(){const e=new mi(8.64,11.52,.3),t=new fo({color:9127187,roughness:.3,metalness:.1,emissive:4863784,emissiveIntensity:.2}),n=[{pos:[-20,12,-70],rotation:0,image:"assets/img/frame1.png"},{pos:[20,12,-70],rotation:0,image:"assets/img/frame2.png"}],i=new So,s=await Promise.all(n.map((async({image:e})=>{try{console.log("Attempting to load image:",e);return await new Promise(((t,n)=>{i.load(e,(n=>{console.log("Successfully loaded image:",e),n.minFilter=k,n.magFilter=k,n.format=K,n.flipY=!0,n.needsUpdate=!0,t(n)}),(t=>{console.log(`Loading progress for ${e}:`,t.loaded/t.total*100+"%")}),(t=>{console.error(`Failed to load image ${e}:`,t),n(t)}))}))}catch(t){return console.error(`Failed to load image ${e}:`,t),null}})));n.forEach((({pos:n,rotation:i,image:r},a)=>{const o=new ui(e,t);o.position.set(n[0],n[1],n[2]),o.rotation.y=i,o.castShadow=!0,o.receiveShadow=!0,this.scene.add(o);const l=new zi(8.06,10.94),c=new Dn({color:16777215,side:2,map:s[a]||null,transparent:!0,opacity:1,depthWrite:!1,depthTest:!1}),h=new ui(l,c);h.position.set(n[0],n[1],n[2]-.1),h.rotation.y=i,h.renderOrder=1,this.scene.add(h);const d=new Po(16770229,1.5);d.position.set(n[0],n[1]+3,n[2]+3),d.target.position.set(n[0],n[1],n[2]),d.angle=Math.PI/6,d.penumbra=.3,d.decay=1.5,d.distance=15,this.scene.add(d),this.scene.add(d.target),h.userData.isPictureFrame=!0,h.userData.frameIndex=a,console.log("Added picture frame at:",n,"with image:",r)}))}addFurniture(){const e=new lo(3,3,.5,16),t=new go({color:9127187,shininess:30}),n=new mi(1.2,1.8,1.2),i=new go({color:16758470,shininess:30});[[-57.5,0,-57.5],[-57.5,0,-34.5],[-57.5,0,-11.5],[57.5,0,-57.5],[57.5,0,-34.5],[57.5,0,-11.5],[-57.5,0,11.5],[-57.5,0,34.5],[-57.5,0,57.5],[57.5,0,11.5],[57.5,0,34.5],[57.5,0,57.5]].forEach((s=>{const r=new ui(e,t);r.position.set(s[0],s[1]+.25,s[2]),r.castShadow=!0,r.receiveShadow=!0,this.scene.add(r);[[-3.5,0,0],[3.5,0,0],[0,0,-3.5],[0,0,3.5]].forEach((e=>{const t=new ui(n,i);t.position.set(s[0]+e[0],s[1]+.9,s[2]+e[2]),t.castShadow=!0,t.receiveShadow=!0,this.scene.add(t)}))}))}addKiosk(){const e=new mi(15,6,6),t=new go({color:16115411,shininess:50}),n=new ui(e,t);n.position.set(0,3,-70),n.castShadow=!0,n.receiveShadow=!0,this.scene.add(n);const i=new mi(18,.3,7),s=new go({color:4863784,shininess:60}),r=new ui(i,s);r.position.set(0,6,-69),r.castShadow=!0,r.receiveShadow=!0,this.scene.add(r),this.addCoffeeShopProps(),this.addPlants()}addNPCs(){const e=new oo(.8,1.5,4,8),t=new po(.6,16,16),n=[[-50,0,-50],[50,0,-30],[-50,0,10],[50,0,50],[-3,0,-68],[3,0,-68]];n.forEach(((i,s)=>{const r=s>=n.length-2?4120753:14776794,a=new go({color:r,shininess:30}),o=new ui(e,a);o.position.set(i[0],i[1]+2.25,i[2]),o.castShadow=!0,this.scene.add(o);const l=new go({color:r,shininess:30}),c=new ui(t,l);c.position.set(i[0],i[1]+4,i[2]),c.castShadow=!0,this.scene.add(c);const h={body:o,head:c,initialY:i[1]+2.25};h.floatSpeed=.5+.5*Math.random(),h.floatOffset=Math.random()*Math.PI*2,this.npcs=this.npcs||[],this.npcs.push(h)}))}addPlants(){[[-8,0,-68],[8,0,-68],[-50,0,-70],[50,0,-70],[-50,0,70],[50,0,70]].forEach((e=>{const t=new lo(1.2,.9,1.8,16),n=new go({color:4863784,shininess:30}),i=new ui(t,n);i.position.set(...e),i.castShadow=!0,i.receiveShadow=!0,this.scene.add(i);const s=new po(1.5,16,16),r=new go({color:8299641,shininess:20}),a=new ui(s,r);a.position.set(e[0],e[1]+2.25,e[2]),a.scale.set(1.5,2.25,1.5),a.castShadow=!0,this.scene.add(a)}))}addCoffeeShopProps(){[-4,0,4].forEach((e=>{const t=new ui(new mi(1.5,1.5,1),new go({color:16777215,shininess:90}));t.position.set(e,4.85,-69),t.castShadow=!0,this.scene.add(t)}));[{pos:[-80,0,-80],rotation:.4},{pos:[80,0,-80],rotation:-.4},{pos:[-80,0,80],rotation:.3},{pos:[80,0,80],rotation:-.3}].forEach((({pos:e,rotation:t})=>{const n=new ui(new lo(4,3,8,32),new go({color:16777215,shininess:100}));n.position.set(e[0],e[1]+4,e[2]),n.rotation.y=t,n.castShadow=!0,this.scene.add(n);const i=new ui(new mo(2,.5,16,32),new go({color:16777215,shininess:100}));i.position.set(e[0]+4,e[1]+4,e[2]),i.rotation.y=t+Math.PI/2,i.castShadow=!0,this.scene.add(i);const s=new ui(new lo(5.5,5.7,.4,32),new go({color:16777215,shininess:100}));s.position.set(e[0],e[1]+.2,e[2]),s.rotation.y=t,s.castShadow=!0,this.scene.add(s);const r=new ui(new lo(3.8,3.8,.1,32),new go({color:4863784,shininess:60,transparent:!0,opacity:.9}));r.position.set(e[0],e[1]+7.5,e[2]),r.rotation.y=t,this.scene.add(r);for(let a=0;a<5;a++){const t=new ui(new po(.4,8,8),new go({color:16777215,transparent:!0,opacity:.3}));t.position.set(e[0]+3*(Math.random()-.5),e[1]+8+1*a,e[2]+3*(Math.random()-.5)),t.userData.initialY=t.position.y,t.userData.floatSpeed=.3+.2*Math.random(),t.userData.floatOffset=Math.random()*Math.PI*2,this.scene.add(t)}}));[[-60,8,-60],[-60,8,0],[-60,8,60],[60,8,-60],[60,8,0],[60,8,60]].forEach((e=>{const t=new ui(new lo(.2,.4,1,16),new go({color:16770229,emissive:16770229,emissiveIntensity:.5}));t.position.set(...e),this.scene.add(t);const n=new No(16770229,.8,20);n.position.set(...e),this.scene.add(n)}))}addDecorations(){for(let e=0;e<30;e++){const t=.2+.3*Math.random(),n=new po(t,16,16),i=[4120753,16426765,14776794],s=new go({color:i[e%3],emissive:i[e%3],emissiveIntensity:.3,transparent:!0,opacity:.7,shininess:30}),r=new ui(n,s),a=20+20*Math.random(),o=e/30*Math.PI*2;r.position.x=Math.cos(o)*a,r.position.z=Math.sin(o)*a,r.position.y=2+8*Math.random(),r.userData.initialY=r.position.y,r.userData.floatSpeed=.5+.5*Math.random(),r.userData.floatOffset=Math.random()*Math.PI*2,r.castShadow=!0,this.scene.add(r)}for(let e=0;e<15;e++){const e=new uo(.5,.7,32),t=new go({color:4120753,emissive:4120753,emissiveIntensity:.2,side:2,transparent:!0,opacity:.3}),n=new ui(e,t);n.rotation.x=-Math.PI/2,n.position.x=80*(Math.random()-.5),n.position.z=80*(Math.random()-.5),n.position.y=.01,this.scene.add(n)}}restart(){var e,t;console.log("Game: Restarting game");const n=document.getElementById("loading-screen"),i=document.getElementById("game-container");if(n&&i){n.style.display="flex",i.style.display="none";const e=document.getElementById("loading-text");e&&(e.textContent="Restarting game...")}if(this.isRunning=!1,this.isGameOver=!1,this.frameCount=0,this.snake&&(this.snake.cleanup(),this.snake=null),this.gameManager&&this.gameManager.stop(),this.powerUpSystem)try{this.powerUpSystem.stop()}catch(a){console.warn("Game: Error stopping power-up system:",a)}this.camera&&(this.camera.position.set(0,15,20),this.camera.lookAt(0,0,0));const s=[];this.scene.traverse((e=>{e!==this.scene&&s.push(e)})),s.forEach((e=>{this.scene.remove(e),e.geometry&&e.geometry.dispose(),e.material&&(Array.isArray(e.material)?e.material.forEach((e=>e.dispose())):e.material.dispose())})),this.scene.background=new Pn(9127187),this.scene.fog=new wa(9127187,.01),this.setupLights(),this.updateLoadingProgress(30),this.createBasicScene(),this.updateLoadingProgress(60);const r=new ht(0,.5,0);this.snake=new Ko(this,r),this.updateLoadingProgress(80),this.cameraController&&this.cameraController.setTarget(this.snake.head),this.gameManager=new il(this),this.powerUpSystem=new Qo(this),this.gameManager.start(),this.powerUpSystem.start(),this.isRunning=!0,this.isGameOver=!1,this.updateLoadingProgress(100),setTimeout((()=>{n&&i&&(n.style.display="none",i.style.display="block")}),500),this.animate(),console.log("Game: Restart complete",{isRunning:this.isRunning,isGameOver:this.isGameOver,hasSnake:!!this.snake,hasPowerUpSystem:!!this.powerUpSystem,snakePosition:null==(t=null==(e=this.snake)?void 0:e.head)?void 0:t.position,hasEnvironment:!0})}handleGameOver(){this.isGameOver||(console.log("Game: Handling game over"),this.isGameOver=!0,this.isRunning=!1,this.gameManager&&(this.gameManager.gameOver(),setTimeout((()=>{this.gameManager.showGameOverScreen(),console.log("Game: Game over screen shown",{isRunning:this.isRunning,isGameOver:this.isGameOver,hasSnake:!!this.snake,score:this.gameManager.score})}),100)),this.scoreboard&&this.scoreboard.addScore(this.snake.score))}stop(){console.log("Game: Stopping game"),this.isRunning=!1,cancelAnimationFrame(this.animationFrameId),this.animationFrameId=null;const e=document.getElementById("gameOverScreen");e&&(e.style.display="flex",console.log("Game: Game over screen displayed"))}createParticleEffect(e,t,n=10,i={}){const{scale:s=.1,lifetime:r=1,velocityScale:a=2,verticalForce:o=1,emissive:l=!1}=i;for(let c=0;c<n;c++){const n=new ui(new po(s,8,8),new go({color:t,transparent:!0,opacity:.8,emissive:l?t:0,emissiveIntensity:l?.5:0}));n.position.copy(e),n.velocity=new ht((Math.random()-.5)*a,Math.random()*o,(Math.random()-.5)*a),n.lifetime=r,n.initialScale=s,this.particles.push(n),this.scene.add(n)}}updateParticles(e){for(let t=this.particles.length-1;t>=0;t--){const n=this.particles[t];if(n.lifetime-=e,n.lifetime<=0){this.scene.remove(n),this.particles.splice(t,1);continue}n.velocity.y-=2*e,n.position.add(n.velocity.clone().multiplyScalar(e)),n.material.opacity=n.lifetime*n.lifetime*.8;const i=n.initialScale*(.5+.5*n.lifetime);n.scale.set(i,i,i),n.rotation.x+=e*(Math.random()-.5),n.rotation.z+=e*(Math.random()-.5),n.velocity.multiplyScalar(.98)}}createSnakeTrail(){if(!this.snake||!this.snake.head)return;const e=new ui(new po(.2,8,8),new go({color:4120753,transparent:!0,opacity:.5}));e.position.copy(this.snake.head.position),e.lifetime=.5,this.snakeTrail.push(e),this.scene.add(e)}updateSnakeTrail(e){for(let t=this.snakeTrail.length-1;t>=0;t--){const n=this.snakeTrail[t];n.lifetime-=e,n.lifetime<=0?(this.scene.remove(n),this.snakeTrail.splice(t,1)):(n.material.opacity=n.lifetime,n.scale.multiplyScalar(.95))}}updateDayNightCycle(e){this.dayNightCycle+=.05*e;const t=(Math.sin(this.dayNightCycle)+1)/2,n=new Pn(16770229),i=new Pn(16777215),s=new Pn(16752762),r=new Pn(4878218);let a;a=t<.25?n.lerp(i,4*t):t<.5?i:t<.75?i.lerp(s,4*(t-.5)):s.lerp(r,4*(t-.75)),this.ambientLight.color=a,this.ambientLight.intensity=.2+.4*t,this.directionalLight.color=a,this.directionalLight.intensity=.4+.6*t,this.hemisphereLight.color=a,this.hemisphereLight.groundColor=r,this.hemisphereLight.intensity=.2+.4*t,this.scene.fog.color=a,this.scene.fog.density=.01+.02*(1-t),this.scene.traverse((e=>{e.material&&e.material.opacity<.5&&(e.material.opacity=.1+.3*t)}))}onSnakeTurn(e){this.createParticleEffect(e,4120753,8,{scale:.15,lifetime:.6,velocityScale:1,verticalForce:.5}),this.audioManager.play("turn")}onGameOver(e){this.createParticleEffect(e,14776794,40,{scale:.2,lifetime:2,velocityScale:4,verticalForce:3,emissive:!0}),this.audioManager.play("gameOver")}onSpeedBoost(e){this.createParticleEffect(e,16426765,20,{scale:.15,lifetime:.8,velocityScale:3,verticalForce:1,emissive:!0}),this.audioManager.play("powerUp")}addAmbientParticles(){for(let e=0;e<100;e++){const e=new ui(new po(.05,4,4),new go({color:16777215,transparent:!0,opacity:.2}));e.position.set(160*(Math.random()-.5),1+6*Math.random(),160*(Math.random()-.5)),e.userData.initialY=e.position.y,e.userData.floatSpeed=.2+.3*Math.random(),e.userData.floatOffset=Math.random()*Math.PI*2,e.userData.driftSpeed={x:.2*(Math.random()-.5),z:.2*(Math.random()-.5)},this.scene.add(e)}}handleResize(){const e=this.renderer.domElement.parentElement,t=e.clientWidth,n=e.clientHeight;this.camera.aspect=t/n,this.camera.updateProjectionMatrix(),this.renderer.setSize(t,n),this.hud&&this.hud.updateSize(t,n)}start(){if(!this.isRunning){if(console.log("Game: Starting game"),this.isRunning=!0,this.isGameOver=!1,this.lastTime=performance.now(),!this.snake){const e=new ht(0,.5,0);this.snake=new Ko(this,e),this.cameraController&&this.cameraController.setTarget(this.snake.head)}this.animate(),console.log("Game: Started",{isRunning:this.isRunning,hasSnake:!!this.snake,hasGameManager:!!this.gameManager,cameraPosition:this.camera.position.clone(),rendererSize:{width:this.renderer.domElement.width,height:this.renderer.domElement.height}})}}animate(){if(!this.isRunning)return;const e=performance.now(),t=(e-this.lastTime)/1e3;this.lastTime=e,this.frameCount++,this.gameManager&&this.gameManager.update(t),this.snake&&(this.snake.update(t),this.obstacleSystem&&this.obstacleSystem.checkCollisions(this.snake.head)&&this.handleGameOver()),this.powerUpSystem&&this.powerUpSystem.update(t),this.obstacleSystem&&(this.obstacleSystem.update(t),this.obstacleSystem.increaseDifficulty(t)),this.cameraController&&this.cameraController.update(t),this.weatherSystem&&this.weatherSystem.update(t),this.updateParticles(t),this.updateSnakeTrail(t),this.updateDayNightCycle(t),this.renderer&&this.scene&&this.camera&&this.renderer.render(this.scene,this.camera),requestAnimationFrame((()=>this.animate()))}updateLoadingProgress(e,t){"function"==typeof this._loadingProgressCallback&&this._loadingProgressCallback(e,t);const n=document.getElementById("loading-bar"),i=document.getElementById("loading-text");n?(n.style.width=`${e}%`,console.log("Game: Updated loading bar width:",n.style.width)):console.warn("Game: Loading bar element not found"),i&&t?(i.textContent=t,console.log("Game: Updated loading text:",t)):i||console.warn("Game: Loading text element not found")}updateScore(e){this.scoreboard&&this.scoreboard.updateScore(e)}}function cl(e,t){console.log(`Loading progress: ${e}% - ${t}`);const n=document.getElementById("loading-bar"),i=document.getElementById("loading-text");n?(n.style.width=`${e}%`,console.log("Updated loading bar width:",n.style.width)):console.error("Loading bar element not found"),i?(i.textContent=t||"Loading...",console.log("Updated loading text:",i.textContent)):console.error("Loading text element not found")}console.log("Main script starting..."),document.addEventListener("DOMContentLoaded",(()=>{console.log("Document loaded, initializing game"),function(){console.log("Initializing game...");try{const e=document.getElementById("loading-screen");e&&e.classList.remove("hidden"),cl(10,"Creating game instance...");const t=new ll(cl);window.addEventListener("resize",(()=>{t&&t.handleResize()})),window.addEventListener("beforeunload",(()=>{t&&t.cleanup()}))}catch(e){console.error("Failed to initialize game:",e),cl(0,"Error loading game. Please refresh the page.")}}()}));
